-- Two dashes make the remainder of the line a comment

-* 
   This is a multi-line
   comment.
*-

------------------------------
-- Variables and Assignment --
------------------------------

-- Declare an integer-typed variable. ":=" is the assignment operator.
var number:Int32 := 5

-- "Int" is shorthand for "Int32"
var square:Int := number * number

-- We can omit the type entirely, and it will be inferred
-- from the right-hand side
var cube := number^3

-- Compound assignments work just like in C
number += 1
number *= 2


------------------
-- Flow Control --
------------------

var hello := "Hello World"

 -- "=" compares two objects for equality
if hello = "Hello " + "World"
    Console.writeLine("This test should pass!")

-- "==" compares objects for identity (they are the same object instance)
if MutableString() == MutableString()
    Console.writeLine("Different instances are not identical")
    
-- the start and end of a for loop are only evaluated once
for i in 0 .. hello.count
    Console.writeLine(hello[i])

for i in hello.count - 1 ... 0 by -1 -- run the loop backwards
    Console.writeLine(hello[i])

number := 1
-- curly braces delimit blocks
while number <= 10 {
    Console.writeLine(number + " * 10 = " + number * 10)
    number += 1
}

-- curly braces are not required around a single-line block
do
    number -= 1
while number > 0

loop {
    Console.writeLine("This kind of loop keeps on going forever and ever!")
    -- unless we hit a break...
    break
}

-- labels can attach a name to a loop, so break and continue can reference them
outer: for x in 0 ... 10 {
    for y in 0 ... 10 {
        if x = y {
            -- skip to the next loop iteration
            continue outer
        }
    }
}

-- each case is a single statement or block. No fall-through!
switch number {
    case 0: Console.writeLine("It should be zero at this point.")
 
    -- cases can test for multiple values
    case 1, 2, 3: Console.writeLine("It shouldn't be any of these values.")
 
    -- default picks up everything that wasn't matched elsewhere
    default: Console.writeLine("I have no idea how this happened.")
}

try {
    throw FileNotFoundException("Catch me!")
}
catch e:FileNotFoundException {
    Console.writeLine("Exceptions work as you'd expect.")
}


-------------
-- Methods --
-------------

method writeHello(name:String) {
    Console.writeLine("Hello, " + name + "!")
}

-- functions are methods guaranteed to have no side effects
function square(x:Int):Int {
    return x * x
}


-----------
-- Types --
-----------

-- integer types are Int8, Int16, Int32, and Int64 (with Int as an alias for
-- Int32). No unsigned types.
var five:Int8 := 5

-- all mathematical operators result in at least an Int32
var ten := five + five -- "ten" has type Int32

-- Integer constants may also be specified in binary or hexidecimal
var binaryNumber := 0b101110111
var hexNumber := 0xDEADBEEF

-- the true/false boolean type is called Bit
var trueValue:Bit := 5 > 2

-- there is no special syntax for character literals. A single-character-long
-- string may be used anywhere a Char is expected.
var char:Char := "A"

-- floating point types are called Real32 and Real64. "Real" is shorthand for
-- Real64. Numeric constants are treated as either Real32 or Real64, as 
-- required by context.
var real32:Real32 := 1.5
var real64:Real64 := 1.5 

-- all values other than null are subclasses of Object
var object:Object := ten


-----------------
-- Nullability --
-----------------

-- by default, Panda references are non-nullable. This means you cannot do:
-- var string:String := null -- this won't compile!

-- instead you have to explicitly mark the type nullable by adding a "?"
var string:String? := null

-- you may not use nullable types where non-nullable types are expected...
-- Console.writeLine(string) -- also won't compile!

-- ...unless you first prove that the value is not null
if string != null
    Console.writeLine(string) -- this works!
    
-- the compiler uses dataflow analysis to determine if a null value can reach a
-- given spot in the code. This works too:
while string = null {
    if Random.int(10) = 3
        string := "Rolled a 3"
}
Console.writeLine(string) -- can prove that a null value never reaches here


---------------
-- Operators --
---------------

-- All basic arithmetic operators work as you'd expect
var is101 := 5 * 20 + 3 - 2

-- There are two division operators. "/" is for Real division, "//" is for Int
-- division
var roundDown := 3 // 2 -- rounds down to 1
var realDivision := 3 / 2 -- is 1.5

-- &, |, and ~ are logical and, or, and xor respectively. &&, ||, and ~~ are
-- the corresponding bitwise operators. Logical operators short-circuit, and
-- the bitwise operators have higher precedence than their logical equivalents.
var logicalOp := 5 > 2 | 7 < 5 -- results in true
var bitwiseOp := 5 || 3 -- 0b101 || 0b011 results in 0b111, or 7

-- "^" means exponentiation
Console.writeLine("5^3 is: " + 5^3) -- evaluates to 125

-- no ternary operator or pre/post increment/decrement, unlike C and its
-- descendents.


---------------------------
-- Casts and Conversions --
---------------------------

-- "->" is the cast operator
var backToANumber := object->Int32

-- "-?>" tests to see if a cast will succeed (similar to Java's "instanceof")
var thisEvaluatesToTrue := "Hello"-?>String

-- for numbers, the cast check verifies that a value will fit into the indicated
-- type.
var willThisFitIntoAnInt8 := object-?>Int8

-- "-!>" is "not instanceof"
var notANumber:Object := "1000"
thisEvaluatesToTrue := notANumber-!>Int32

-- unlike C, you can't use casting to truncate numbers. Casting numbers only 
-- works when the number actually fits in the destination type.
try {
    var generateRuntimeException := 1000->Int8
    Console.writeLine("we won't ever reach here: \{generateRuntimeException}")
}
catch e:CastError {
    Console.writeLine("1000 doesn't fit into an Int8")
}

-- the "->>" operator means "convert". It is used to convert from one type to
-- another.
var convertedToString := 1000.convert() -- results in "1000"

-- we can convert back to a number, but not all strings can convert to numbers.
-- we have to convert to "Int?" rather than just "Int", because a failed
-- conversion returns null
var nullableNumber := convertedToString.convert()->Int?

-- we know that this should have worked, let's tell the compiler that:
assert nullableNumber != null

-- now we can safely use it as if it were non-nullable
Console.writeLine(nullableNumber)

-- Type conversion is a major feature in Panda. Many types provide conversion to 
-- and from String, and lots of other converters are available. Read the API 
-- documentation for details!