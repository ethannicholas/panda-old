uses panda.gl.GL
uses panda.ui.Window
uses panda.ui.events.Event
uses panda.ui.events.EventType
uses panda.ui.events.MouseEvent
uses panda.ui.events.MouseMotionEvent
uses panda.ui.images.Image
uses panda.ui.images.Sprite

class Ball {
    constant FRICTION:Real32 := 0.1
    constant ELASTICITY:Real32 := 0.7

    def sprite:Sprite
    var x:Real32
    var y:Real32
    var xv:Real32
    var yv:Real32
    var dying:Bit

    init(sprite:Sprite) {
        self.sprite := sprite
    }

    method step(ticks:Real32):Bit {
        x += xv * ticks / 16
        y += yv * ticks / 16
        yv += Bounce.G
        if !dying & y + sprite.height / 2 > Bounce.WINDOW_HEIGHT {
            xv *= 1 - FRICTION
            yv := -yv * 0.7
            if yv > -2
                dying := true
            y := Bounce.WINDOW_HEIGHT - sprite.height / 2
        }
        return y - sprite.height / 2 < Bounce.WINDOW_HEIGHT
    }

    method render() {
        sprite.draw(x, y)
    }
}

class Bounce {
    constant G:Real32 := 0.18
    constant WINDOW_WIDTH := 640
    constant WINDOW_HEIGHT := 480
    constant X_SPREAD := 3
    constant Y_SPREAD := 6
    constant MAX_DROPRATE := 15
    constant SOFT_MAX := 2000

    @class
    method loadSprites(gl:GL):ListView<Sprite> {
        return [
            Sprite(Image.load(File("images/basketball.png")), gl),
            Sprite(Image.load(File("images/bowling.png")), gl),
            Sprite(Image.load(File("images/golf.png")), gl),
            Sprite(Image.load(File("images/soccer.png")), gl),
            Sprite(Image.load(File("images/tennis.png")), gl)
        ]
    }

    @class
    method main() {
        constant ballWidth:Int16 := 50
        constant ballHeight:Int16 := 50
        def window := Window("Click and drag", 200, 200, WINDOW_WIDTH, 
                WINDOW_HEIGHT)
        def gl := window.glContext
        gl.clearColor(1, 1, 1, 1)
        gl.enable(GL.BLEND)
        gl.blendFunc(GL.SRC_ALPHA, GL.ONE_MINUS_SRC_ALPHA)
        def sprites := loadSprites(gl)
        var x:Real := 0
        var y:Real := 0
        var xv:Real := 2
        var yv:Real := 0
        var g:Real := 0.18
        def balls := Array<Ball>()
        var mouseDown := false
        var mouseHoldTime := 0
        var pendingDrops:Real := 0
        var mouseX:Real32 := 0
        var mouseY:Real32 := 0
        var currentBall := 0
        var lastTime := Panda.currentTime()
        loop {
            def now := Panda.currentTime()
            def ticks := (now - lastTime)->Real32
            gl.clear(GL.COLOR_BUFFER_BIT)
            for i in balls.count - 1 ... 0 by -1 {
                if balls[i].step(ticks)
                    balls[i].render()
                else {
                    for j in i ... balls.count - 2
                        balls[j] := balls[j + 1] 
                    balls.removeIndex(balls.count - 1)
                }
            }
            gl.swapBuffers()
            while window.eventQueue.hasMessage() {
                def event := window.eventQueue.getMessage()->Event
                if event.type = EventType.KEYDOWN
                    System.exit(0)
                else if event.type = EventType.MOUSEUP {
                    mouseDown := false
                    currentBall += 1
                    if currentBall > sprites.count
                        currentBall := 0
                }
                else if event.type = EventType.MOUSEDOWN {
                    def mb := event->MouseEvent
                    mouseDown := true
                    mouseHoldTime := 0
                    pendingDrops := 1
                    mouseX := mb.x
                    mouseY := mb.y
                }                    
                else if event.type = EventType.MOUSEMOTION {
                    def mm := event->MouseMotionEvent
                    mouseX := mm.x
                    mouseY := mm.y
                }
            }
            if mouseDown {
                while pendingDrops >= 1 {
                    var spriteIndex := currentBall
                    if spriteIndex = sprites.count
                        spriteIndex := Random.int(sprites.count)
                    def ball := Ball(sprites[spriteIndex])
                    ball.x := mouseX
                    ball.y := mouseY
                    ball.xv := (Random.real32() - 0.5) * X_SPREAD
                    ball.yv := (Random.real32() - 0.5) * Y_SPREAD
                    balls.add(ball)
                    if balls.count > SOFT_MAX {
                        for b in balls {
                            if !b.dying {
                                b.dying := true
                                break
                            }
                        }
                    }
                    pendingDrops -= 1
                }
                mouseHoldTime += 1
                pendingDrops += MAX_DROPRATE.min(mouseHoldTime / 20)
            }
            lastTime := now
        }
    }
}