uses panda.ui.Window
uses panda.gl.GL
uses panda.gl.Util
uses panda.ui.images.Image
uses panda.gl.Matrix4
uses panda.gl.Vector3

def window := Window("Click and drag", 200, 200, 640, 480)
def gl := window.glContext

def program := Util.createProgram(gl, "attribute vec3 inPosition;" +
        "attribute vec3 inNormal;" +
        "attribute vec3 inColor;" +
        "uniform mat4 pv;" +
        "uniform mat4 m;" +
        "varying float luminance;" +
        "varying vec3 color;" +
        "void main() {" +
        " gl_Position = pv * m * vec4(inPosition, 1.0);" +
        " luminance = 0.2 + 0.8 * dot((m * vec4(inNormal, 1.0)).xyz, normalize(vec3(0, 0, -1.0)));" +
        " color = inColor;" +
        "}",
        "varying float luminance;" +
        "varying vec3 color;" +
        "uniform sampler2D sampler;" +
        "void main() {" +
        " gl_FragColor = luminance * vec4(color, 1.0);" +
        "}")
gl.clearColor(0, 0, 0, 1)
gl.viewport(0, 0, 640, 480)
gl.useProgram(program)
def vertices:Array<Real32> := [
    -- bottom --
    -1, -1, -1,  0, -1,  0,  1,  0,  0,
     1, -1,  1,  0, -1,  0,  1,  0,  0,
    -1, -1,  1,  0, -1,  0,  1,  0,  0,
    -1, -1, -1,  0, -1,  0,  1,  0,  0,
     1, -1, -1,  0, -1,  0,  1,  0,  0,
     1, -1,  1,  0, -1,  0,  1,  0,  0,
    -- left --  
    -1, -1, -1, -1,  0,  0,  0,  1,  0,
    -1,  1,  1, -1,  0,  0,  0,  1,  0,
    -1,  1, -1, -1,  0,  0,  0,  1,  0,
    -1, -1, -1, -1,  0,  0,  0,  1,  0,
    -1, -1,  1, -1,  0,  0,  0,  1,  0,
    -1,  1,  1, -1,  0,  0,  0,  1,  0,
    -- right --  
     1, -1, -1,  1,  0,  0,  0,  0,  1,
     1,  1, -1,  1,  0,  0,  0,  0,  1,
     1,  1,  1,  1,  0,  0,  0,  0,  1,
     1, -1, -1,  1,  0,  0,  0,  0,  1,
     1,  1,  1,  1,  0,  0,  0,  0,  1,
     1, -1,  1,  1,  0,  0,  0,  0,  1,
    -- top --  
    -1,  1, -1,  0,  1,  0,  1,  1,  0,
    -1,  1,  1,  0,  1,  0,  1,  1,  0,
     1,  1,  1,  0,  1,  0,  1,  1,  0,
    -1,  1, -1,  0,  1,  0,  1,  1,  0,
     1,  1,  1,  0,  1,  0,  1,  1,  0,
     1,  1, -1,  0,  1,  0,  1,  1,  0,
    -- front --  
    -1, -1,  1,  0,  0,  1,  1,  0,  1,
     1,  1,  1,  0,  0,  1,  1,  0,  1,
    -1,  1,  1,  0,  0,  1,  1,  0,  1,
    -1, -1,  1,  0,  0,  1,  1,  0,  1,
     1, -1,  1,  0,  0,  1,  1,  0,  1,
     1,  1,  1,  0,  0,  1,  1,  0,  1,
    -- back --  
    -1, -1, -1,  0,  0, -1,  0,  1,  1,
    -1,  1, -1,  0,  0, -1,  0,  1,  1,
     1,  1, -1,  0,  0, -1,  0,  1,  1,
    -1, -1, -1,  0,  0, -1,  0,  1,  1,
     1,  1, -1,  0,  0, -1,  0,  1,  1,
     1, -1, -1,  0,  0, -1,  0,  1,  1
]
gl.vertexAttribPointer(0, 3, GL.FLOAT, false, 36, vertices, 0)
gl.enableVertexAttribArray(0)
gl.vertexAttribPointer(1, 3, GL.FLOAT, false, 36, vertices, 12)
gl.enableVertexAttribArray(1)
gl.vertexAttribPointer(2, 3, GL.FLOAT, false, 36, vertices, 24)
gl.enableVertexAttribArray(2)
gl.enable(GL.DEPTH_TEST)
gl.enable(GL.CULL_FACE)

def v := Matrix4.lookAt(Vector3(0, 0, -10), Vector3(0, 0, 0), Vector3(0, 1, 0))
def p := Matrix4.perspective(0.6, 1.3333, 0.1, 1000)
def pv := p * v
var xr:Real32 := 0
var yr:Real32 := 0
var zr:Real32 := 0
gl.uniform(gl.getUniformLocation(program, "pv"), pv)
loop {
    while window.eventQueue.hasMessage() {
        def event := window.eventQueue.getMessage()
        if 
    }
    assert gl.getError() = 0
    gl.clear(GL.COLOR_BUFFER_BIT || GL.DEPTH_BUFFER_BIT)
    def model := Matrix4.rotation(xr, Vector3(1, 0, 0)) *
            Matrix4.rotation(yr, Vector3(0, 1, 0)) *
            Matrix4.rotation(zr, Vector3(0, 0, 1))
    gl.uniform(gl.getUniformLocation(program, "m"), model)
    gl.drawArrays(GL.TRIANGLES, 0, 36)
    xr += 0.012
    yr += 0.03
    zr += 0.011
    gl.swapBuffers()
}
assert gl.getError() = 0
Thread.sleep(1000000)