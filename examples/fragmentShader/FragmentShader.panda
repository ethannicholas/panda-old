uses panda.ui.Window
uses panda.gl.GL
uses panda.gl.Util
uses panda.ui.images.Image
uses panda.gl.Matrix4
uses panda.gl.Vector3

def window := Window("Shader Demo", 200, 200, 640, 480)
def gl := window.glContext

def program := Util.createProgram(gl, "attribute vec2 inPosition;" +
		"varying vec2 iResolution;" +
        "void main() {" +
        " gl_Position = vec4(inPosition, 0.0, 1.0);" +
        " iResolution = vec2(640, 480);" +
        "}",
        "vec2 iResolution = vec2(640.0, 480.0);" +
        "vec4 iMouse = vec4(320.0, 240.0, 0.0, 0.0);" +
        "uniform float iGlobalTime;" +
        File("frag").readAsString() +
        "void main() { mainImage(gl_FragColor, gl_FragCoord.xy); }")
gl.clearColor(0, 0, 0, 1)
gl.viewport(0, 0, 640, 480)
gl.useProgram(program)
def timeLocation := gl.getUniformLocation(program, "iGlobalTime")
def vertices:Array<Real32> := [ -1, -1, 1, 1, 1, -1, -1, -1, -1, 1, 1, 1] 
gl.vertexAttribPointer(0, 2, GL.FLOAT, false, 0, vertices, 0)
gl.enableVertexAttribArray(0)
var time:Real32 := 0
loop {
    while window.eventQueue.hasMessage() {
        def event := window.eventQueue.getMessage()
    }
    assert gl.getError() = 0
    gl.clear(GL.COLOR_BUFFER_BIT)
    gl.uniform(timeLocation, time)
    time += 1 / 60
    gl.drawArrays(GL.TRIANGLES, 0, 6)
    gl.swapBuffers()
}
