Mac OS X
========

Panda requires Mac OS X 10.8 or higher. 

Dependencies:

Xcode command line tools
Java Development Kit 1.8 (http://www.oracle.com/)
Clang 3.6 (http://clang.llvm.org/)
LLVM 3.6 (http://llvm.org/)
Boehm-Demers-Weiser garbage collector (http://www.hboehm.info/gc/)
ICU (http://site.icu-project.org/)
SDL2 (http://www.libsdl.org/)
SDL2-image (https://www.libsdl.org/projects/SDL_image/)
Cairo (http://www.cairographics.org/)

You will need to install Xcode (and its command line tools) and Java manually. 
The other tools are available via MacPorts. If you have MacPorts installed, run:

    sudo port install clang-3.6
    sudo port install llvm-3.6
    sudo port install boehmgc
    sudo port install icu
    sudo port install libsdl2
    sudo port install libsdl2_image
    sudo port install cairo-devel

After installing Panda's dependencies, run the script 'build.sh' found in
the top-level Panda directory.

All of Panda's generated files will be placed in the 'build' directory. In 
particular, the compiler will be at 'build/native/pandac/bin/pandac'. See the 
'build/docs' directory for the generated documentation.


Linux
=====

Panda has been tested under Ubuntu 14.04. It will probably work under most
Linuxes, but hasn't actually been tested under anything else yet.

Dependencies:

gcc
g++
xsltproc
libunwind (http://www.nongnu.org/libunwind/)
Java Development Kit 1.8 (http://www.oracle.com/)
LLVM (http://llvm.org/)
Clang (http://clang.llvm.org/)
Boehm-Demers-Weiser garbage collector (http://www.hboehm.info/gc/)
ICU (http://site.icu-project.org)
SDL2 (http://www.libsdl.org/)
SDL2-image (https://www.libsdl.org/projects/SDL_image/)
Cairo (http://www.cairographics.org/)

Under Ubuntu, the required packages may be installed using:

    sudo apt-get install g++
    sudo apt-get install libunwind8-dev
    sudo apt-get install xsltproc
    sudo apt-get install llvm
    sudo apt-get install clang
    sudo apt-get install libgc-dev
    sudo apt-get install libicu-dev
    sudo apt-get install libsdl2-dev
    sudo apt-get install libsdl2-image-dev
    sudo apt-get install libcairo2-dev


You will have to manually install JDK 8 from Oracle until an official package is
available.

After installing Panda's dependencies, run the script 'build.sh' found in
the top-level Panda directory.

All of Panda's generated files will be placed in the 'build' directory. In 
particular, the compiler will be at 'build/native/pandac/bin/pandac'. See the 
'build/docs' directory for the generated documentation.


Other Unixes
============

Panda is still in very early development, and so far has not been built against
any other version of Unix. Congratulations, you're a pioneer!

Panda's code is hopefully quite portable, and odds are it won't be a tremendous 
amount of work to get it running under other Unixes that its dependencies 
support. Take a look at the Linux installation process, and expect some 
shell-script hacking and perhaps a bit of cursing. Then send me a pull request 
with your changes!

If you aren't brave and/or foolhardy enough to try it, or fail to get it 
working, see the 'Java' section below for a fallback mechanism.


Windows
=======

Panda is not natively supported under Microsoft Windows. However, all hope is
not lost! As Panda is capable of compiling to Java Virtual Machine code and 
includes a Java-compiled bootstrap compiler, you can play around with the Java 
version of the compiler until Panda is working natively on Windows. See the 
'Java' section below for details.


Java
====

If your platform isn't supported or you can't get it building properly, it's
still possible to limp along as a second-class citizen using the Java version of
the Panda compiler.

First, install the Java Development Kit 1.8 if you don't already have it 
(http://www.oracle.com/).

The Java bootstrap compiler is located at bootstrap/java/pandac/bin/pandac.jar,
and can be executed using the command:

java -jar bootstrap/java/pandac/bin/pandac.jar <options>

Since all of the native dependencies won't exist, the bootstrap compiler will
not be able to compile to native code. Instead, you must instruct it to produce
a Java jar file using "-f jar":

java -jar bootstrap/java/pandac/bin/pandac.jar -f jar -o Hello.jar Hello.panda

You can run the resulting jar using "java -jar":

java -jar Hello.jar

Obviously this isn't an ideal setup, but hopefully it's better than nothing.
Feel free to help me get it working natively on your platform of choice!


Porting to Other Platforms
==========================

Obviously I'd love to see Panda working on every platform in existence, but 
there are only so many hours in a day and I still have a lot of core features to
worry about before I spend a lot of effort porting it to platforms I don't 
personally use.

But you can help! Panda should be relatively straightforward to port. The 
bootstrap compiler which gets the process going is compiled to JVM code and 
therefore already works on most platforms you'd be interested in porting to. The 
Panda language itself is unconcerned with which platform it's running on, and 
the compiler is already 100% pure Panda. The compiler's output is LLVM, which 
again already works on all major platforms. So the only major wrinkles I know of
are:

* The native code portions of the core libraries under src/core/c. I have 
  certainly tried to keep these as portable as possible, but given that I have 
  never even attempted to compile them anywhere but MacOS or Linux, I'm sure a
  great deal of fun awaits the first lucky individual to try it on Windows!
* The LLVM output might need to be slightly different on different architectures
  (e.g. different target info at the top of the file).
* The build process is currently just some ugly shell scripts. I was originally
  planning on writing some sort of Panda-centric build tool and recasting the
  build process in terms of that, hence why I just cobbled things together for
  the time being, but that's still a distant dream. A better build process is
  desperately needed, particularly as we expand to additional platforms. This
  will definitely be the biggest hurdle on Windows, as it is currently very
  Unix-centric.
* The garbage collector Panda is currently using isn't supported on every 
  platform of interest (e.g. iOS).
* Last I checked, libunwind doesn't work on Windows. Presumably there's some
  equivalent Windows API, but that will involve some additional porting effort.
  