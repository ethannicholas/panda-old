package org.pandalanguage.pandac.parser

class ImmutableHashSet<T:Immutable> : Immutable (CollectionView<T>) {
    @private
    def contents:ImmutableHashMap<T, T>

    constructor(contents:CollectionView<T>) {
        def map := new HashMap<T, T>()
        for v in contents
            map[v] := v
        self.contents := new ImmutableHashMap<T, T>(map)
    }

    @override
    function length():Int {
        return contents.length
    }

    @override
    function contains(object:T):Bit {
        return contents[object] != null
    }

    @override
    @safeReturn
    function iterator():Iterator<T> {
        return contents.keys.iterator
    }

    @override
    function =(o:Object):Bit {
		if o-?>ImmutableHashSet<T> {
			def s := o->ImmutableHashSet<T>
			if length != s.length
				return false
			for v in s {
				if !contains(v)
					return false
			}
			return true
		}
		return false
    }

    @override
    function hash():Int {
    	var result := 0
    	for v in contents.keys
    		result ~~= v.hash
    	return result
    }
}

class StateFragment : Immutable {
	def production:Production

	def position:Int

	constructor(production:Production, position:Int) {
		self.production := production
		self.position := position
	}

	@override
	function =(o:Object):Bit {
		if o-!>StateFragment
			return false
		def frag := o->StateFragment
		return production = frag.production & position = frag.position
	}

	@override
	function hash():Int {
		return production.hash ~~ position
	}

	@override
	function format(fmt:String):String {
		def result := new MutableString("\{production.name} = ")
		result.append(production.nodes[0 .. position].join(" "))
		result.append(" @ ")
		result.append(production.nodes[position..].join(" "))
		return result->>String
	}
}

class State : Immutable {
	def id:Int

	def fragments:ImmutableHashSet<StateFragment>

	constructor(id:Int, fragments:CollectionView<StateFragment>) {
		self.id := id
		self.fragments := new ImmutableHashSet<StateFragment>(fragments)
	}

	@override
	function =(o:Object):Bit {
		if o-?>State {
			return fragments = o->State.fragments
		}
		return false
	}

	@override
	function hash():Int {
		return fragments.hash()
	}

	@override
	function format(fmt:String):String {
		def result := new MutableString("State \{id}:")
		for f in fragments
			result.append("\n" + f)
		return result->>String
	}
}

================================================================================
Scannerless Generalized LR parser generator. Reads a grammar file and creates a 
Panda file which implements a parser for the grammar.

This parser generator is intended for internal use only, generating the parser
for the Panda compiler as well as the parser for the grammar files themselves. 
As it is intended for internal use only, "user friendliness" is an entirely
foreign concept to it. Not for children, contains small parts and sharp edges.

NOTE: Currently the parser table is generated using SLR. This is a *bad plan*
and results in much more nondeterminism than there should be; the plan is to
eventually upgrade this to Minimal LR, but 'working' is more important than
'fast' at the moment.
================================================================================
class ParserGenerator {
	constant START_CHAR := 9->>Char
	constant END_CHAR := 127->>Char

	def grammar:Grammar

	def productions:List<Production>

	def productionIds := new Array<Int>()

	def productionCounts := new Array<Int>()

	def states := new HashSet<State>()

	def startStates := new HashMap<Production, Int>()

	def syntheticCount := 0

	def actions := new Array<List<Action?>>()

	def gotos := new Array<List<Int?>>()

	def firsts := new HashMap<String, HashSet<Char?>>()

	def follows := new HashMap<String, HashSet<Char>>()

	def validating:Bit

	var updated := false

	def followExcludes := new HashMap<String, HashSet<Char>>()

	constructor(grammar:Grammar, validating:Bit) {
		self.grammar := grammar
		self.validating := validating

		self.productions := new Array<Production>(grammar.productions)
		for p in productions {
			if p.exclusions != null {
-*				assert followExcludes[p.name] = null | 
						followExcludes[p.name] = p.exclusions.chars : 
						"conflicting exclusions on \{p.name}"*-
				followExcludes[p.name] := p.exclusions.chars
			}
		}
		def alpha := new HashSet<Char>()
		alpha.addAll("A" ... "Z")
		alpha.addAll("a" ... "z")
		alpha.addAll("0" ... "9")
		alpha.add("_")
		alpha.add("$")
		followExcludes["identifierText"] := alpha

		if validating {
			for i, p in productions {
				productions[i] := new Production(p.name, "String", p.nodes, 
						null, "result := '<success>'")
			}
		}
	}

	method computeClosure(fragments:HashSet<StateFragment>) {
		var startSize:Int
		do {
			startSize := fragments.length
			def newFragments := new HashSet<StateFragment>()
			for f in fragments {
				if f.position < f.production.nodes.length {
					def node := f.production.nodes[f.position]
					if node-?>IdentifierNode {
						def name := node->IdentifierNode.id
						for p in productions {
							if p.name = name
								newFragments.add(new StateFragment(p, 0))
						}
					}
				}
			}
			fragments.addAll(newFragments)
		}
		while fragments.length > startSize
	}

	method setAction(start:Int, char:Char, action:Action) {
		def old := actions[start][char->>Int]
		if old != null {
			if old.type = ActionType.MULTIPLE {
				assert old.subactions != null
				old.subactions.add(action)
			}
			else
				actions[start][char->>Int] := new Action([old, action])
		}
		else
			actions[start][char->>Int] := action
	}

	@pre(!evaluating.contains(p))
	method computeFirst(p:Production):HashSet<Char?> {
		var result := firsts[p.name]
		if result = null {
			result := new HashSet<Char?>()
			firsts[p.name] := result
		}
		for i, node in p.nodes {
			if node-?>CutNode
				continue
			if node-?>IdentifierNode {
				def chars := first(node)
				def nullable := chars.contains(null)
				for c in chars {
					if c != null & !result.contains(c) {
						result.add(c)
						updated := true
					}
				}
				if !nullable
					return result
			}
			else {
				def chars := first(node)
				assert !chars.contains(null)
				for c in chars {
					if !result.contains(c) {
						result.add(c)
						updated := true
					}
				}
				return result
			}
		}
		if !result.contains(null) {
			result.add(null)
			updated := true
		}
		return result
	}

	method computeFirst(name:String):HashSet<Char?> {
		for p in productions {
			if p.name = name
				computeFirst(p)
		}
		def result := firsts[name]
		assert result != null : "no firsts for \{name}"
		return result
	}

	method first(node:Node):HashSet<Char?> {
		def result := new HashSet<Char?>()
		if node-?>CharNode
			result.add(node->CharNode.char)
		else if node-?>CharClassNode {
			for c in node->CharClassNode.chars
				result.add(c)
		}
		else if node-?>IdentifierNode
			return first(node->IdentifierNode.id)
		else
			throw new Error("unsupported node \{node}:\{node.class.name}")
		return result
	}

	method first(name:String):HashSet<Char?> {
		var result := firsts[name]
		if result = null
			result := computeFirst(name)
		return result
	}

	method addFollows(name:String, newFollows:HashSet<Char>) {
		var result := follows[name]
		if result = null {
			result := new HashSet<Char>()
			follows[name] := result
		}
		var excludes := followExcludes[name]
		if excludes = null
			excludes := new HashSet<Char>()
		for c in newFollows {
			if !result.contains(c) & !excludes.contains(c) {
				result.add(c)
				updated := true
			}
		}
	}

	method computeFollow(name:String, p:Production, pos:Int) {
		for i, node in p.nodes[pos + 1..] {
			if node-?>CutNode
				continue
			def next := first(node)
			def nullable := next.contains(null)
			def chars := new HashSet<Char>()
			for c in next {
				if c != null
					chars.add(c)
			}
			addFollows(name, chars)
			if !nullable
				return
		}
		addFollows(name, follow(p.name))
		return
	}

	method computeFollow(name:String) {
		for p in productions {
			for i, n in p.nodes {
				if n-?>IdentifierNode & n->IdentifierNode.id = name
					computeFollow(name, p, i)
			}
		}
	}

	method follow(name:String):HashSet<Char> {
		var result := follows[name]
		if result = null {
			result := new HashSet<Char>()
		}
		return result
	}

	method computeTransitions(state:State, states:HashSet<State>) {
		def outgoing := new HashMap<Node, HashSet<StateFragment>>()
		for f in state.fragments {
			if f.position < f.production.nodes.length {
				def node := f.production.nodes[f.position]
				var outgoingSet := outgoing[node]
				if outgoingSet = null {
					outgoingSet := new HashSet<StateFragment>()
					outgoing[node] := outgoingSet
				}
				outgoingSet.add(new StateFragment(f.production, f.position + 1))
			}
			else {
				def start := state.id
				for i, p in productions {
					if p = f.production {
						def follows := follow(p.name)
						for c in follows {
							setAction(start, c, new Action(ActionType.REDUCE, 
									i))
						}
					}
				}
			}
		}
		for (node, set) in outgoing {
			def target := addState(set, states)
			if node-?>IdentifierNode {
				def name := node->IdentifierNode.id
				var found := false
				var id := -1
				for i, p in productions {
					if p.name = name {
						found := true
						id := productionIds[i]
						break
					}
				}
				assert found : "no production named '\{name}'"
				while gotos[state.id].length <= id
					gotos[state.id].add(null)
				gotos[state.id][id] := target
			}
			else if node-?>CharNode {
				def c := node->CharNode.char
				setAction(state.id, c, new Action(ActionType.SHIFT, target))
			}
			else if node-?>CharClassNode {
				def cl := node->CharClassNode
				for c in cl.chars
					setAction(state.id, c, new Action(ActionType.SHIFT, target))
			}
			else if node-?>CutNode {
				for c in START_CHAR ... END_CHAR
					setAction(state.id, c, new Action(ActionType.CUT, target))
				setAction(state.id, Parser.EOF, new Action(ActionType.CUT, 
						target))
			}
			else
				unreachable
		}
	}

	method addState(fragments:HashSet<StateFragment>, 
			states:HashSet<State>):Int {
		def original := new Array<StateFragment>(fragments)
		computeClosure(fragments)
		def state := new State(states.length, fragments)
		if states.contains(state) {
			for s in states {
				if s = state
					return s.id
			}
		}
		states.add(state)
		actions.add(new Array<Action?>(END_CHAR->>Int + 1, null))
		gotos.add(new Array<Int?>())
		computeTransitions(state, states)
		return state.id
	}

	function printable(chars:CollectionView<Char?>):String {
		def result := new MutableString("[")
		for i, c in chars {
			if i > 0
				result.append(", ")
			if c = null
				result.append("<null>")
			else if c->Char->>Int >= 33 & c->Char->>Int <= 126
				result.append(c)
			else
				result.append("(" + c->Char->>Int + ")")
		}
		return result + "]"
	}

	function printable(chars:CollectionView<Char>):String {
		def result := new MutableString("[")
		for i, c in chars {
			if i > 0
				result.append(", ")
			if c->>Int >= 33 & c->>Int <= 126
				result.append(c)
			else
				result.append("(" + c->>Int + ")")
		}
		return result + "]"
	}

	method createParseTable() {
		def states := new HashSet<State>()
		def startProductions := new HashSet<Production>()
		for p in productions {
			if p.isStart {
				def start := new Production(p.name + "_START", p.type,
						[new IdentifierNode(null, p.name), new EOFNode()],
						null, "result := " + p.name)
				productions.add(start)
				startProductions.add(start)
			}
		}

		do {
			updated := false
			for p in productions {
				computeFirst(p)
				computeFollow(p.name)
			}
		}
		while updated
		def names := new Array<String>()
		for p in productions {
			var nameFound := false
			for i, n in names {
				if names[i] = p.name {
					productionIds.add(i)
					nameFound := true
					break
				}
			}
			if !nameFound {
				productionIds.add(names.length)
				names.add(p.name)
			}
			productionCounts.add(p.nodes.length)
		}
		for p in startProductions {
			def fragments := new HashSet<StateFragment>()
			fragments.add(new StateFragment(p, 0))
			startStates[p] := addState(fragments, states)
		}
		for i, p in productions {
			Console.writeLine("production " + i + ": " + p)
			Console.writeLine("    follows: \{printable(follow(p.name))}")
			Console.writeLine("    first: \{printable(first(p.name))}")
		}
		for s in states
			Console.writeLine(s)
		for i, a in actions
			Console.writeLine("actions \{i}: \{a}")
		for i, g in gotos
			Console.writeLine("gotos \{i}: \{g}")
	}

	method writeActions(out:OutputStream) {
		out.writeLine("    constant actions := createActions()")
		out.writeLine("    @class")
		out.writeLine("    function createActions():ImmutableArray<ImmutableArray<Action?>> {")
		out.writeLine("        return [")
		for i in 0 .. actions.length {
			if i > 0
				out.writeLine(",")
			out.write("               createActions\{i}()")
		}
		out.writeLine()
		out.writeLine("           ]")
		out.writeLine("    }")
		for i, row in actions {
			while row.length > 0 & row[row.length - 1] = null
				row.removeIndex(row.length - 1)
			out.writeLine("    @class")
			out.writeLine("    function createActions\{i}():ImmutableArray<Action?> {")
			def actionMap := new HashMap<Action, Int>()
			for a in row {
				if a != null & !actionMap.contains(a) {
					def id := actionMap.length
					actionMap[a] := id
					out.writeLine("        def action\{id} := \{a}")
				}
			}
			out.write("        return [")
			for j, a in row {
				if j > 0
					out.write(", ")
				if a != null {
					def id := actionMap[a]
					assert id != null
					out.write("action" + id)
				}
				else
					out.write("null")
			}
			out.writeLine("]")
			out.writeLine("    }")
		}
	}

	method writeGotos(out:OutputStream) {
		out.writeLine("    constant gotos := createGotos()")
		out.writeLine("    @class")
		out.writeLine("    function createGotos():ImmutableArray<ImmutableArray<Int?>> {")
		out.writeLine("        return [")
		for i in 0 .. gotos.length {
			if i > 0
				out.writeLine(",")
			out.write("               createGotos\{i}()")
		}
		out.writeLine()
		out.writeLine("           ]")
		out.writeLine("    }")
		for i, row in gotos {
			while row.length > 0 & row[row.length - 1] = null
				row.removeIndex(row.length - 1)
			out.writeLine("    @class")
			out.writeLine("    function createGotos\{i}():ImmutableArray<Int?> {")
			out.write("        return [")
			for j, g in row {
				if j > 0
					out.write(", ")
				if g != null
					out.write(g)
				else
					out.write("null")
			}
			out.writeLine("]")
			out.writeLine("    }")
		}
	}

	method writeProductions(out:OutputStream) {
		out.writeLine("    constant productionIds := createProductionIds()")
		out.writeLine("    @class")
		out.writeLine("    function createProductionIds():ImmutableArray<Int> {")
		out.writeLine("        return [\{productionIds.join(', ')}]")
		out.writeLine("    }")
	}

	method writeStarts(out:OutputStream) {
		for (p, state) in startStates {
			assert p.name.endsWith("_START")
			def name := p.name[0 .. p.name.length - "_START".length]
			var type := p.type
			if !type.endsWith("?")
				type += "?"
			out.writeLine("function \{name}(file:File, text:String):(\{type}," +
					" ListView<ParseError>) {")
			out.writeLine("    def parser := new Parser(productionIds, " +
					"actions, gotos, self)")
			out.writeLine("    def result, errors := parser.parse(file, text, " +
					state + ")")
			out.writeLine("	   return (result->\{type}, errors)")
			out.writeLine("}")
		}
	}

	function getType(node:Node):String? {
		if node-?>CharNode | node-?>CharClassNode
			return "String"
		else if node-?>IdentifierNode {
			def name := node->IdentifierNode.id
			var type:String? := null
			var found := false
			for p in productions {
				if p.name = name {
					found := true
					if type = null
						type := p.type
					else
						assert type = p.type : "inconsistent types for \{name}"
				}
			}
			assert found : "no production for \{name}"
			return type
		}
		throw new Error("getting type of \{node.class}")
	}

	method writeReductions(out:OutputStream) {
		out.writeLine("    method reduce(production:Int, file:File, parserState:ParserState):Object {")
		-- FIXME need to change back to using a switch instead of these ifs,
		-- but the current hacked way switch is implemented results in 
		-- too-deeply-nested code that crashes javac
-*		out.writeLine("    	   switch production {")
		for i, p in productions {
			out.writeLine("            case \{i}: {")
			if p.code != null {
				assert p.type != null : "no type for \{p}"
				out.writeLine("def result:\{p.type}")
				for i in p.nodes.length - 1 ... 0 by -1 {
					def node := p.nodes[i]
					def name:String?
					if node.name != null
						name := node.name
					else if node-?>IdentifierNode & getType(node) != null
						name := node->IdentifierNode.id
					else
						name := null
					if name != null {
						def type := getType(node)
						assert type != null
						out.writeLine("def \{name}:\{type} := parserState.state.output->\{type}")
					}
					out.writeLine("parserState.state := parserState.state.next")
				}
				out.writeLine(p.code)
				out.writeLine("return result")
			}
			else {
				out.writeLine("for i in 0 .. \{p.nodes.length} parserState.state := parserState.state.next")
				out.writeLine("return '<no output>'")
			}
			out.writeLine("}")
		}
		out.writeLine("        }")
		out.writeLine("    }") *-

		for i in productions.length - 1 ... 0 by -1 {
			def p := productions[i]
			out.writeLine("if production = \{i} {")
			if p.code != null {
				assert p.type != null : "no type for \{p}"
				out.writeLine("def result:\{p.type}")
				for i in p.nodes.length - 1 ... 0 by -1 {
					def node := p.nodes[i]
					def name:String?
					if node.name != null
						name := node.name
					else if node-?>IdentifierNode & getType(node) != null
						name := node->IdentifierNode.id
					else
						name := null
					if name != null {
						def type := getType(node)
						assert type != null
						out.writeLine("def \{name}:\{type} := parserState.state.output->\{type}")
					}
					out.writeLine("parserState.state := parserState.state.next")
				}
				out.writeLine(p.code)
				out.writeLine("return result")
			}
			else {
				assert p.type = null : "expected code for production \{p.name}"
				out.writeLine("for i in 0 .. \{p.nodes.length} parserState.state := parserState.state.next")
				out.writeLine("return '<no output>'")
			}
			out.writeLine("}")
		}
		out.writeLine("unreachable}")
	}

	method writeParser(name:String, out:OutputStream) {
		if !validating {
			if grammar.code != null 
				out.writeLine(grammar.code[1 .. grammar.code.length - 1])
		}
		else
			out.writeLine("uses org.pandalanguage.pandac.parser.*")
		out.writeLine("class \{name} : Immutable (Reducer) {")
		out.writeLine("    -- I would love to just be able to include the parse tables as inline")
		out.writeLine("    -- array literals, but Java complains about too much code in the init")
		out.writeLine("    -- method when I do so")
		writeProductions(out)
		writeActions(out)
		writeGotos(out)
		writeReductions(out)
		writeStarts(out)
		out.writeLine("}")
	}

	@class
	method main(args:PrimitiveArray<String>) {
		var index := 0
		var validating := false
		if args[index] = "-validating" {
			validating := true
			index += 1
		}
		def path := new File(args[index])
		def text := path.readAsString()
		index += 1
        def parser := new GrammarParser()
        def result := parser.file(path, text)
        assert result[1].length = 0 : Parser.getPosition(result[1][0].offset, text) + ": " + result[1][0].error
		def grammar := result[0]->Grammar
		def gen := new ParserGenerator(grammar, validating)
		gen.createParseTable()
		def dest := new File(args[index])
		assert dest.name.endsWith(".panda") : "dest name does not end in .panda"
		gen.writeParser(dest.simpleName, dest.openOutputStream())
	}
}