package org.pandalanguage.pandac.parser

class ImmutableHashSet<T:Immutable> : Immutable (CollectionView<T>) {
    @private
    def contents:ImmutableHashMap<T, T>

    init(contents:CollectionView<T>) {
        def map := HashMap<T, T>()
        for v in contents
            map[v] := v
        self.contents := ImmutableHashMap<T, T>(map)
    }

    @override
    function get_count():Int {
        return contents.count
    }

    @override
    function contains(object:T):Bit {
        return contents[object] != null
    }

    @override
    @safeReturn
    function get_iterator():Iterator<T> {
        return contents.keys.iterator
    }

    @override
    function =(o:Object):Bit {
		if o-?>ImmutableHashSet<T> {
			def s := o->ImmutableHashSet<T>
			if count != s.count
				return false
			for v in s {
				if !contains(v)
					return false
			}
			return true
		}
		return false
    }

    @override
    function get_hash():Int {
    	var result := 0
    	for v in contents.keys
    		result ~~= v.hash
    	return result
    }
}

class StateFragment : Immutable {
	def production:Production

	def position:Int

	init(production:Production, position:Int) {
		self.production := production
		self.position := position
	}

	@override
	function =(o:Object):Bit {
		if o-!>StateFragment
			return false
		def frag := o->StateFragment
		return production = frag.production & position = frag.position
	}

	@override
	function get_hash():Int {
		return production.hash ~~ position
	}

	@override
	function convert():String {
		def result := MutableString("\{production.name} = ")
		result.append(production.nodes[0 .. position].join(" "))
		result.append(" @ ")
		result.append(production.nodes[position..].join(" "))
		return result.convert()
	}
}

class State : Immutable {
	def id:Int

	def fragments:ImmutableHashSet<StateFragment>

	init(id:Int, fragments:CollectionView<StateFragment>) {
		self.id := id
		self.fragments := ImmutableHashSet<StateFragment>(fragments)
	}

	@override
	function =(o:Object):Bit {
		if o-?>State {
			return fragments = o->State.fragments
		}
		return false
	}

	@override
	function get_hash():Int {
		return fragments.hash
	}

	@override
	function convert():String {
		def result := MutableString("State \{id}:")
		for f in fragments
			result.append("\n" + f)
		return result.convert()
	}
}

================================================================================
Scannerless Generalized LR parser generator. Reads a grammar file and creates a 
Panda file which implements a parser for the grammar.

This parser generator is intended for internal use only, generating the parser
for the Panda compiler as well as the parser for the grammar files themselves. 
As it is intended for internal use only, "user friendliness" is an entirely
foreign concept to it. Not for children, contains small parts and sharp edges.

NOTE: Currently the parser table is generated using SLR. This is a *bad plan*
and results in much more nondeterminism than there should be; the plan is to
eventually upgrade this to Minimal LR, but 'working' is more important than
'fast' at the moment.
================================================================================
class ParserGenerator {
	constant START_CHAR := 9.convert()->Char
	constant END_CHAR := 127.convert()->Char

	def grammar:Grammar

	def productions:List<Production>

	def productionIds := Array<Int>()

	def productionCounts := Array<Int>()

	def states := HashSet<State>()

	def startStates := HashMap<Production, Int>()

	def syntheticCount := 0

	def actions := Array<List<Action?>>()

	def gotos := Array<List<Int?>>()

	def firsts := HashMap<String, HashSet<Char?>>()

	def follows := HashMap<String, HashSet<Char>>()

	def validating:Bit

	var updated := false

	def followExcludes := HashMap<String, HashSet<Char>>()

	init(grammar:Grammar, validating:Bit) {
		self.grammar := grammar
		self.validating := validating

		self.productions := Array<Production>(grammar.productions)
		for p in productions {
			if p.exclusions != null {
-*				assert followExcludes[p.name] = null | 
						followExcludes[p.name] = p.exclusions.chars() : 
						"conflicting exclusions on \{p.name}"*-
				followExcludes[p.name] := p.exclusions.chars()
			}
		}
		def alpha := HashSet<Char>()
		alpha.addAll("A" ... "Z")
		alpha.addAll("a" ... "z")
		alpha.addAll("0" ... "9")
		alpha.add("_")
		alpha.add("$")
		followExcludes["identifierText"] := alpha

		if validating {
			for (i, p) in productions.enumeration {
				productions[i] := Production(p.name, "String", p.nodes, 
						null, "result := '<success>'")
			}
		}
	}

	method computeClosure(fragments:HashSet<StateFragment>) {
		var startSize:Int
		do {
			startSize := fragments.count
			def newFragments := HashSet<StateFragment>()
			for f in fragments {
				if f.position < f.production.nodes.count {
					def node := f.production.nodes[f.position]
					if node-?>IdentifierNode {
						def name := node->IdentifierNode.id
						for p in productions {
							if p.name = name
								newFragments.add(StateFragment(p, 0))
						}
					}
				}
			}
			fragments.addAll(newFragments)
		}
		while fragments.count > startSize
	}

	method setAction(start:Int, char:Char, action:Action) {
		def old := actions[start][char.convert()]
		if old != null {
			if old.type = ActionType.MULTIPLE {
				assert old.subactions != null
				old.subactions.add(action)
			}
			else
				actions[start][char.convert()] := Action([old, action])
		}
		else
			actions[start][char.convert()] := action
	}

	@pre(!evaluating.contains(p))
	method computeFirst(p:Production):HashSet<Char?> {
		var result := firsts[p.name]
		if result = null {
			result := HashSet<Char?>()
			firsts[p.name] := result
		}
		for (i, node) in p.nodes.enumeration {
			if node-?>CutNode
				continue
			if node-?>IdentifierNode {
				def chars := first(node)
				def nullable := chars.contains(null)
				for c in chars {
					if c != null & !result.contains(c) {
						result.add(c)
						updated := true
					}
				}
				if !nullable
					return result
			}
			else {
				def chars := first(node)
				assert !chars.contains(null)
				for c in chars {
					if !result.contains(c) {
						result.add(c)
						updated := true
					}
				}
				return result
			}
		}
		if !result.contains(null) {
			result.add(null)
			updated := true
		}
		return result
	}

	method computeFirst(name:String):HashSet<Char?> {
		for p in productions {
			if p.name = name
				computeFirst(p)
		}
		def result := firsts[name]
		assert result != null : "no firsts for \{name}"
		return result
	}

	method first(node:Node):HashSet<Char?> {
		def result := HashSet<Char?>()
		if node-?>CharNode
			result.add(node->CharNode.char)
		else if node-?>CharClassNode {
			for c in node->CharClassNode.chars()
				result.add(c)
		}
		else if node-?>IdentifierNode
			return first(node->IdentifierNode.id)
		else
			throw Error("unsupported node \{node}:\{node.class.name}")
		return result
	}

	method first(name:String):HashSet<Char?> {
		var result := firsts[name]
		if result = null
			result := computeFirst(name)
		return result
	}

	method addFollows(name:String, newFollows:HashSet<Char>) {
		var result := follows[name]
		if result = null {
			result := HashSet<Char>()
			follows[name] := result
		}
		var excludes := followExcludes[name]
		if excludes = null
			excludes := HashSet<Char>()
		for c in newFollows {
			if !result.contains(c) & !excludes.contains(c) {
				result.add(c)
				updated := true
			}
		}
	}

	method computeFollow(name:String, p:Production, pos:Int) {
		for (i, node) in p.nodes[pos + 1..].enumeration {
			if node-?>CutNode
				continue
			def next := first(node)
			def nullable := next.contains(null)
			def chars := HashSet<Char>()
			for c in next {
				if c != null
					chars.add(c)
			}
			addFollows(name, chars)
			if !nullable
				return
		}
		addFollows(name, follow(p.name))
		return
	}

	method computeFollow(name:String) {
		for p in productions {
			for (i, n) in p.nodes.enumeration {
				if n-?>IdentifierNode & n->IdentifierNode.id = name
					computeFollow(name, p, i)
			}
		}
	}

	method follow(name:String):HashSet<Char> {
		var result := follows[name]
		if result = null {
			result := HashSet<Char>()
		}
		return result
	}

	method computeTransitions(state:State, states:HashSet<State>) {
		def outgoing := HashMap<Node, HashSet<StateFragment>>()
		for f in state.fragments {
			if f.position < f.production.nodes.count {
				def node := f.production.nodes[f.position]
				var outgoingSet := outgoing[node]
				if outgoingSet = null {
					outgoingSet := HashSet<StateFragment>()
					outgoing[node] := outgoingSet
				}
				outgoingSet.add(StateFragment(f.production, f.position + 1))
			}
			else {
				def start := state.id
				for (i, p) in productions.enumeration {
					if p = f.production {
						def follows := follow(p.name)
						for c in follows {
							setAction(start, c, Action(ActionType.REDUCE, 
									i))
						}
					}
				}
			}
		}
		for (node, set) in outgoing {
			def target := addState(set, states)
			if node-?>IdentifierNode {
				def name := node->IdentifierNode.id
				var found := false
				var id := -1
				for (i, p) in productions.enumeration {
					if p.name = name {
						found := true
						id := productionIds[i]
						break
					}
				}
				assert found : "no production named '\{name}'"
				while gotos[state.id].count <= id
					gotos[state.id].add(null)
				gotos[state.id][id] := target
			}
			else if node-?>CharNode {
				def c := node->CharNode.char
				setAction(state.id, c, Action(ActionType.SHIFT, target))
			}
			else if node-?>CharClassNode {
				def cl := node->CharClassNode
				for c in cl.chars()
					setAction(state.id, c, Action(ActionType.SHIFT, target))
			}
			else if node-?>CutNode {
				for c in START_CHAR ... END_CHAR
					setAction(state.id, c, Action(ActionType.CUT, target))
				setAction(state.id, Parser.EOF, Action(ActionType.CUT, 
						target))
			}
			else
				unreachable
		}
	}

	method addState(fragments:HashSet<StateFragment>, 
			states:HashSet<State>):Int {
		def original := Array<StateFragment>(fragments)
		computeClosure(fragments)
		def state := State(states.count, fragments)
		if states.contains(state) {
			for s in states {
				if s = state
					return s.id
			}
		}
		states.add(state)
		actions.add(Array<Action?>(END_CHAR.convert()->Int + 1, null))
		gotos.add(Array<Int?>())
		computeTransitions(state, states)
		return state.id
	}

	function printable(chars:CollectionView<Char?>):String {
		def result := MutableString("[")
		for (i, c) in chars.enumeration {
			if i > 0
				result.append(", ")
			if c = null
				result.append("<null>")
			else if c->Char.convert()->Int >= 33 & c->Char.convert()->Int <= 126
				result.append(c)
			else
				result.append("(" + c->Char.convert()->Int + ")")
		}
		return result + "]"
	}

	function printable(chars:CollectionView<Char>):String {
		def result := MutableString("[")
		for (i, c) in chars.enumeration {
			if i > 0
				result.append(", ")
			if c.convert()->Int >= 33 & c.convert()->Int <= 126
				result.append(c)
			else
				result.append("(" + c.convert()->Int + ")")
		}
		return result + "]"
	}

	method createParseTable() {
		def states := HashSet<State>()
		def startProductions := HashSet<Production>()
		for p in productions {
			if p.isStart {
				def start := Production(p.name + "_START", p.type,
						[IdentifierNode(null, p.name), EOFNode()],
						null, "result := " + p.name)
				productions.add(start)
				startProductions.add(start)
			}
		}

		do {
			updated := false
			for p in productions {
				computeFirst(p)
				computeFollow(p.name)
			}
		}
		while updated
		def names := Array<String>()
		for p in productions {
			var nameFound := false
			for (i, n) in names.enumeration {
				if names[i] = p.name {
					productionIds.add(i)
					nameFound := true
					break
				}
			}
			if !nameFound {
				productionIds.add(names.count)
				names.add(p.name)
			}
			productionCounts.add(p.nodes.count)
		}
		for p in startProductions {
			def fragments := HashSet<StateFragment>()
			fragments.add(StateFragment(p, 0))
			startStates[p] := addState(fragments, states)
		}
-*		for (i, p) in productions.enumeration {
			Console.writeLine("production " + i + ": " + p)
			Console.writeLine("    follows: \{printable(follow(p.name))}")
			Console.writeLine("    first: \{printable(first(p.name))}")
		}
		for s in states
			Console.writeLine(s)
		for (i, a) in actions.enumeration
			Console.writeLine("actions \{i}: \{a}")
		for (i, g) in gotos.enumeration
			Console.writeLine("gotos \{i}: \{g}")*-
	}

	method writeActions(out:OutputStream) {
		out.writeLine("    constant actions := createActions()")
		out.writeLine("    @class")
		out.writeLine("    function createActions():ImmutableArray<ImmutableArray<Action?>> {")
		out.writeLine("        return [")
		for i in 0 .. actions.count {
			if i > 0
				out.writeLine(",")
			out.write("               createActions\{i}()")
		}
		out.writeLine()
		out.writeLine("           ]")
		out.writeLine("    }")
		for (i, row) in actions.enumeration {
			while row.count > 0 & row[row.count - 1] = null
				row.removeIndex(row.count - 1)
			out.writeLine("    @class")
			out.writeLine("    function createActions\{i}():ImmutableArray<Action?> {")
			def actionMap := HashMap<Action, Int>()
			for a in row {
				if a != null & !actionMap.contains(a) {
					def id := actionMap.count
					actionMap[a] := id
					out.writeLine("        def action\{id} := \{a}")
				}
			}
			out.write("        return [")
			for (j, a) in row.enumeration {
				if j > 0
					out.write(", ")
				if a != null {
					def id := actionMap[a]
					assert id != null
					out.write("action" + id)
				}
				else
					out.write("null")
			}
			out.writeLine("]")
			out.writeLine("    }")
		}
	}

	method writeGotos(out:OutputStream) {
		out.writeLine("    constant gotos := createGotos()")
		out.writeLine("    @class")
		out.writeLine("    function createGotos():ImmutableArray<ImmutableArray<Int?>> {")
		out.writeLine("        return [")
		for i in 0 .. gotos.count {
			if i > 0
				out.writeLine(",")
			out.write("               createGotos\{i}()")
		}
		out.writeLine()
		out.writeLine("           ]")
		out.writeLine("    }")
		for (i, row) in gotos.enumeration {
			while row.count > 0 & row[row.count - 1] = null
				row.removeIndex(row.count - 1)
			out.writeLine("    @class")
			out.writeLine("    function createGotos\{i}():ImmutableArray<Int?> {")
			out.write("        return [")
			for (j, g) in row.enumeration {
				if j > 0
					out.write(", ")
				if g != null
					out.write(g)
				else
					out.write("null")
			}
			out.writeLine("]")
			out.writeLine("    }")
		}
	}

	method writeProductions(out:OutputStream) {
		out.writeLine("    constant productionIds := createProductionIds()")
		out.writeLine("    @class")
		out.writeLine("    function createProductionIds():ImmutableArray<Int> {")
		out.writeLine("        return [\{productionIds.join(', ')}]")
		out.writeLine("    }")
	}

	method writeStarts(out:OutputStream) {
		for (p, state) in startStates {
			assert p.name.endsWith("_START")
			def name := p.name[0 .. p.name.length - "_START".length]
			var type := p.type
			if !type.endsWith("?")
				type += "?"
			out.writeLine("function \{name}(file:File, text:String):(\{type}," +
					" ListView<ParseError>) {")
			out.writeLine("    def parser := Parser(productionIds, " +
					"actions, gotos, self)")
			out.writeLine("    def result, errors := parser.parse(file, text, " +
					state + ")")
			out.writeLine("	   return (result->\{type}, errors)")
			out.writeLine("}")
		}
	}

	function getType(node:Node):String? {
		if node-?>CharNode | node-?>CharClassNode
			return "String"
		else if node-?>IdentifierNode {
			def name := node->IdentifierNode.id
			var type:String? := null
			var found := false
			for p in productions {
				if p.name = name {
					found := true
					if type = null
						type := p.type
					else
						assert type = p.type : "inconsistent types for \{name}"
				}
			}
			assert found : "no production for \{name}"
			return type
		}
		throw Error("getting type of \{node.class}")
	}

	method writeReductions(out:OutputStream) {
		for (i, p) in productions.enumeration {
			out.writeLine("    @class")
			out.writeLine("    method reduce\{i}(file:File, parserState:ParserState):Object {")
			if p.code != null {
				assert p.type != null : "no type for \{p}"
				out.writeLine("def result:\{p.type}")
				for i in p.nodes.count - 1 ... 0 by -1 {
					def node := p.nodes[i]
					def name:String?
					if node.name != null
						name := node.name
					else if node-?>IdentifierNode & getType(node) != null
						name := node->IdentifierNode.id
					else
						name := null
					if name != null {
						def type := getType(node)
						assert type != null
						out.writeLine("def \{name}:\{type} := parserState.state.output->\{type}")
					}
					out.writeLine("parserState.state := parserState.state.next")
				}
				out.writeLine(p.code)
				out.writeLine("return result")
			}
			else {
				assert p.type = null : "expected code for production \{p.name}"
				out.writeLine("for i in 0 .. \{p.nodes.count} parserState.state := parserState.state.next")
				out.writeLine("return '<no output>'")
			}
			out.writeLine("    }")
		}
		out.writeLine("    constant REDUCTIONS := [")
		for i in 0 .. productions.count {
			if i > 0
				out.writeLine(",")
			out.write("        reduce\{i}")
		}
		out.writeLine()
		out.writeLine("    ]")
		out.writeLine("    method reduce(production:Int, file:File, parserState:ParserState):Object? {")
		out.writeLine("        return REDUCTIONS[production](file, parserState)")
		out.writeLine("    }")
		-- FIXME use switch when that's ready
-*		out.writeLine("    	   switch production {")
		for (i, p) in productions.enumeration {
			out.writeLine("            case \{i}: {")
			if p.code != null {
				assert p.type != null : "no type for \{p}"
				out.writeLine("def result:\{p.type}")
				for i in p.nodes.count - 1 ... 0 by -1 {
					def node := p.nodes[i]
					def name:String?
					if node.name != null
						name := node.name
					else if node-?>IdentifierNode & getType(node) != null
						name := node->IdentifierNode.id
					else
						name := null
					if name != null {
						def type := getType(node)
						assert type != null
						out.writeLine("def \{name}:\{type} := parserState.state.output->\{type}")
					}
					out.writeLine("parserState.state := parserState.state.next")
				}
				out.writeLine(p.code)
				out.writeLine("return result")
			}
			else {
				out.writeLine("for i in 0 .. \{p.nodes.count} parserState.state := parserState.state.next")
				out.writeLine("return '<no output>'")
			}
			out.writeLine("}")
		}
		out.writeLine("        }")
		out.writeLine("    }") *-
	}

	method writeParser(name:String, out:OutputStream) {
		if !validating {
			if grammar.code != null 
				out.writeLine(grammar.code[1 .. grammar.code.length - 1])
		}
		else
			out.writeLine("uses org.pandalanguage.pandac.parser.*")
		out.writeLine("class \{name} : Immutable (Reducer) {")
		out.writeLine("    -- I would love to just be able to include the parse tables as inline")
		out.writeLine("    -- array literals, but Java complains about too much code in the init")
		out.writeLine("    -- method when I do so")
		writeProductions(out)
		writeActions(out)
		writeGotos(out)
		writeReductions(out)
		writeStarts(out)
		out.writeLine("}")
	}

	@class
	method main(args:ListView<String>) {
		var index := 0
		var validating := false
		if args[index] = "-validating" {
			validating := true
			index += 1
		}
		def path := File(args[index])
		def text := path.readAsString()
		index += 1
        def parser := GrammarParser()
        def result := parser.file(path, text)
        assert result[1].count = 0 : Parser.getPosition(result[1][0].offset, text) + ": " + result[1][0].error
		def grammar := result[0]->Grammar
		def gen := ParserGenerator(grammar, validating)
		gen.createParseTable()
		def dest := File(args[index])
		assert dest.name.endsWith(".panda") : "dest name does not end in .panda"
		gen.writeParser(dest.simpleName, dest.openOutputStream())
	}
}