package org.pandalanguage.pandac.parser

class ParseError : Immutable {
	def file:File
	def offset:Int
	def error:String

	constructor(file:File, offset:Int, error:String) {
		self.file := file
		self.offset := offset
		self.error := error
	}
}

class Parser : Immutable {
	constant EOF := 3->>Char
	constant DIE := ParseError(File("/die"), -1, "die")

	def productionIds:ImmutableArray<Int>

	def actions:ImmutableArray<ImmutableArray<Action?>>

	def gotos:ImmutableArray<ImmutableArray<Int?>>

	def reducer:Reducer

	constructor(productionIds:ImmutableArray<Int>, 
			actions:ImmutableArray<ImmutableArray<Action?>>, 
			gotos:ImmutableArray<ImmutableArray<Int?>>, 
			reducer:Reducer) {
		self.productionIds := productionIds
		self.actions := actions
		self.gotos := gotos
		self.reducer := reducer
	}

	@class
	function getPosition(pos:Int, text:String):(Int, Int) {
	    def stream := LineNumberInputStream(MemoryInputStream(text))
	    for i in 0 .. pos
	        stream.readInt8()
	    return (stream.line, stream.column)
	}

	function parse(file:File, rawText:String, startState:Int):(Object?, 
			ListView<ParseError>) {
		def text := rawText + EOF
		def parsers := Stack<ParserState>()
		var farthest:ParserState := ParserState(0, 
				StateNode(startState, "<START>", null))
		parsers.push(farthest)

		loop {
			if parsers.length = 0 {
				return (null, [ParseError(file, farthest.position, 
							"found \{text[farthest.position]} (\{text[farthest.position]->>Int}) in states \{farthest.state}")])
			}
			def top := parsers.peek()
			if top.position = text.length
				return (top.state.next.output, [])
			if top.state.state < 0 {
				parsers.pop()
				continue
			}
			def row := actions[top.state.state]
			def index := text[top.position]->>Int
			def a:Action?
			if index < row.length
				a := row[index]
			else
				a := null
			if a = null {
				def expected := Array<Char>()
				for (i, v) in row.enumeration()
					if v != null
						expected.add(i->>Char)
				parsers.pop()
				if top.position > farthest.position
					farthest := top
				continue
			}
			action(a, file, text, top, parsers)
		}
	}

	method action(a:Action, file:File, text:String, parserState:ParserState, 
			parsers:Stack<ParserState>) {
		switch a.type {
			case ActionType.SHIFT: {
				parserState.state := StateNode(a.target,
						text[parserState.position]->>String,
						parserState.state)
				parserState.position += 1
			}
			case ActionType.REDUCE: {
				def output := reducer.reduce(a.target, file, parserState)
				if output = DIE {
					parserState.state := StateNode(-1, output, 
							parserState.state)
					return
				}
				def next := gotos[parserState.state.state]
						[productionIds[a.target]]
				assert next != null : "no goto for \{parserState.state.state}" +
						"->\{productionIds[a.target]}"
				parserState.state := StateNode(next, output, 
						parserState.state)
			}
			case ActionType.MULTIPLE: {
				def i := a.subactions.iterator()
				assert !i.done() : "empty multiple action"
				def oldState := parserState.state
				def oldPosition := parserState.position
				action(i.next(), file, text, parserState, parsers)
				while !i.done() {
					def sub := ParserState(oldPosition, oldState)
					action(i.next(), file, text, sub, parsers)
					parsers.push(sub)
				}
			}
			case ActionType.CUT: {
				parserState.state := StateNode(a.target, "<CUT>",
						parserState.state)
				parsers.clear()
				parsers.push(parserState)
			}
			default: unreachable
		}
	}
}