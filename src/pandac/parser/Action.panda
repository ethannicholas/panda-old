package org.pandalanguage.pandac.parser

enum ActionType {
	SHIFT,
	REDUCE,
	CUT,
	MULTIPLE,
	ACCEPT
}

class Action {
	def type:ActionType

	def target:Int

	def subactions:Array<Action>?

	constructor(type:ActionType, target:Int) {
		self.type := type
		self.target := target
	}

	constructor(subactions:List<Action>) {
		self.type := ActionType.MULTIPLE
		self.subactions := new Array<Action>(subactions)
	}

	@override
	function =(o:Object):Bit {
		if o-?>Action {
			def a := o->Action
			if type != a.type | target != a.target
				return false
			if subactions != null {
				if subactions.length != a.subactions.length
					return false
				for (i, v) in subactions.enumeration() {
					if v != a.subactions[i]
						return false
				}
			}
			return true
		}
		return false
	}

	@override
	function hash():Int {
		return target 
	}

	@override
	function ->>():String {
		switch type {
			case ActionType.SHIFT: return "new Action(ActionType.SHIFT, \{target})"
			case ActionType.REDUCE: return "new Action(ActionType.REDUCE, \{target})"
			case ActionType.CUT: return "new Action(ActionType.CUT, \{target})"
			case ActionType.MULTIPLE: return "new Action(\{subactions})"
			case ActionType.ACCEPT: return "new Action(ActionType.ACCEPT, 0)"
		}
		unreachable
	}
}
