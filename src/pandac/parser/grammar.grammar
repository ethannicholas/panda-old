{
	package org.pandalanguage.pandac.parser

	class RHS {
		def terms:ListView<Node>

		def exclusions:CharClass?

		def code:String?

		init(terms:ListView<Node>, exclusions:CharClass?, code:String?) {
			self.terms := Array<Node>(terms)
			self.exclusions := exclusions
			self.code := code
		}
	}

	class Range {
		def start:Char

		def end:Char

		init(start:Char, end:Char) {
			self.start := start
			self.end := end
		}

		@override
		function =(o:Object):Bit {
			if o-?>Range {
				def r := o->Range
				return start = r.start & end = r.end
			}
			return false
		}

		@override
		function get_hash():Int {
			return start.hash << 16 + end.hash
		}		

		@override
		function convert():String {
			if start = end
				return start.convert()
			else
				return "\{start}-\{end}"
		}
	}

	class CharClass {
		constant START_CHAR := 9->Char
		constant END_CHAR := 127->Char

		def ranges:ListView<Range>

		init(ranges:ListView<Range>) {
			self.ranges := ranges
		}

		@override
		function =(o:Object):Bit {
			if o-?>CharClass {
				def cl := o->CharClass
				if ranges.count != cl.ranges.count
					return false
				for (i, r) in ranges.enumeration {
					if r != cl.ranges[i]
						return false
				}
				return true
			}
			return false
		}

		@override
		function get_hash():Int {
			var result := 0
			for r in ranges
				result ||= r.hash -- FIXME use xor when parse bug is fixed
			return result
		}

		function chars():HashSet<Char> {
			def chars := HashSet<Char>()
			if ranges[0].start = '^' & ranges[0].end = '^' {
				for c in START_CHAR ... END_CHAR
					chars.add(c)
				for r in ranges[1..] {
					for c in r.start ... r.end
						chars.remove(c)
				}
			}
			else {
				for r in ranges {
					for c in r.start ... r.end
						chars.add(c)
				}
			}
			return chars
		}

		@override
		function convert():String {
			return "[" + ranges.join("") + "]"
		}		
	}

	class Node : Immutable {
		def name:String?

		init(name:String?) {
			self.name := name
		}

		@override
		function get_hash():Int {
			unreachable
		}
	}

	class CharNode : Node {
		def char:Char

		init(char:Char) {
			super.init(null)
			self.char := char
		}

		@override
		function =(o:Object):Bit {
			if o-?>CharNode
				return char = o->CharNode.char
			return false
		}

		@override
		function get_hash():Int {
			return char.hash
		}

		@override
		function convert():String {
			return "'\{char}'"
		}
	}

	class CharClassNode : Node {
		def charClass:CharClass

		init(name:String?, charClass:CharClass) {
			super.init(name)
			self.charClass := charClass
		}

		function chars():HashSet<Char> {
			return charClass.chars()
		}

		@override
		function =(o:Object):Bit {
			if o-?>CharClassNode
				return charClass = o->CharClassNode.charClass
			return false
		}

		@override
		function get_hash():Int {
			return 0--charClass.hash
		}

		@override
		function convert():String {
			return charClass.convert()
		}

	}

	class IdentifierNode : Node {
		def id:String

		init(name:String?, id:String) {
			super.init(name)
			self.id := id
		}

		@override
		function =(o:Object):Bit {
			if o-?>IdentifierNode
				return id = o->IdentifierNode.id
			return false
		}

		@override
		function get_hash():Int {
			return id.hash
		}

		@override
		function convert():String {
			return id
		}
	}

	class CutNode : Node {
		init() {
			super.init(null)
		}

		@override
		function =(o:Object):Bit {
			return o-?>CutNode
		}

		@override
		function get_hash():Int {
			return 0
		}

		@override
		function convert():String {
			return "^"
		}
	}

	class EOFNode : CharNode {
		init() {
			super.init(GLRParser.EOF)
		}

		@override
		function =(o:Object):Bit {
			return o-?>EOFNode
		}

		@override
		function get_hash():Int {
			return 1
		}

		@override
		function convert():String {
			return "$"
		}
	}

	class Production : Immutable {
		def name:String

		def type:String?

		def nodes:ImmutableArray<Node>

		def code:String?

		def isStart:Bit

		def exclusions:CharClass?

		init(name:String, type:String?, nodes:ListView<Node>, 
				exclusions:CharClass?, code:String?) {
			if name.startsWith("@") {
				self.name := name[1..]
				isStart := true
			}
			else {
				self.name := name
				isStart := false
			}
			self.type := type
			self.nodes := ImmutableArray<Node>(nodes)
			self.code := code
			self.exclusions := exclusions
		}

		@override
		function =(o:Object):Bit {
			if o-?>Production {
				def p := o->Production
				if name != p.name
					return false
				if type != p.type
					return false
				if code != p.code
					return false
				if exclusions != p.exclusions
					return false
				if nodes.count != p.nodes.count
					return false
				for (i, n) in nodes.enumeration {
					if n != p.nodes[i]
						return false
				}
				return true
			}
			return false
		}

		@override
		function get_hash():Int {
			return name.hash
		}

		@override
		function convert():String {
			def result := MutableString(name)
			if type != null
				result.append(":" + type)
			result.append(" = " + nodes.join(' '))
			if code != null
				result.append("\n     \{code}")
			return result.convert()
		}
	}

	class Grammar {
		def productions:ListView<Production>

		def topLevelCode:String?

		def classCode:String?

		init(productions:ListView<Production>, topLevelCode:String?,
				classCode:String?) {
			self.productions := productions
			self.topLevelCode := topLevelCode
			self.classCode := classCode
		}
	}

	class Util {
		@class
		function unescape(text:String):String {
			return text.replace("\\n", "\n").replace("\\r", "\r").replace("\\t", 
					"\t").replace("\\[", "[").replace("\\]", "]").
					replace("\\\\", "\\").replace("\\'", "'")
		}
	}
}

{ }

@file:Grammar = grammar
	{ result := grammar }
grammar:Grammar = WS topLevel:optionalCode classCode:optionalCode productions
	{ result := Grammar(productions, topLevel, classCode) }
optionalCode:String? = code
	{ result := code }
optionalCode:String? = 
	{ result := null }
code:String = codeBlock WS
	{ result := codeBlock }
codeBlock:String = '{' codeChars '}'
 	{ result := "{" + codeChars + "}" }
codeChars:String = codeChars codeChar
	{ result := codeChars + codeChar }
codeChars:String =
	{ result := "" }
codeChar:String = char:[^{}]
	{ result := char.convert() }
codeChar:String = codeBlock 
	{ result := codeBlock }
productions:Array<Production> = productions production
	{ 
		result := Array<Production>()
		result.addAll(productions)
		result.add(production)
	}
productions:Array<Production> =
	{ result := [] }
production:Production = identifier optionalType EQUAL ^ rhs
	{ 
		result := Production(identifier, optionalType, rhs.terms, 
				rhs.exclusions, rhs.code) 
	}
optionalType:String? = COLON type
	{ result := type }
optionalType:String? = 
	{ result := null }
rhs:RHS = terms optionalExclusions optionalCode
	{ result := RHS(terms, optionalExclusions, optionalCode) }
optionalExclusions:CharClass? = '!' cl:class
	{ result := cl }
optionalExclusions:CharClass? =
	{ result := null }
optionalCode:String? = code
	{ result := code }
optionalCode:String? =
	{ result := null }
terms:Array<Node> = terms term
	{
		result := []
		result.addAll(terms)
		result.addAll(term)
	}
terms:Array<Node> =
	{ result := [] }
term:Array<Node> = identifier
	{ result := [IdentifierNode(null, identifier)] }
term:Array<Node> = literal
	{ 
		result := []
		for c in literal.characters
			result.add(CharNode(c)) 
	}
term:Array<Node> = cl:class
	{ result := [CharClassNode(null, cl)] }
term:Array<Node> = label:identifier COLON id:identifier
	{ result := [IdentifierNode(label, id)] }
term:Array<Node> = identifier COLON cl:class
	{ result := [CharClassNode(identifier, cl)] }
term:Array<Node> = CARET
	{ result := [CutNode()] }
types:String = types COMMA type
	{ result := types + ", " + type }
types:String = type
	{ result := type }
genericParameters:String = LT types GT
	{ result := "<\{types}>" }
genericParameters:String =
	{ result := "" }
type:String = dottedIdentifier genericParameters QUESTION
	{ result := dottedIdentifier + genericParameters + "?" }
type:String = dottedIdentifier genericParameters
	{ result := dottedIdentifier + genericParameters }
type:String = LPAREN types RPAREN QUESTION
	{ result := "(\{types})?" }
type:String = LPAREN types RPAREN
	{ result := "(\{types})" }
dottedIdentifier:String = identifier
	{ result := identifier }
dottedIdentifier:String = dottedIdentifier DOT identifier
	{ result := dottedIdentifier + "." + identifier }
identifier:String = identifierText WS
	{ result := identifierText }
identifierText:String = identifierStart identifierChars ![a-zA-Z_0-9]
	{ result := identifierStart + identifierChars }
identifierStart:String = char:[a-zA-Z_@]
	{ result := char }
identifierChars:String = chars:identifierChars char:[a-zA-Z_0-9]
	{ result := chars + char }
identifierChars:String = 
	{ result := "" }
class:CharClass = '[' ranges ']' WS
	{ result := CharClass(ranges) }
class:CharClass = '.'
	{ result := CharClass([Range("^", "^")]) }
ranges:Array<Range> = ranges range
	{ 
		result := Array<Range>()
		result.addAll(ranges)
		result.add(range)
	}
ranges:Array<Range> =
	{ result := [] }
range:Range = r1:rangeChar '-' r2:rangeChar
	{ result := Range(r1[0], r2[0]) }
range:Range = rangeChar
	{ result := Range(rangeChar[0], rangeChar[0]) }
rangeChar:String = char:[^\\\]]
	{ result := char }
rangeChar:String = escape
	{ result := escape }
escape:String = '\\' char:[nrt'"\]\\]
	{ result := Util.unescape('\\' + char) }
literal:String = ['] literalCharsSingle ['] WS
	{ result := literalCharsSingle }
literalCharsSingle:String = literalCharsSingle literalCharSingle
	{ result := literalCharsSingle + literalCharSingle }
literalCharsSingle:String =
	{ result := "" }
literalCharSingle:String = char:[^'\\]
	{ result := char }
literalCharSingle:String = escape
	{ result := escape }
literal:String = '"' literalCharsDouble '"' WS
	{ result := literalCharsDouble }
literalCharsDouble:String = literalCharsDouble literalCharDouble
	{ result := literalCharsDouble + literalCharDouble }
literalCharsDouble:String =
	{ result := "" }
literalCharDouble:String = char:[^"]
	{ result := char }
literalCharDouble:String = escape
	{ result := escape }

WS = [ \n\r\t] WS
WS =
COLON = ':' WS
EQUAL = '=' WS
LT = '<' WS
GT = '>' WS
LPAREN = '(' WS
RPAREN = ')' WS
COMMA = ',' WS
QUESTION = '?' WS
CARET = '^' WS
DOT = '.' WS
