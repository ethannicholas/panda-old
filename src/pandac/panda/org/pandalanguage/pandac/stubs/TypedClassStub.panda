package org.pandalanguage.pandac.stubs

uses org.pandalanguage.pandac.compiler.Context
uses org.pandalanguage.pandac.compiler.LookupContext
uses org.pandalanguage.pandac.parser.ParseNode
uses org.pandalanguage.pandac.tree.Annotations
uses org.pandalanguage.pandac.tree.FieldNode
uses org.pandalanguage.pandac.tree.Position
uses org.pandalanguage.pandac.types.ClassType
uses org.pandalanguage.pandac.types.GenericParameterType
uses org.pandalanguage.pandac.types.Type

================================================================================
Represents a parsed but not-yet-compiled class after symbol resolution.
================================================================================
class TypedClassStub : ClassStub {
    def superclass:ClassType?

    def interfaces:ImmutableArray<ClassType>

    def methods:ImmutableArray<TypedMethodStub>

    def fields:ImmutableArray<FieldNode>

    def genericParameters:ImmutableArray<GenericParameterType>?

    @invariant(genericParameters = null | genericParameters.length > 0)

    @pre(genericParameters = null | genericParameters.length > 0)
    constructor(position:Position, name:String, isInterface:Bit, 
            annotations:Annotations, lookupContext:LookupContext, 
            superclass:ClassType?, interfaces:ListView<ClassType>, 
            methods:ListView<TypedMethodStub>, fields:ListView<FieldNode>, 
            invariants:ListView<ParseNode>,
            genericParameters:ListView<GenericParameterType>?, isExternal:Bit) {
        super.constructor(position, name, isInterface, annotations, 
                lookupContext, invariants, isExternal)
        self.superclass := superclass
        self.interfaces := new ImmutableArray<ClassType>(interfaces)
        self.methods := new ImmutableArray<TypedMethodStub>(methods)
        self.fields := new ImmutableArray<FieldNode>(fields)
        if genericParameters != null {
            self.genericParameters := new ImmutableArray<GenericParameterType>(
                    genericParameters)
        }
    }

    function getField(context:Context, name:String):FieldNode? {
        for f in fields {
            if f.name = name
                return f
        }
        if superclass != null {
            def superField := context.getStub(superclass).getField(context, 
                    name)
            if superField != null
                return superField
        }
        for intf in interfaces {
            def intfField := context.getStub(intf).getField(context, name)
            if intfField != null
                return intfField
        }
        return null
    }

    function instanceFields():ListView<FieldNode> {
        Panda.log("instanceFields is not implemented")
        return fields
    }

    @override
    function format(fmt:String):String {
        return "\{name}(\{fields}, \{methods})"
    }
}