package org.pandalanguage.pandac.stubs

uses org.pandalanguage.pandac.compiler.Context
uses org.pandalanguage.pandac.types.GenericType
uses org.pandalanguage.pandac.types.Type
uses org.pandalanguage.pandac.types.MethodType

================================================================================
Represents a group of same-named method overloads.
================================================================================
class Methods : Immutable (Symbol) {
    @private
    var _name:String

    def entries:ImmutableArray<MethodStub>

    init(stub:MethodStub) {
        self._name := stub.name
        self.entries := [stub]
    }

    init(entries:ListView<MethodStub>) {
        self._name := entries[0].name
        self.entries := ImmutableArray<MethodStub>(entries)
        assert HashSet<MethodStub>(entries).count = entries.count : 
                "duplicate method in \{entries}"
    }

    @override
    function get_name():String {
        return _name
    }

    function +(m:MethodStub):Methods {
        def result := Array<MethodStub>()
        for old in entries {
            if !m.isOverrideOf(old) {
                result.add(old)
            }
        }
        assert !result.contains(m) : "already have \{m}"
        result.add(m)
        return Methods(result)
    }

    function +(m:Methods):Methods {
        -- FIXME brain-dead O(N^2) approach
        def result := Array<MethodStub>()
        outer: for oldMethod in entries {
            for newMethod in m.entries {
                assert newMethod.name = oldMethod.name
                if newMethod.isOverrideOf(oldMethod) {
                    continue outer
                }
            }
            result.add(oldMethod)
        }
        for newMethod in m.entries {
            assert !result.contains(newMethod) : "already have \{newMethod}"
            result.add(newMethod)
        }
        return Methods(result)
    }

    function forType(context:Context, type:GenericType):Methods {
        def result := Array<MethodStub>()
        for m in entries {
            def newStub := m.specializeFor(context, type)
            result.add(newStub)
        }
        return Methods(result)
    }

    @override
    function convert():String {
        return entries.convert()
    }
}