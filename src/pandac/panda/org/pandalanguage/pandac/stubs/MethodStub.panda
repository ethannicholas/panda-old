package org.pandalanguage.pandac.stubs

uses org.pandalanguage.pandac.ast.ASTBlock
uses org.pandalanguage.pandac.tree.Annotations
uses org.pandalanguage.pandac.tree.MethodNode
uses org.pandalanguage.pandac.tree.MethodNodeType
uses org.pandalanguage.pandac.tree.Parameter
uses org.pandalanguage.pandac.tree.Position
uses org.pandalanguage.pandac.types.ClassType
uses org.pandalanguage.pandac.types.Type
uses org.pandalanguage.pandac.types.VoidType

================================================================================
Represents a parsed but not-yet-compiled method.
================================================================================
class MethodStub : Immutable (Symbol) {
    def position:Position

    property name:String

    def annotations:Annotations

    def methodType:MethodNodeType

    def body:ASTBlock?

    def owner:ClassType

    def parameters:ImmutableArray<FormalParameter>

    def returnType:Type

    @pre(annotations.isClass | methodType = MethodNodeType.CONSTRUCTOR |
            (parameters.length > 0 & parameters[0].name = Parameter.SELF_NAME))
    constructor(position:Position, name:String, annotations:Annotations,
            methodType:MethodNodeType, parameters:ListView<FormalParameter>, 
            returnType:Type, body:ASTBlock?, owner:ClassType) {
        self.position := position
        self._name := name
        self.annotations := annotations
        self.methodType := methodType
        self.body := body
        self.parameters := new ImmutableArray<FormalParameter>(
                parameters)
        self.returnType := returnType
        self.owner := owner
    }

    ============================================================================
    Returns true if this method overrides `parent`.
    ============================================================================
    function isOverrideOf(parent:MethodStub):Bit {
        if parent.name != name
            return false
        def isClass := parent.annotations.isClass
        if isClass != annotations.isClass
            return false
        if parent.name = MethodNode.CONVERT_NAME & 
                parent.returnType != returnType
            return false
        def parentParams := parent.parameters
        if parentParams.length != parameters.length
            return false
        def start:Int
        if isClass
            start := 0
        else {
            -- skip 0; self will not match because we are looking at two
            -- different classes
            start := 1
            assert parentParams[0].name = Parameter.SELF_NAME
            assert parameters[0].name = Parameter.SELF_NAME
        }
        for i in start .. parentParams.length {
            if parentParams[i].type != parameters[i].type
                return false
        }
        return true
    }

    ============================================================================
    True if the method is declared virtual (in other words, it needs to appear 
    in the class' VTABLE). This is false for class methods, final methods, and
    constructors.
    ============================================================================
    function isDeclaredVirtual():Bit {
        return !annotations.isClass & !annotations.isFinal & 
                methodType != MethodNodeType.CONSTRUCTOR
    }

    @override
    function format(fmt:String):String {
        def result := new MutableString()
        switch methodType {
            case MethodNodeType.METHOD: result.append("method ")
            case MethodNodeType.FUNCTION: result.append("function ")
            case MethodNodeType.CONSTRUCTOR: { -* do nothing *- }
            default: unreachable
        }
        result.append(name)
        result.append("(")
        var start:Int
        if annotations.isClass
            start := 0
        else
            start := 1
        for i in start .. parameters.length {
            if i > start
                result.append(", ")
            result.append(parameters[i].name)
            if parameters[i].isConvert
                result.append("->>")
            else
                result.append(":")
            result.append(parameters[i].type.name)
            if parameters[i].isVarArg
                result.append("...")
        }
        result.append(")")
        if returnType != VoidType.VOID {
            result.append(":")
            result.append(returnType.name)
        }
        result.append(" (\{hash})")
        return result->>(String)
    }
}