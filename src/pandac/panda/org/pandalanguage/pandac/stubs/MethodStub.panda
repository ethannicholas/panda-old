package org.pandalanguage.pandac.stubs

uses org.pandalanguage.pandac.ast.ASTBlock
uses org.pandalanguage.pandac.compiler.Context
uses org.pandalanguage.pandac.compiler.SymbolTable
uses org.pandalanguage.pandac.stubs.MethodStub
uses org.pandalanguage.pandac.tree.Annotations
uses org.pandalanguage.pandac.tree.MethodNode
uses org.pandalanguage.pandac.tree.Parameter
uses org.pandalanguage.pandac.tree.Position
uses org.pandalanguage.pandac.types.ClassType
uses org.pandalanguage.pandac.types.GenericType
uses org.pandalanguage.pandac.types.MethodType
uses org.pandalanguage.pandac.types.Type
uses org.pandalanguage.pandac.types.VoidType

================================================================================
Represents a parsed but not-yet-compiled method.
================================================================================
class MethodStub : Immutable {
    choice Kind {
        METHOD,
        FUNCTION,
        INIT
    }

    def position:Position

    def name:String

    def annotations:Annotations

    def kind:Kind

    def body:ASTBlock?

    def owner:ClassType

    def parameters:ImmutableArray<FormalParameter>

    def genericParameters:ImmutableArray<(String, Type?)>?

    def returnType:Type

    property type:MethodType

    -- if this stub is a specialization of a generic method in an unspecialized
    -- class (i.e. it's not a "real" method), base points to the actual stub
    def base:MethodStub?

    property unwrapped:MethodStub

    init(position:Position, name:String, annotations:Annotations,
            kind:Kind, parameters:ListView<FormalParameter>, 
            genericParameters:ListView<(String, Type?)>?, returnType:Type,
            body:ASTBlock?, owner:ClassType) {
        init(position, name, annotations, kind, parameters, genericParameters,
                returnType, body, owner, null)
    }

    init(position:Position, name:String, annotations:Annotations,
            kind:Kind, parameters:ListView<FormalParameter>, 
            genericParameters:ListView<(String, Type?)>?, returnType:Type,
            body:ASTBlock?, owner:ClassType, base:MethodStub?) {
        self.position := position
        self.name := name
        self.annotations := annotations
        self.kind := kind
        self.body := body
        self.parameters := ImmutableArray<FormalParameter>(parameters)
        if genericParameters != null {
            self.genericParameters := ImmutableArray<(String, Type?)>(
                    genericParameters)
        }
        else {
            self.genericParameters := null
        }
        self.returnType := returnType
        self.owner := owner
        self.base := base
    }

    ============================================================================
    True if the method is declared virtual (in other words, it needs to appear 
    in the class' VTABLE). This is false for class methods, final methods, and
    inits.
    ============================================================================
    property isDeclaredVirtual:Bit

    @private
    function get_isDeclaredVirtual():Bit {
        return !annotations.isClass & 
                !annotations.isFinal & 
                !annotations.isPrivate & 
                kind != Kind.INIT
    }

    @private
    function get_type():MethodType {
        def types := Array<Type>()
        for p in parameters {
            types.add(p.type)
        }
        return MethodType(types, returnType, kind = Kind.FUNCTION, true)
    }

    ========================================================================
    Returns true if this method overrides `parent`.
    ========================================================================
    function isOverrideOf(parent:MethodStub):Bit {
        if parent.name != name {
            return false
        }
        if parent.annotations.isClass != annotations.isClass {
            return false
        }
        return parent.type.methodParameters = type.methodParameters &
                parent.returnType = returnType
    }

    function specializeFor(context:Context, type:GenericType):MethodStub {
        def symbols := SymbolTable()
        if owner-?>GenericType {
            def genericOwner := owner->GenericType
            for (i, g) in genericOwner.parameters.enumeration {
                symbols.add(g.name, TypeSymbol(type.parameters[i]))
            }
        }
        else {
            def ownerStub := context.getStub(owner)
            if ownerStub.genericParameters != null {
                for (i, g) in ownerStub.genericParameters.enumeration {
                    def base:String
                    if owner-?>GenericType {
                        base := owner->GenericType.base.name
                    }
                    else {
                        base := owner.name
                    }
                    symbols.add(base + "." + g[0], 
                            TypeSymbol(type.parameters[i]))
                }
            }
        }
        def newParameters := Array<FormalParameter>()
        for p in parameters {
            newParameters.add(FormalParameter(p.position, p.name, 
                    GenericType.getType(p.type, symbols), p.isVar, p.isVarArg))
        }
        def newReturnType := GenericType.getType(self.returnType, symbols)
        def result := MethodStub(position, name, annotations, kind, newParameters, 
                genericParameters, newReturnType, null, type, self)
        return result
    }

    function typeWithGenerics(genericTypes:ListView<Type>?):MethodType {
        if genericParameters = null {
            return type
        }
        def symbols := SymbolTable()
        for (i, g) in genericParameters.enumeration {
            symbols.add(owner.name + "." + g[0], TypeSymbol(genericTypes[i]))
        }
        def types := Array<Type>()
        for p in parameters {
            types.add(GenericType.getType(p.type, symbols))
        }
        def returnType := GenericType.getType(self.returnType, symbols)
        return MethodType(types, returnType, kind = Kind.FUNCTION, true)
    }

    @private
    function get_unwrapped():MethodStub {
        if base != null {
            return base.unwrapped
        }
        return self
    }

    @override
    function convert():String {
        def result := MutableString(annotations.convert())
        switch kind {
            case Kind.METHOD: result.append("method ")
            case Kind.FUNCTION: result.append("function ")
            case Kind.INIT: { -* do nothing *- }
            default: unreachable
        }
        result.append(owner.name)
        result.append(".")
        result.append(name)
        result.append("(")
        var start:Int
        for (i, p) in parameters.enumeration {
            if i > 0 {
                result.append(", ")
            }
            result.append(p.name)
            result.append(":")
            result.append(p.type.displayName)
            if p.isVarArg {
                result.append("...")
            }
        }
        result.append(")")
        if returnType != VoidType.VOID {
            result.append(":")
            result.append(returnType.displayName)
        }
        result.append("(\{hash})")
        return result.convert()
    }

    method write(out:IndentedOutputStream) {
        out.write(self)
        if body != null {
            out.write(" ")
            body.write(out)
        }
    }
}