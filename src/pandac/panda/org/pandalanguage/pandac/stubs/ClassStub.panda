package org.pandalanguage.pandac.stubs

uses org.pandalanguage.pandac.ast.ASTExpression
uses org.pandalanguage.pandac.ast.ASTInvariant
uses org.pandalanguage.pandac.ast.ASTTypedIdentifier
uses org.pandalanguage.pandac.compiler.Context
uses org.pandalanguage.pandac.compiler.LookupContext
uses org.pandalanguage.pandac.compiler.OrderedMap
uses org.pandalanguage.pandac.compiler.StubMap
uses org.pandalanguage.pandac.compiler.SymbolTable
uses org.pandalanguage.pandac.parser.ParseNode
uses org.pandalanguage.pandac.tree.Annotations
uses org.pandalanguage.pandac.tree.FieldNode
uses org.pandalanguage.pandac.tree.MethodNodeType
uses org.pandalanguage.pandac.tree.Position
uses org.pandalanguage.pandac.tree.VariableType
uses org.pandalanguage.pandac.types.ClassType
uses org.pandalanguage.pandac.types.GenericType
uses org.pandalanguage.pandac.types.GenericParameterType
uses org.pandalanguage.pandac.types.Type
uses org.pandalanguage.pandac.types.UnresolvedType

================================================================================
Represents a parsed but not-yet-compiled class.
================================================================================
class ClassStub {
    def position:Position

    def type:ClassType

    def isInterface:Bit

    def annotations:Annotations

    def symbols:Map<String, Symbol>

    def lookupContext:LookupContext

    def isExternal:Bit

    def superclass:ClassType?

    def interfaces:ImmutableArray<ClassType>

    def fullyResolved:Bit

    def invariants:ImmutableArray<ASTInvariant>

    def genericParameters:ImmutableArray<(String, Type?)>?

    def containingClass:ClassType?

    def cachedInstanceFields:ListView<FieldNode>?

    @invariant(genericParameters = null | genericParameters.length > 0)

    @pre(genericParameters = null | genericParameters.length > 0)
    init(position:Position, type:ClassType, isInterface:Bit, 
            annotations:Annotations, superclass:ClassType?, 
            interfaces:CollectionView<ClassType>, 
            symbols:OrderedMap<String, Symbol>, lookupContext:LookupContext,
            invariants:CollectionView<ASTInvariant>,
            genericParameters:ListView<(String, Type?)>?, isExternal:Bit,
            containingClass:ClassType?) {
        super.init()
        self.position := position
        self.type := type
        self.isInterface := isInterface
        self.annotations := annotations
        self.invariants := ImmutableArray<ASTInvariant>(invariants)
        self.isExternal := isExternal
        self.containingClass := containingClass
        self.superclass := superclass
        self.interfaces := ImmutableArray<ClassType>(interfaces)
        self.symbols := OrderedMap<String, Symbol>(symbols)
        self.lookupContext := lookupContext
        def filter := f:FieldNode => f.type-?>UnresolvedType
        self.fullyResolved := fields.filter(filter).length = 0
        if genericParameters != null {
            self.genericParameters := 
                    ImmutableArray<(String, Type?)>(genericParameters)
        }
    }

    property name:String

    @private
    function get_name():String {
        return type.name
    }

    property simpleName:String

    @private
    function get_simpleName():String {
        if name.contains(".")
            return name[name.lastIndexOf(".")->Int + 1..]
        else
            return name
    }

    property packageName:String?

    @private
    function get_packageName():String? {
        if name.contains(".")
            return name[..name.lastIndexOf(".")->Int]
        else
            return null
    }

    property fields:ListView<FieldNode>

    @private
    function get_fields():ListView<FieldNode> {
        def result := Array<FieldNode>()
        for (_, s) in symbols {
            if s-?>FieldNode
                result.add(s->FieldNode)
        }
        return result
    }

    property methods:ListView<MethodStub>

    @private
    function get_methods():ListView<MethodStub> {
        def result := Array<MethodStub>()
        for (_, s) in symbols {
            if s-?>Methods
                result.addAll(s->Methods.methods)
        }
        return result
    }

    ============================================================================
    Returns a list of all of the interface methods in this class corresponding
    to a particular interface. The order of methods in the resulting array is 
    consistent across all classes implementing this interface.
    ============================================================================
    @safeReturn
    method interfaceMethods(intf:ClassStub, 
            context:Context):ListView<MethodStub> {
        def result := Array<MethodStub>(intf.virtualMethods(context))
        def myMethods := virtualMethods(context)
        for (i, m) in result.enumeration() {
            for m2 in myMethods {
                if m2.isOverrideOf(m) {
                    result[i] := m2
                    break
                }
            }
        }
        return result
    }

    ============================================================================
    Returns the set of all of the interfaces directly or indirectly implemented
    by this class. If this class represents an interface, it will include itself
    in the result.
    ============================================================================
    function allInterfaces(context:Context):CollectionView<ClassStub> {
        def result := HashSet<ClassStub>()
        def sc := superclass
        if sc != null
            result.addAll(context.getStub(sc.name).allInterfaces(context))
        if isInterface
            result.add(self)
        for intf in interfaces
            result.addAll(context.getStub(intf.name).allInterfaces(context))
        return result
    }

    function getField(context:Context, name:String):FieldNode? {
        for f in fields {
            if f.name = name
                return f
        }
        if superclass != null {
            def superField := context.getStub(superclass).getField(context, 
                    name)
            if superField != null
                return superField
        }
        for intf in interfaces {
            def intfField := context.getStub(intf).getField(context, name)
            if intfField != null
                return intfField
        }
        return null
    }

    @private
    method determineInstanceFields(context:Context):ListView<FieldNode> {
        def result := Array<FieldNode>()
        if superclass != null {
            def stub := context.getStub(superclass.name)
            result.addAll(stub.instanceFields(context))
        }
        result.addAll(fields.filter(f => !f.annotations.isClass & 
                !f.annotations.isThread & f.varType != VariableType.PROPERTY))
        return result
    }

    method instanceFields(context:Context):ListView<FieldNode> {
        if cachedInstanceFields = null
            cachedInstanceFields := determineInstanceFields(context)
        return cachedInstanceFields
    }

    @class
    @limited
    method addOverrides(source:CollectionView<MethodStub>, 
            dest:List<MethodStub>) {
        outer: for s in source {
            if !s.isDeclaredVirtual
                continue
            for (i, d) in dest.enumeration() {
                if s.isOverrideOf(d) {
                    dest[i] := s
                    continue outer
                }
            }
            dest.add(s)
        }
    }

    function instanceMethods(context:Context):
            CollectionView<MethodStub> {
        def result := Array<MethodStub>()
        if superclass != null {
            result.addAll(context.getStub(superclass.name)->ClassStub.
                    instanceMethods(context).filter(
                        m => !m.annotations.isPrivate))
        }
        result.addAll(methods.filter(
                m => m.methodType != MethodNodeType.INIT & 
                !m.annotations.isClass))
        return result
    }

    ============================================================================
    Returns a ListView of all of the virtual methods in this class. Methods 
    which are inherited or overridden from parent classes appear in this array 
    in the same index in which they were present in the parent class, and new 
    methods will appear at the end of the array.
    ============================================================================
    @safeReturn
    method virtualMethods(context:Context):ListView<MethodStub> {
        def result := Array<MethodStub>()
        for i in interfaces.length - 1 ... 0 by -1 {
            addOverrides(context.getStub(interfaces[i]).virtualMethods(context),
                    result)
        }
        def sc := superclass
        if sc != null
            addOverrides(context.getStub(sc).virtualMethods(context), result)
        def virtuals := Array<MethodStub>()
        for m in methods {
            if m.isDeclaredVirtual
                virtuals.add(m)
        }
        addOverrides(virtuals, result)
        return result
    }

    method isImmutable(context:Context):Bit {
        if type = ClassType.IMMUTABLE
            return true
        if superclass = null
            return false
        return context.getStub(superclass).isImmutable(context)
    }

    @override
    function convert():String {
        return "\{name}(\{fields}, \{methods})"
    }
}