package org.pandalanguage.pandac.stubs

uses org.pandalanguage.pandac.ast.ASTExpression
uses org.pandalanguage.pandac.ast.ASTInvariant
uses org.pandalanguage.pandac.ast.ASTTypedIdentifier
uses org.pandalanguage.pandac.compiler.Context
uses org.pandalanguage.pandac.compiler.LookupContext
uses org.pandalanguage.pandac.compiler.OrderedMap
uses org.pandalanguage.pandac.compiler.StubGenerator
uses org.pandalanguage.pandac.compiler.StubMap
uses org.pandalanguage.pandac.compiler.SymbolTable
uses org.pandalanguage.pandac.stubs.MethodStub
uses org.pandalanguage.pandac.tree.Annotations
uses org.pandalanguage.pandac.tree.FieldNode
uses org.pandalanguage.pandac.tree.Position
uses org.pandalanguage.pandac.tree.Variable
uses org.pandalanguage.pandac.types.ClassType
uses org.pandalanguage.pandac.types.GenericType
uses org.pandalanguage.pandac.types.GenericParameterType
uses org.pandalanguage.pandac.types.Type
uses org.pandalanguage.pandac.types.UnresolvedType

================================================================================
Represents a parsed but not-yet-compiled class.
================================================================================
class ClassStub (Symbol) {
    choice Kind {
        CLASS,
        INTERFACE
    }

    def position:Position

    def type:ClassType

    def kind:Kind

    def annotations:Annotations

    def symbols:Map<String, Symbol>

    def lookupContext:LookupContext

    def isExternal:Bit

    def superclass:ClassType?

    def interfaces:ImmutableArray<ClassType>

    def fullyResolved:Bit

    def invariants:ImmutableArray<ASTInvariant>

    def genericParameters:ImmutableArray<(String, Type?)>?

    def containingClass:ClassType?

    def cachedInstanceFields:ListView<FieldNode>?

    property isUnspecialized:Bit

    @invariant(genericParameters = null | genericParameters.count > 0)

    @pre(genericParameters = null | genericParameters.count > 0)
    init(position:Position, type:ClassType, kind:Kind, annotations:Annotations, 
            superclass:ClassType?, interfaces:CollectionView<ClassType>, 
            symbols:OrderedMap<String, Symbol>, lookupContext:LookupContext,
            invariants:CollectionView<ASTInvariant>,
            genericParameters:ListView<(String, Type?)>?, isExternal:Bit,
            containingClass:ClassType?) {
        self.position := position
        self.type := type
        self.kind := kind
        self.annotations := annotations
        self.invariants := ImmutableArray<ASTInvariant>(invariants)
        self.isExternal := isExternal
        self.containingClass := containingClass
        self.superclass := superclass
        self.interfaces := ImmutableArray<ClassType>(interfaces)
        self.symbols := OrderedMap<String, Symbol>(symbols)
        self.lookupContext := lookupContext
        def filter := f:FieldNode => f.type-?>UnresolvedType
        self.fullyResolved := fields.filter(filter).count = 0
        if genericParameters != null {
            self.genericParameters := 
                    ImmutableArray<(String, Type?)>(genericParameters)
        }
    }

    @override
    function get_name():String {
        return type.name
    }

    property simpleName:String

    @private
    function get_simpleName():String {
        if name.contains(".") {
            return name[name.lastIndexOf(".")->Int + 1..]
        }
        else {
            return name
        }
    }

    property packageName:String?

    @private
    function get_packageName():String? {
        if name.contains(".") {
            return name[..name.lastIndexOf(".")->Int]
        }
        else {
            return null
        }
    }

    property fields:ListView<FieldNode>

    @private
    function get_fields():ListView<FieldNode> {
        def result := Array<FieldNode>()
        for (_, s) in symbols {
            if s-?>FieldNode {
                result.add(s->FieldNode)
            }
        }
        return result
    }

    property methods:ListView<MethodStub>

    @private
    function get_methods():ListView<MethodStub> {
        def result := Array<MethodStub>()
        for (_, s) in symbols {
            if s-?>Methods {
                result.addAll(s->Methods.entries)
            }
        }
        return result
    }

    function getField(context:Context, name:String):FieldNode? {
        for f in fields {
            if f.name = name {
                return f
            }
        }
        if superclass != null {
            def superField := context.getStub(superclass).getField(context, 
                    name)
            if superField != null {
                return superField
            }
        }
        for intf in interfaces {
            def intfField := context.getStub(intf).getField(context, name)
            if intfField != null {
                return intfField
            }
        }
        return null
    }

    @private
    method determineInstanceFields(context:Context):ListView<FieldNode> {
        def result := Array<FieldNode>()
        if superclass != null {
            def stub := context.getStub(superclass.name)
            result.addAll(stub.instanceFields(context))
        }
        result.addAll(fields.filter(f => !f.annotations.isClass & 
                !f.annotations.isThread & f.kind != Variable.Kind.PROPERTY))
        return result
    }

    method instanceFields(context:Context):ListView<FieldNode> {
        if cachedInstanceFields = null {
            cachedInstanceFields := determineInstanceFields(context)
        }
        return cachedInstanceFields
    }

    method isImmutable(stubGenerator:StubGenerator):Bit {
        if type = ClassType.IMMUTABLE {
            return true
        }
        if superclass = null {
            return false
        }
        return stubGenerator.getStub(superclass).isImmutable(stubGenerator)
    }

    @private
    function get_isUnspecialized():Bit {
        return genericParameters != null & !annotations.isSpecialize
    }

    @override
    function convert():String {
        return "\{name}(\{fields}, \{methods})"
    }
}