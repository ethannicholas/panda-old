package org.pandalanguage.pandac.ast

uses org.pandalanguage.pandac.tree.Position

choice ClassCategory {
    CLASS,
    INTERFACE
}

class ASTClass : ASTNode {
    def name:String

    def classCategory:ClassCategory

    def doccomment:String?

    def annotations:ImmutableArray<ASTAnnotation>?

    def superclass:ASTType?

    def interfaces:ImmutableArray<ASTType>?

    def isExternal:Bit

    def genericParameters:ImmutableArray<ASTTypedIdentifier>?

    def contents:ImmutableArray<ASTNode>

    init(position:Position, name:String, classCategory:ClassCategory, 
            doccomment:String?, annotations:ListView<ASTAnnotation>?, 
            superclass:ASTType?, interfaces:ListView<ASTType>?, 
            genericParameters:ListView<ASTTypedIdentifier>?,
            contents:ListView<ASTNode>, isExternal:Bit) {
        super.init(position)
        self.name := name
        self.classCategory := classCategory
        self.doccomment := doccomment
        if annotations != null
            self.annotations := ImmutableArray<ASTAnnotation>(annotations)
        else
            self.annotations := null
        if genericParameters != null {
            self.genericParameters := ImmutableArray<ASTTypedIdentifier>(
                    genericParameters)
        }
        else
            self.genericParameters := null
        self.superclass := superclass
        if interfaces != null
            self.interfaces := ImmutableArray<ASTType>(interfaces)
        else
            self.interfaces := null
        self.contents := ImmutableArray<ASTNode>(contents)
        self.isExternal := isExternal
    }

    @override
    function convert():String {
        return name
    }

    @override
    method write(out:IndentedOutputStream) {
        switch classCategory {
            case ClassCategory.CLASS:
                out.write("class ")
            case ClassCategory.INTERFACE:
                out.write("interface ")
        }
        out.write(name)
        if superclass != null | interfaces != null
            out.write(" : ")
        if superclass != null
            out.write(superclass)
        if interfaces != null {
            if classCategory != ClassCategory.INTERFACE
                out.write(" (")
            out.write(interfaces.join(","))
            if classCategory != ClassCategory.INTERFACE
                out.write(")")
        }
        out.writeLine(" {")
        out.level += 1
        for node in contents
            node.write(out)
        out.level -= 1
        out.writeLine("}")
    }
}