package org.pandalanguage.pandac.ast

uses org.pandalanguage.pandac.tree.Position

class ASTClass : ASTNode {
    def name:String

    def isInterface:Bit

    def doccomment:String?

    def annotations:ImmutableArray<ASTAnnotation>?

    def superclass:ASTType?

    def interfaces:ImmutableArray<ASTType>?

    def isExternal:Bit

    def genericParameters:ImmutableArray<ASTTypedIdentifier>?

    def methods:ImmutableArray<ASTMethod>

    def fields:ImmutableArray<ASTField>

    def invariants:ImmutableArray<ASTInvariant>

    init(position:Position, name:String, isInterface:Bit, 
            doccomment:String?, annotations:ListView<ASTAnnotation>?, 
            superclass:ASTType?, interfaces:ListView<ASTType>?, 
            genericParameters:ListView<ASTTypedIdentifier>?,
            methods:ListView<ASTMethod>, fields:ListView<ASTField>, 
            invariants:ListView<ASTInvariant>, isExternal:Bit) {
        super.init(position)
        self.name        := name
        self.isInterface := isInterface
        self.doccomment  := doccomment
        if annotations != null
            self.annotations := ImmutableArray<ASTAnnotation>(annotations)
        else
            self.annotations := null
        if genericParameters != null {
            self.genericParameters := ImmutableArray<ASTTypedIdentifier>(
                    genericParameters)
        }
        else
            self.genericParameters := null
        self.superclass := superclass
        if interfaces != null
            self.interfaces := ImmutableArray<ASTType>(interfaces)
        else
            self.interfaces := null
        self.fields      := ImmutableArray<ASTField>(fields)
        self.methods     := ImmutableArray<ASTMethod>(methods)
        self.invariants  := ImmutableArray<ASTInvariant>(invariants)
        self.isExternal  := isExternal
    }

    @override
    method write(out:IndentedOutputStream) {
        if isInterface
            out.write("interface ")
        else
            out.write("class ")
        out.write(name)
        if superclass != null | interfaces != null
            out.write(" : ")
        if superclass != null
            out.write(superclass)
        if interfaces != null {
            if !isInterface
                out.write(" (")
            out.write(interfaces.join(","))
            if !isInterface
                out.write(")")
        }
        out.writeLine(" {")
        out.level += 1
        for i in invariants
            i.write(out)
        for f in fields
            f.write(out)
        for m in methods
            m.write(out)
        out.level -= 1
        out.writeLine("}")
    }
}