package org.pandalanguage.pandac.ast

uses org.pandalanguage.pandac.tree.BinaryOperationType
uses org.pandalanguage.pandac.tree.Position

class ASTBinaryExpression : ASTExpression {
    def operation:BinaryOperationType
    def left:ASTExpression
    def right:ASTExpression

    init(operation:BinaryOperationType, left:ASTExpression, 
            right:ASTExpression) {
        super.init(left.position)
        self.operation := operation
        self.left := left
        self.right := right
    }

    @override
    function convert():String {
        return "(" + left + " " + operatorString(operation) + " " + right + ")"
    }

    @class
    function operatorString(operation:BinaryOperationType):String {
        switch operation {
            case BinaryOperationType.ADD: return "+"
            case BinaryOperationType.SUBTRACT: return "-"
            case BinaryOperationType.MULTIPLY: return "*"
            case BinaryOperationType.DIVIDE: return "/"
            case BinaryOperationType.INT_DIVIDE: return "//"
            case BinaryOperationType.REMAINDER: return "%"
            case BinaryOperationType.POWER: return "^"
            case BinaryOperationType.AND: return "&"
            case BinaryOperationType.OR: return "|"
            case BinaryOperationType.XOR: return "~"
            case BinaryOperationType.BITWISE_AND: return "&&"
            case BinaryOperationType.BITWISE_OR: return "||"
            case BinaryOperationType.BITWISE_XOR: return "~~"
            case BinaryOperationType.SHIFT_LEFT: return "<<"
            case BinaryOperationType.SHIFT_RIGHT: return ">>"
            case BinaryOperationType.EQUAL: return "="
            case BinaryOperationType.NOT_EQUAL: return "!="
            case BinaryOperationType.IDENTITY: return "=="
            case BinaryOperationType.NOT_IDENTITY: return "!=="
            case BinaryOperationType.GREATER_THAN: return ">"
            case BinaryOperationType.GREATER_THAN_OR_EQUAL: return ">="
            case BinaryOperationType.LESS_THAN: return "<"
            case BinaryOperationType.LESS_THAN_OR_EQUAL: return "<="
            default: unreachable
        }    
    }
}