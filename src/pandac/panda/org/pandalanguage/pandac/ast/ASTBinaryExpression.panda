package org.pandalanguage.pandac.ast

uses org.pandalanguage.pandac.tree.BinaryOperation
uses org.pandalanguage.pandac.tree.Position

class ASTBinaryExpression : ASTExpression {
    def kind:BinaryOperation.Kind
    def left:ASTExpression
    def right:ASTExpression

    init(kind:BinaryOperation.Kind, left:ASTExpression, 
            right:ASTExpression) {
        super.init(left.position)
        self.kind := kind
        self.left := left
        self.right := right
    }

    @override
    function convert():String {
        return "(" + left + " " + operatorString(kind) + " " + right + ")"
    }

    @class
    function operatorString(kind:BinaryOperation.Kind):String {
        switch kind {
            case BinaryOperation.Kind.ADD: return "+"
            case BinaryOperation.Kind.SUBTRACT: return "-"
            case BinaryOperation.Kind.MULTIPLY: return "*"
            case BinaryOperation.Kind.DIVIDE: return "/"
            case BinaryOperation.Kind.INT_DIVIDE: return "//"
            case BinaryOperation.Kind.REMAINDER: return "%"
            case BinaryOperation.Kind.POWER: return "^"
            case BinaryOperation.Kind.AND: return "&"
            case BinaryOperation.Kind.OR: return "|"
            case BinaryOperation.Kind.XOR: return "~"
            case BinaryOperation.Kind.BITWISE_AND: return "&&"
            case BinaryOperation.Kind.BITWISE_OR: return "||"
            case BinaryOperation.Kind.BITWISE_XOR: return "~~"
            case BinaryOperation.Kind.SHIFT_LEFT: return "<<"
            case BinaryOperation.Kind.SHIFT_RIGHT: return ">>"
            case BinaryOperation.Kind.EQUAL: return "="
            case BinaryOperation.Kind.NOT_EQUAL: return "!="
            case BinaryOperation.Kind.IDENTITY: return "=="
            case BinaryOperation.Kind.NOT_IDENTITY: return "!=="
            case BinaryOperation.Kind.GREATER_THAN: return ">"
            case BinaryOperation.Kind.GREATER_THAN_OR_EQUAL: return ">="
            case BinaryOperation.Kind.LESS_THAN: return "<"
            case BinaryOperation.Kind.LESS_THAN_OR_EQUAL: return "<="
            default: unreachable
        }    
    }
}