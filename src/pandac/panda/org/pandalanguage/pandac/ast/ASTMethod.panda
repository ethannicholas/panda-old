package org.pandalanguage.pandac.ast

uses org.pandalanguage.pandac.tree.MethodNodeType
uses org.pandalanguage.pandac.tree.Position

class ASTMethod : ASTNode {
    def doccomment:String?

    def annotations:ImmutableArray<ASTAnnotation>?

    def name:String

    def methodType:MethodNodeType

    def parameters:ImmutableArray<ASTParameter>

    def returnType:ASTType?

    def body:ASTBlock?

    def postconditions:ImmutableArray<ASTPostcondition>?

    constructor(position:Position, name:String, methodType:MethodNodeType, 
            doccomment:String?, annotations:ListView<ASTAnnotation>?, 
            parameters:ListView<ASTParameter>, returnType:ASTType?, 
            body:ASTBlock?, postconditions:ListView<ASTPostcondition>?) {
        super.constructor(position)
        self.name := name
        self.doccomment := doccomment
        if annotations != null
            self.annotations := new ImmutableArray<ASTAnnotation>(annotations)
        else
            self.annotations := null
        self.methodType  := methodType
        self.parameters  := new ImmutableArray<ASTParameter>(parameters)
        self.returnType  := returnType
        self.body        := body
        if postconditions != null {
            self.postconditions := new ImmutableArray<ASTPostcondition>(
                    postconditions)
        }
        else
            self.postconditions := null
    }

    @override
    method write(out:IndentedOutputStream) {
        if annotations != null {
            for a in annotations
                a.write(out)
        }
        switch methodType {
            case MethodNodeType.FUNCTION: out.write("function ")
            case MethodNodeType.METHOD: out.write("method ")
            case MethodNodeType.CONSTRUCTOR: { }
            default: unreachable
        }
        out.write(name)
        out.write("(")
        out.write(parameters.join(", "))
        out.write(")")
        if returnType != null
            out.write(":" + returnType)
        if body != null {
            out.write(" ")
            body.write(out)
        }
        if postconditions != null {
            for p in postconditions
                p.write(out)
        }
    }

    @override
    function format(fmt:String):String {
        def result := new MutableString()
        switch methodType {
            case MethodNodeType.FUNCTION: result.append("function ")
            case MethodNodeType.METHOD: result.append("method ")
            case MethodNodeType.CONSTRUCTOR: { }
            default: unreachable
        }
        result.append("\{name}(\{parameters.join(', ')})")
        if returnType != null
            result.append(":" + returnType)
        return result->>(String)
    }
}