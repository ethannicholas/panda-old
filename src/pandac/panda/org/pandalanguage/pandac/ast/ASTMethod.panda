package org.pandalanguage.pandac.ast

uses org.pandalanguage.pandac.stubs.MethodStub
uses org.pandalanguage.pandac.tree.Position

class ASTMethod : ASTNode {
    def doccomment:String?

    def annotations:ImmutableArray<ASTAnnotation>?

    def name:String

    def kind:MethodStub.Kind

    def parameters:ImmutableArray<ASTParameter>

    def returnType:ASTType?

    def body:ASTBlock?

    def postconditions:ImmutableArray<ASTPostcondition>?

    init(position:Position, name:String, kind:MethodStub.Kind, 
            doccomment:String?, annotations:ListView<ASTAnnotation>?, 
            parameters:ListView<ASTParameter>, returnType:ASTType?, 
            body:ASTBlock?, postconditions:ListView<ASTPostcondition>?) {
        super.init(position)
        self.name := name
        self.doccomment := doccomment
        if annotations != null
            self.annotations := ImmutableArray<ASTAnnotation>(annotations)
        else
            self.annotations := null
        self.kind        := kind
        self.parameters  := ImmutableArray<ASTParameter>(parameters)
        self.returnType  := returnType
        self.body        := body
        if postconditions != null {
            self.postconditions := ImmutableArray<ASTPostcondition>(
                    postconditions)
        }
        else
            self.postconditions := null
    }

    @override
    method write(out:IndentedOutputStream) {
        if annotations != null {
            for a in annotations
                a.write(out)
        }
        switch kind {
            case MethodStub.Kind.FUNCTION: out.write("function ")
            case MethodStub.Kind.METHOD: out.write("method ")
            case MethodStub.Kind.INIT: { }
            default: unreachable
        }
        out.write(name)
        out.write("(")
        out.write(parameters.join(", "))
        out.write(")")
        if returnType != null
            out.write(":" + returnType)
        if body != null {
            out.write(" ")
            body.write(out)
        }
        if postconditions != null {
            for p in postconditions
                p.write(out)
        }
    }

    @override
    function convert():String {
        def result := MutableString()
        switch kind {
            case MethodStub.Kind.FUNCTION: result.append("function ")
            case MethodStub.Kind.METHOD: result.append("method ")
            case MethodStub.Kind.INIT: { }
            default: unreachable
        }
        result.append("\{name}(\{parameters.join(', ')})")
        if returnType != null
            result.append(":" + returnType)
        return result.convert()
    }
}