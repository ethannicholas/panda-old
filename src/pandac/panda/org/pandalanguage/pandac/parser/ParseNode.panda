package org.pandalanguage.pandac.parser

uses org.pandalanguage.pandac.tree.Position

enum ParseNodeType {
    ROOT,
    TOKEN,
    COMPILATION_UNIT,
    BODY_ENTRY,
    PACKAGE_DECLARATION,
    USES_STATEMENT,
    CLASS_DECLARATION,
    INTERFACE_DECLARATION,
    INTERFACES,
    CLASS_MEMBERS,
    CLASS_MEMBER_DECLARATION,
    ENUM,
    METHOD_NAME,
    METHOD_DECLARATION,
    PARAMETER_PROTOTYPE,
    PARAMETER_PROTOTYPE_LIST,
    FIELD_DECLARATION,
    CONSTANT_DECLARATION,
    CONSTANT_FIELD_DECLARATION,
    TYPE_DECLARATION,
    VAR_DECLARATION,
    GENERIC_PARAMETERS,
    GENERIC_PARAMETERS_DECLARATION,
    ANNOTATIONS,
    MATH_ANNOTATION,
    INVARIANT,
    PRECONDITION,
    POSTCONDITION,
    TYPE,
    TYPES,
    CALL_EXPRESSION,
    TERM,
    LAMBDA,
    CONSTRUCT,
    CLASS_LITERAL,
    ARRAY_LITERAL,
    MAP_LITERAL,
    METHOD_VALUE,
    PARAMETERS,
    CAST_EXPRESSION,
    EXPONENT_EXPRESSION,
    UNARY_OPERATOR,
    UNARY_EXPRESSION,
    MULTIPLICATIVE_EXPRESSION,
    ADDITIVE_EXPRESSION,
    RANGE_EXPRESSION,
    COMPARISON_EXPRESSION,
    XOR_EXPRESSION,
    AND_EXPRESSION,
    OR_EXPRESSION,
    EXPRESSION,
    SIMPLE_STATEMENT,
    BLOCK,
    STATEMENT,
    STATEMENT_OR_BLOCK,
    ASSERT_STATEMENT,
    RETURN_STATEMENT,
    BREAK_STATEMENT,
    CONTINUE_STATEMENT,
    TERMINAL_STATEMENT,
    ANY_LOOP,
    FOR_TUPLE,
    IF,
    SWITCH_CASE,
    SWITCH_DEFAULT,
    SWITCH_STATEMENT,
    ASSIGNMENT_OPERATOR,
    CALL_OR_ASSIGNMENT,
    TRY_STATEMENT,
    CATCH_BLOCK,
    FINALLY_BLOCK,
    THROW_STATEMENT,
    TEMPLATE_DECLARATION,
    INSTANCE_DECLARATION
}

================================================================================
Describes a single node in the parse tree, either a terminal or nonterminal.
================================================================================
class ParseNode {
    var type:ParseNodeType
    var parent:ParseNode?
    var children := new PrimitiveArray<ParseNode>()
    
    constructor(type:ParseNodeType) {
        self.type := type
    }
    
    ============================================================================
    Returns the specified child of this node.
    
    @param index the child to return
    ============================================================================
    function [](index:Int):ParseNode {
        return children[index]
    }

    ============================================================================
    Sets the specified child of this node.
    
    @param index the index of the child to set
    @param value the new child
    ============================================================================
    method []:=(index:Int, value:ParseNode) {
        children[index] := value
    }
    
    function length():Int {
        return children.length
    }

    @self
    @pre(i <= length)
    method length:=(i:Int) {
        children.length := i
    }
    
    method add(p:ParseNode) {
        children.append(p)
    }
    
    function position():Position {
        if children.length > 0
            return children[0].position
        else
            return Position.INTERNAL
    }
    
    @override
    function format(fmt:String):String {
        if children.length = 1
            return children[0]->>(String)
        var result := new MutableString()
        for i in 0 ... children.length - 1 {
            if i > 0 {
                var endColumn := children[i - 1].position.column +
                        children[i - 1]->>(String).length
                if (children[i].position.line > children[i - 1].position.line |
                        children[i].position.column > endColumn)
                    result.append(" ")
            }
            result.append(children[i]->>(String))
        }
        return result->>(String)
    }
}