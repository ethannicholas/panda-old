package org.pandalanguage.pandac.parser

uses org.pandalanguage.pandac.tree.Position

enum ParseNodeType {
    TOKEN,
    COMPILATION_UNIT,
    BODY_ENTRY,
    PACKAGE_DECLARATION,
    USES_STATEMENT,
    CLASS_DECLARATION,
    INTERFACE_DECLARATION,
    INTERFACES,
    CLASS_MEMBERS,
    CLASS_MEMBER_DECLARATION,
    ENUM,
    METHOD_NAME,
    METHOD_DECLARATION,
    FORMAL_PARAMETER,
    FORMAL_PARAMETER_LIST,
    FIELD_DECLARATION,
    TYPE_DECLARATION,
    VAR_DECLARATION,
    GENERIC_PARAMETERS,
    GENERIC_PARAMETERS_DECLARATION,
    ANNOTATIONS,
    MATH_ANNOTATION,
    INVARIANT,
    PRECONDITION,
    POSTCONDITION,
    TYPE,
    TYPES,
    CALL_EXPRESSION,
    TERM,
    LAMBDA,
    CONSTRUCT,
    CLASS_LITERAL,
    ARRAY_LITERAL,
    MAP_LITERAL,
    METHOD_VALUE,
    PARAMETERS,
    CAST_EXPRESSION,
    EXPONENT_EXPRESSION,
    UNARY_OPERATOR,
    UNARY_EXPRESSION,
    MULTIPLICATIVE_EXPRESSION,
    ADDITIVE_EXPRESSION,
    RANGE_EXPRESSION,
    COMPARISON_EXPRESSION,
    XOR_EXPRESSION,
    AND_EXPRESSION,
    OR_EXPRESSION,
    EXPRESSION,
    SIMPLE_STATEMENT,
    BLOCK,
    STATEMENT,
    STATEMENT_OR_BLOCK,
    ASSERT_STATEMENT,
    RETURN_STATEMENT,
    BREAK_STATEMENT,
    CONTINUE_STATEMENT,
    TERMINAL_STATEMENT,
    ANY_LOOP,
    FOR_TUPLE,
    IF,
    SWITCH_CASE,
    SWITCH_DEFAULT,
    SWITCH_STATEMENT,
    ASSIGNMENT_OPERATOR,
    CALL_OR_ASSIGNMENT,
    TRY_STATEMENT,
    CATCH_BLOCK,
    FINALLY_BLOCK,
    THROW_STATEMENT,
    TEMPLATE_DECLARATION,
    INSTANCE_DECLARATION,
    AST
}

================================================================================
Describes a single node in the parse tree, either a terminal or nonterminal.
================================================================================
class ParseNode : Immutable {
    def type:ParseNodeType
    
    constructor(type:ParseNodeType) {
        self.type := type
    }
    
    function position():Position {
        return Position.INTERNAL
    }
    
    @override
    function format(fmt:String):String {
        return "<\{class.name}>"
    }
}