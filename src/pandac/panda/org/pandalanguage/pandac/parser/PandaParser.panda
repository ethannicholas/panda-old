package org.pandalanguage.pandac.parser

uses org.pandalanguage.pandac.ast.ASTAnnotation
uses org.pandalanguage.pandac.ast.ASTBlock
uses org.pandalanguage.pandac.ast.ASTExpression
uses org.pandalanguage.pandac.ast.ASTFile
uses org.pandalanguage.pandac.ast.ASTMethod
uses org.pandalanguage.pandac.ast.ASTStatement
uses org.pandalanguage.pandac.ast.ASTType
uses org.pandalanguage.pandac.compiler.ErrorReporter
uses org.pandalanguage.pandac.tree.Position

class PandaParser {
    def errors:ErrorReporter

    def fileText := new HashMap<File, String>()

    constructor(errors:ErrorReporter) {
        self.errors := errors
    }

    method parseFile(file:File, text:String):ASTFile? {
        assert self.fileText[file] = null
        self.fileText[file] := text
        def pegParser := new PandaPEGParser(file, text)
        def result := pegParser._file(0)
        if result != null
            return new ASTFile(file, result[1])
        errors.error("Error parsing \{file.name} at \{pegParser.getPosition(pegParser.maxPos)}: expected one of \{pegParser.maxLiterals}, but found '\{pegParser.text[pegParser.maxPos]}'", Position.INTERNAL)
        return null
    }

    method parseFile(file:File):ASTFile? {
        def text := file.readAsString()
        return parseFile(file, text)
    }

    @self
    method parseType(s:String, start:Position):ASTType {
        def pegParser := new PandaPEGParser(start.file, s)
        def result := pegParser._type(0)
        if result != null
            return result[1]
        errors.error("Error parsing type at \{start}: expected one of \{pegParser.maxLiterals}, but found '\{pegParser.text[pegParser.maxPos]}'", Position.INTERNAL)
        return null
    }

    @self
    method parseStatement(s:String, start:Position):ASTStatement? {
        def pegParser := new PandaPEGParser(start.file, s)
        def result := pegParser._statement(0)
        if result != null
            return result[1]
        errors.error("Error parsing statement at \{start}: expected one of \{pegParser.maxLiterals}, but found '\{pegParser.text[pegParser.maxPos]}'", Position.INTERNAL)
        return null
    }

    @self
    method parseMethodValue(s:String, start:Position):ASTExpression? {
        def pegParser := new PandaPEGParser(start.file, s)
        def result := pegParser._methodValue(0)
        if result != null
            return result[1]
        errors.error("Error parsing method value at \{start}: expected one of \{pegParser.maxLiterals}, but found '\{pegParser.text[pegParser.maxPos]}'", Position.INTERNAL)
        return null
    }

    @self
    method parseBlock(s:String, start:Position):ASTBlock? {
        def pegParser := new PandaPEGParser(start.file, s)
        def result := pegParser._block(0)
        if result != null
            return result[1]
        errors.error("Error parsing block at \{start}: expected one of \{pegParser.maxLiterals}, but found '\{pegParser.text[pegParser.maxPos]}'", Position.INTERNAL)
        return null
    }

    @self
    method parseMethodDeclaration(s:String, doccomment:String?, 
            annotations:ListView<ASTAnnotation>?, start:Position):ASTMethod? {
        def pegParser := new PandaPEGParser(start.file, s)
        def result := pegParser._methodOrFunction(0)
        if result != null
            return result[1]
        errors.error("Error parsing method at \{start}: expected one of \{pegParser.maxLiterals}, but found '\{pegParser.text[pegParser.maxPos]}'", Position.INTERNAL)
        return null
    }

    @self
    method parseExpressionWithExtraText(s:String, start:Position):(ASTExpression?, 
            String) {
        def pegParser := new PandaPEGParser(start.file, s)
        def result := pegParser._expression(0)
        if result != null
            return (result[1], "")
        errors.error("Error parsing expression at \{start}: expected one of \{pegParser.maxLiterals}, but found '\{pegParser.text[pegParser.maxPos]}'", Position.INTERNAL)
        return null
    }

    @self
    method parseExpression(s:String, start:Position):ASTExpression? {
        def pegParser := new PandaPEGParser(start.file, s)
        def result := pegParser._expression(0)
        if result != null
            return result[1]
        errors.error("Error parsing type at \{start}: expected one of \{pegParser.maxLiterals}, but found '\{pegParser.text[pegParser.maxPos]}'", Position.INTERNAL)
        return null
    }
}