package org.pandalanguage.pandac.parser

uses org.pandalanguage.pandac.ast.ASTAnnotation
uses org.pandalanguage.pandac.ast.ASTBlock
uses org.pandalanguage.pandac.ast.ASTExpression
uses org.pandalanguage.pandac.ast.ASTFile
uses org.pandalanguage.pandac.ast.ASTFormatExpression
uses org.pandalanguage.pandac.ast.ASTMethod
uses org.pandalanguage.pandac.ast.ASTNode
uses org.pandalanguage.pandac.ast.ASTStatement
uses org.pandalanguage.pandac.ast.ASTType
uses org.pandalanguage.pandac.compiler.ErrorReporter
uses org.pandalanguage.pandac.tree.Position

class PandaParser : Immutable {
    def errors:ErrorReporter

    def lrParser := PandaLRParser()

    init(errors:ErrorReporter) {
        self.errors := errors
    }

    method reportErrors(errorList:ListView<ParseError>, offset:Position, 
            text:String) {
        for e in errorList {
            if offset.file = Position.INTERNAL.file {
                errors.error("\{e.error} while parsing '\{text}'", 
                        Position(offset.file, e.offset + offset.offset))
            }
            else {
                errors.error(e.error, Position(offset.file, 
                        e.offset + offset.offset))
            }
        }
    }

    method parseFile(file:File, text:String):ASTFile? {
        def result := lrParser.file(file, text)
        reportErrors(result[1], Position(file, 0), text)
        if result[0] != null
            return ASTFile(file, result[0])
        return null
    }

    method parseFile(file:File):ASTFile? {
        def text := file.readAsString()
        return parseFile(file, text)
    }

    method parseType(s:String, start:Position):ASTType? {
        def result, errors := lrParser.type(start.file, s)
        reportErrors(errors, start, s)
        return result
    }

    @self
    method parseStatement(s:String, start:Position):ASTStatement? {
        def result, errors := lrParser.statement(start.file, s)
        reportErrors(errors, start, s)
        return result
    }

    @self
    method parseMethodValue(s:String, start:Position):ASTExpression? {
        def result, errors := lrParser.methodValue(start.file, s)
        reportErrors(errors, start, s)
        return result
    }

    @self
    method parseBlock(s:String, start:Position):ASTBlock? {
        def result, errors := lrParser.block(start.file, s)
        reportErrors(errors, start, s)
        return result
    }

    @self
    method parseMethodDeclaration(s:String, doccomment:String?, 
            annotations:ListView<ASTAnnotation>?, start:Position):ASTMethod? {
        def result, errors := lrParser.anyMethod(start.file, s)
        reportErrors(errors, start, s)
        return result
    }

    @self
    method parseFormatExpression(s:String, start:Position):ASTFormatExpression {
        def result, errors := lrParser.formatExpression(start.file, s)
        reportErrors(errors, start, s)
        return result
    }

    @self
    method parseExpression(s:String, start:Position):ASTExpression? {
        def result, errors := lrParser.expression(start.file, s)
        reportErrors(errors, start, s)
        return result
    }
}