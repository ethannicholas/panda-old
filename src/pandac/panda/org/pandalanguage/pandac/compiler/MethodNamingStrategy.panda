package org.pandalanguage.pandac.compiler

uses org.pandalanguage.pandac.stubs.ClassStub
uses org.pandalanguage.pandac.stubs.MethodStub

================================================================================
Generates names for methods, which are used by `MethodNamer` to generate
unambiguous names for each method in a class. Different `MethodNamingStrategy`
implementations support different target languages, which have different rules
for how methods need to be named.
================================================================================
interface MethodNamingStrategy {
    ============================================================================
    Returns the preferred, short name for a method which will be used if the
    name does not conflict with any other methods in the class (methods across
    different classes are assumed to not conflict; between the 
    `MethodNamingStrategy`'s rules and target language resolution rules this 
    should be impossible).

    @param m the method to name
    @returns a short name for the method
    ============================================================================
    method shortName(cl:ClassStub, m:MethodStub):String

    ============================================================================
    Returns a qualified name less likely to have conflicts than the short name.
    This is a fallback method which is used when the short names of two 
    different methods conflict (assuming those two methods also have the same
    disambiguation string).

    The default implementation returns `longName(m)`.
    ============================================================================
    -- FIXME uncomment this
    method mediumName(cl:ClassStub, m:MethodStub):String-* {
        return longName(m)
    }*-

    ============================================================================
    Returns a fully-qualified, completely unambiguous name for a method. This is
    a fallback method used when the medium names of two different methods 
    conflict (assuming those two methods also have the same disambiguation 
    string). The long name of any two methods must always be unambiguous within
    the rules of the target language.
    ============================================================================
    method longName(cl:ClassStub, m:MethodStub):String

    ============================================================================
    Returns an opaque string representing information that the target language
    will use to disambiguate different methods with the same name. The 
    disambiguation string for two different methods should be the same if and
    only if the target language would consider the two methods the same, given
    that they were assigned the same name.

    For instance Java uses parameter types to disambiguate similarly-named 
    methods, so a Java implementation of `MethodNamingStrategy` would return a 
    representation of the method's parameter types as far as Java is concerned,
    whereas C does not in any way disambiguate (or even permit) two methods with
    the same name, so a C implementation would return the same string for all 
    methods.

    The default implementation returns the empty string.

    @param m the method name to retrieve disambiguation information for
    @returns an opaque string representing information used to disambiguate 
            methods
    ============================================================================
    -- FIXME uncomment this
    method disambiguation(m:MethodStub):String-* {
        return ""
    }*-
}