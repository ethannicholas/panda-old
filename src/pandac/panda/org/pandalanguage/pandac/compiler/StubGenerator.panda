package org.pandalanguage.pandac.compiler

uses org.pandalanguage.pandac.ast.ASTAnnotation
uses org.pandalanguage.pandac.ast.ASTClass
uses org.pandalanguage.pandac.ast.ASTField
uses org.pandalanguage.pandac.ast.ASTFile
uses org.pandalanguage.pandac.ast.ASTMethod
uses org.pandalanguage.pandac.ast.ASTPackageDeclaration
uses org.pandalanguage.pandac.ast.ASTParameter
uses org.pandalanguage.pandac.ast.ASTSimpleAnnotation
uses org.pandalanguage.pandac.ast.ASTType
uses org.pandalanguage.pandac.ast.ASTUsesDeclaration
uses org.pandalanguage.pandac.stubs.ClassStub
uses org.pandalanguage.pandac.stubs.FormalParameter
uses org.pandalanguage.pandac.stubs.MethodStub
uses org.pandalanguage.pandac.tree.Annotations
uses org.pandalanguage.pandac.tree.AnnotationType
uses org.pandalanguage.pandac.tree.FieldNode
uses org.pandalanguage.pandac.tree.Parameter
uses org.pandalanguage.pandac.tree.Position
uses org.pandalanguage.pandac.types.ClassType
uses org.pandalanguage.pandac.types.PrimitiveArrayType
uses org.pandalanguage.pandac.types.PrimitiveType
uses org.pandalanguage.pandac.types.Type
uses org.pandalanguage.pandac.types.UnresolvedType
uses org.pandalanguage.pandac.types.VoidType

class StubGenerator {
    def files:CollectionView<ASTFile>

    def typeResolver:TypeResolver

    def errors:ErrorReporter

    constructor(files:CollectionView<ASTFile>, typeResolver:TypeResolver,
            errors:ErrorReporter) {
        self.files := new Array<ASTFile>(files)
        self.typeResolver := typeResolver
        self.errors := errors
    }

    method convertAnnotations(position:Position, 
            annotations:ListView<ASTAnnotation>?):Annotations {
        def result := new Array<AnnotationType>()
        if annotations != null {
            for ann in annotations {
                if ann-?>(ASTSimpleAnnotation) {
                    switch ann->(ASTSimpleAnnotation).name {
                        case "@protected":  result.add(AnnotationType.PROTECTED)
                        case "@private":  result.add(AnnotationType.PRIVATE)
                        case "@abstract":  result.add(AnnotationType.ABSTRACT)
                        case "@class":  result.add(AnnotationType.CLASS)
                        case "@thread":  result.add(AnnotationType.THREAD)
                        case "@external":  result.add(AnnotationType.EXTERNAL)
                        case "@final":  result.add(AnnotationType.FINAL)
                        case "@override":  result.add(AnnotationType.OVERRIDE)
                        case "@readonly":  result.add(AnnotationType.READONLY)
                        case "@limited":  result.add(AnnotationType.LIMITED)
                        case "@self":  result.add(AnnotationType.SELF)
                        case "@safeReturn":  result.add(AnnotationType.SAFERETURN)
                        case "@unsafeFunction":  result.add(AnnotationType.UNSAFEFUNCTION)
                        case "@$wrapperMethod":  result.add(AnnotationType.WRAPPER_METHOD)
                        default: errors.warning("unsupported annotation: \{ann}", 
                                ann.position)
                    }
                }
                else {
                    errors.warning("unsupported annotation: \{ann}", 
                            ann.position)
                }
            }
        }
        return new Annotations(position, result)
    }

    method resolveType(type:ASTType, lookupContext:LookupContext):Type? {
        def result := typeResolver.resolve(type, lookupContext)
        if result = null
            errors.warning("type '\{type}' not found", type.position)
        return result
    }

    method convertMethod(m:ASTMethod, owner:ClassType,
            lookupContext:LookupContext):MethodStub? {
        def parameters := new Array<FormalParameter>()
        def annotations := convertAnnotations(m.position, m.annotations)
        if !annotations.isClass {
            def type:Type
            if annotations.isWrapperMethod
                type := owner->>(PrimitiveType)
            else
                type := owner
            parameters.add(new FormalParameter(m.position, Parameter.SELF_NAME, 
                    type, false, false, false))
        }
        for p in m.parameters {
            var type := resolveType(p.type, lookupContext)
            if type != null {
                if p.isVarArg {
                    type := new PrimitiveArrayType(ClassType.PRIMITIVE_ARRAY,
                            type)
                }
                parameters.add(new FormalParameter(p.position, p.name, type, 
                        p.isVar, p.isConvert, p.isVarArg))
            }
            else
                return null
        }
        var returnType:Type?
        if m.returnType != null {
            returnType := resolveType(m.returnType->(ASTType), lookupContext)
            if returnType = null
                return null
        }
        else
            returnType := VoidType.VOID

        return new MethodStub(m.position, m.name, 
                annotations, m.methodType, parameters, returnType, m.body, 
                owner)
    }

    method convertFields(f:ASTField, owner:ClassType, 
            lookupContext:LookupContext):ListView<FieldNode> {
        def result := new Array<FieldNode>()
        def annotations := convertAnnotations(f.position, f.annotations)
        for i, v in f.decl.vars {
            var type:Type? := null
            if v.type != null
                type := resolveType(v.type->(ASTType), lookupContext)
            if type = null
                type := new UnresolvedType(v.identifier, v.position)
            result.add(new FieldNode(f.position, owner, v.identifier, 
                    annotations, f.decl.varType, type, f.decl.initializer, i))
        }
        return result
    }

    method convertClass(cl:ASTClass, currentPackage:String?,
            lookupContext:LookupContext):ClassStub {
        def className:String
        if currentPackage != null
            className := currentPackage + "." + cl.name
        else
            className := cl.name
        def classType := typeResolver.resolve(className, 
                lookupContext)->(ClassType)
        Console.writeLine("converted \{className} into \{classType}")
        def interfaces := new Array<ClassType>()
        var superclass:Type?
        if cl.superclass != null {
            superclass := resolveType(cl.superclass->(ASTType), lookupContext)
            if superclass != null & superclass-!>(ClassType) {
                errors.error("cannot subclass \{superclass.displayName}", 
                        cl.position)
                superclass := null
            }
        }
        else
            superclass := null
        if cl.interfaces != null {
            for t in cl.interfaces->(ListView<ASTType>) {
                def type := resolveType(t, lookupContext)
                if type-?>(ClassType)
                    interfaces.add(type->(ClassType))
                else if type != null {
                    errors.error("\{type.displayName} is not an interface",
                            cl.position)
                }
            }
        }
        def methods := new Array<MethodStub>()
        for m in cl.methods {
            def converted := convertMethod(m, classType, lookupContext)
            if converted != null
                methods.add(converted)
        }
        def fields := new Array<FieldNode>()
        for f in cl.fields
            fields.addAll(convertFields(f, classType, lookupContext))
        return new ClassStub(cl.position, className, cl.isInterface, 
                convertAnnotations(cl.position, cl.annotations), lookupContext, 
                superclass->(ClassType?), interfaces, methods, fields, 
                cl.invariants, cl.genericParameters, cl.isExternal)
    }

    method generateStubs(f:ASTFile):CollectionView<ClassStub> {
        def result := new Array<ClassStub>()
        var currentPackage:String? := null
        def classAliases := new HashMap<String, String>()
        def packageUses := new Array<String>() 
        packageUses.add("panda.collections")
        packageUses.add("panda.core")
        packageUses.add("panda.io")
        packageUses.add("panda.math")
        packageUses.add("panda.threads")
        for e in f.entries {
            if e-?>(ASTPackageDeclaration) {
                currentPackage := e->(ASTPackageDeclaration).name
            }
            else if e-?>(ASTUsesDeclaration) {
                def u := e->(ASTUsesDeclaration)
                if u.name.endsWith(".*") {
                    if u.alias != null {
                        errors.error("package imports may not have an alias",
                                u.position)
                    }
                    packageUses.add(u.name[..u.name.length - ".*".length])
                }
                else {
                    if u.alias != null 
                        classAliases[u.name] := u.alias->(String)
                    else
                        classAliases[u.name] := u.name
                }
            }
            else if e-?>(ASTClass) {
                def cl := e->(ASTClass)
                if cl.genericParameters = null {
                    result.add(convertClass(cl, currentPackage, 
                            new LookupContext(packageUses, classAliases)))
                }
            }
        }
        return result
    }

    method generateStubs():ImmutableHashMap<String, ClassStub> {
        def result := new HashMap<String, ClassStub>()
        for f in files {
            def classes := generateStubs(f)
            for cl in classes
                result[cl.name] := cl
        }
        return new ImmutableHashMap<String, ClassStub>(result)
    }
}