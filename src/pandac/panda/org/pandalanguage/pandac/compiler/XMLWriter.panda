package org.pandalanguage.pandac.compiler

class XMLWriter {
    @readonly
    var out:OutputStream
    
    @private
    var indent:Int
    
    @private
    var lastWasText:Bit
    
    @private
    var openTags := new Array<String>()
    
    var tagComplete := true
    
    constructor(out:OutputStream) {
        self.out := out
    }

    @protected
    function escape(s:String):String {
        return s.replace("&", "&amp;").replace("<", "&lt;")
                .replace(">", "&gt;").replace("\"", "&quot;")
    }
    
    method open(tag:String) {
        if !tagComplete
            out.writeLine(">")
        openTags.append(tag)
        out.write(indent * " " + "<" + tag)
        indent += 2
        tagComplete := false
    }
    @post(openTags.length = @pre(openTags.length) + 1)
    
    @pre(openTags[openTags.length - 1] = tag)
    method close(tag:String) {
        assert openTags[openTags.length - 1] = tag
        indent -= 2
        openTags.length -= 1
        if !tagComplete {
            out.writeLine("/>")
            tagComplete := true
        }
        else {
            if !lastWasText
                out.write(indent * " ")
            out.writeLine("</" + tag + ">")
        }
        lastWasText := false
    }
    @post(openTags.length = @pre(openTags.length) - 1)
    
    function currentTag():String {
        return openTags[openTags.length - 1]
    }
    
    @pre(!tagComplete)
    method attribute(key:String, value:String) {
        out.write(" " + escape(key) + '="' + escape(value) + '"')
    }
    
    @pre(openTags.length > 0)
    method text(var s->>String) {
        s := escape(s)

        if !tagComplete {
            out.write(">")
            tagComplete := true
        }
        out.write(s.trim())
        lastWasText := true
    }

    method textTag(tag:String, t->>String) {
        open(tag)
        text(t)
        close(tag)
    }
    
    method emptyTag(tag:String) {
        open(tag)
        close(tag)
    }
    
    @pre(openTags.length = 0)
    method close() {
        assert tagComplete
        out.close()
    }
}