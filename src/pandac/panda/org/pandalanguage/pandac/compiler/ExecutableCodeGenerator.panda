package org.pandalanguage.pandac.compiler

class ExecutableCodeGenerator : CodeGenerator {
    var libpanda:String?
    
    @override
    method generateCode(target:File) {
        -- compile ll file to asm using llc
        var parent := target.parent()
        if parent = null {
            throw new CompilerException("could not determine parent " +
                    "directory of '\{target}'")
        }
        var ll := parent.resolve(target.simpleName + ".ll")
        new LLVMCodeGenerator().generateCode(ll)
        parent := ll.parent()
        if parent = null {
            throw new CompilerException("could not determine parent " +
                    "directory of '\{ll}'")
        }
        var asm := parent.resolve(ll.simpleName + ".s")
        var llcArgs := new Array<String>()
        for i in 0 ... StaticSettings.LLC_EXE_ARGS.length - 1
            llcArgs.append(StaticSettings.LLC_EXE_ARGS[i])
        llcArgs.append("-o")
        llcArgs.append(asm.path)
        llcArgs.append(ll.path)
        System.exec(PandaCompiler.getLLVMHome().resolve("llc"), llcArgs...)
        if !asm.exists()
            throw new CompilerException("llc failure")
        if !CompilerSettings.preserveTempArtifacts
            ll.delete()

        -- compile asm file
        var cppArgs := new Array<String>("-o", target.path, asm.path)
        var searchPaths := CompilerSettings.librarySearchPaths
        for searchPath in searchPaths
            cppArgs.append("-L" + searchPath.path)
        var libraries := CompilerSettings.libraries
        for i in 0 ... libraries.length - 1 {
            if libraries[i].endsWith(".o")
                cppArgs.append(libraries[i])
            else
                cppArgs.append("-l" + libraries[i])
        }
        for i in 0 ... StaticSettings.GCC_EXE_ARGS.length - 1
            cppArgs.append(StaticSettings.GCC_EXE_ARGS[i])
        var objects := CompilerSettings.objectFiles
        for i in 0 ... objects.length - 1
            cppArgs.append(objects[i].path)
        var modules := CompilerSettings.modules
        for i in 0 ... modules.length - 1 {
            for j in 0 ... modules[i].gccExeArgs.length - 1 {
                cppArgs.append(modules[i].gccExeArgs[j].replace(
                        "$PANDA_HOME", PandaCompiler.PANDA_HOME.path))
            }
        }

        -- almost everything is C, but we do have a bit of C++ stuff, so we use
        -- a C++ compiler to get default linkage with the C++ libraries
        System.exec(PandaCompiler.getCPPCompiler(), cppArgs...)
        if !CompilerSettings.preserveTempArtifacts
            asm.delete()
    }
}
