package org.pandalanguage.pandac.compiler

uses org.pandalanguage.pandac.tree.ClassNode
uses org.pandalanguage.pandac.tree.MethodNode
uses org.pandalanguage.pandac.types.Type

class CMethodNamingStrategy (MethodNamingStrategy) {
    constant MAPPED_NAMES := new ImmutableGenericHashMap<String, String>(
            new GenericHashMap<String, String>(["+", "-", "*", "/", "//", "^", "[]", 
            "[]:=", "[..]", "[..]:=", "[...]", "[...]:=", "=", ">", "<", ">=", 
            "<=", "|", "||", "&", "&&", "~", "~~", "!", "!!", "<<", ">>"],
            ["$ADD", "$SUB", "$MUL", "$DIV", "$INTDIV", "$POW", "$ARR", "$ARREQ", 
            "$SLE", "$SLEEQ", "$SLI", "$SLIEQ", "$EQ", "$GT", "$LT", "$GE", 
            "$LE", "$OR", "$BOR", "$AND", "$BAND", "$XOR", "$BXOR", "$NOT",
            "$BNOT", "$SHL", "$SHR"]))

    constant PANDAMAIN_NAME := "pandaMain"
    
    @private
    constant PANDASTART_NAME := "pandaStart"

    @private
    method determineShortName(rawName:String, owner:ClassNode, 
            returnType:Type):String {
        if rawName.startsWith(ASTGenerator.SHIM_PREFIX) {
            return ASTGenerator.SHIM_PREFIX + determineShortName(
                    rawName[ASTGenerator.SHIM_PREFIX.length..], owner, 
                        returnType)
        }
        if rawName = MethodNode.MAIN_NAME
            return PANDAMAIN_NAME
        else if rawName = MethodNode.START_NAME & 
                owner->(ClassNode).name = ClassNode.PANDA_NAME
            return PANDASTART_NAME
        var result := new MutableString()
        result.append(LLVMCodeGenerator.getName(owner.type()))
        result.append("$")
        var mapped := MAPPED_NAMES[rawName]->(String?)
        if mapped != null
            result.append(mapped)
        else if rawName = "->>" {
            result.append("$CNV")
            result.append(MethodNamer.escapeTypeName(returnType.name))
        }
        else if rawName.endsWith(":=") {
            result.append(rawName[0 .. rawName.length() - 2])
            result.append("$SET")
        }
        else
            result.append(rawName)
        return result->>(String)
    }

    @override
    method shortName(m:MethodNode):String {
        return determineShortName(m.name, m.owner, m.returnType)
    }

    @override
    method mediumName(m:MethodNode):String {
        var result := shortName(m)->>(MutableString)
        for i, p in m.parameters {
            if i = 0 & !m.annotations.isClass
                continue
            var name:String
            var t := p.type
            result.append("_")
            if t.isPrimitive {
                var index := t.name.lastIndexOf(".")
                if index != null
                    result.append(t.name[index + 1..])
                else
                    result.append(t.name)
            }
            else {
                result.append(MethodNamer.escapeTypeName(
                        t.classNode.simpleName))
            }
        }
        return result->>(String)
    }

    @override
    method longName(m:MethodNode):String {
        var result := shortName(m)->>(MutableString)
        if m.annotations.isClass
            result.append("_class")
        for i, p in m.parameters {
            if i = 0 & !m.annotations.isClass
                continue
            var name:String
            var t := p.type
            result.append("_")
            if t.isPrimitive {
                var index := t.name.lastIndexOf(".")
                if index != null
                    result.append(t.name[index + 1..])
                else
                    result.append(t.name)
            }
            else {
                result.append(MethodNamer.escapeTypeName(t.name))
            }
        }
        return result->>(String)
    }

    @override
    function disambiguation(m:MethodNode):String {
        return ""
    }
}