package org.pandalanguage.pandac.compiler

uses panda.core.System.OperatingSystem
uses org.pandalanguage.pandac.ast.ASTFile
uses org.pandalanguage.pandac.ast.ASTInstanceDeclaration
uses org.pandalanguage.pandac.ast.ASTNode
uses org.pandalanguage.pandac.ast.ASTUnparsedClass
uses org.pandalanguage.pandac.parser.PandaParser
uses org.pandalanguage.pandac.stubs.ClassStub
uses org.pandalanguage.pandac.tree.ClassNode
uses org.pandalanguage.pandac.tree.Position
uses org.pandalanguage.pandac.types.ClassType
uses org.pandalanguage.pandac.types.GenericParameterType
uses org.pandalanguage.pandac.types.GenericType
uses org.pandalanguage.pandac.types.PrimitiveType
uses org.pandalanguage.pandac.types.Type
uses org.pandalanguage.pandac.types.UnresolvedType

class CompilerErrorReporter : ErrorReporter {
    constant ERROR_MESSAGE := "error"
    constant WARNING_MESSAGE := "warning"
    def compiler:PandaCompiler

    def textCache := HashMap<File, String>()

    init(compiler:PandaCompiler) {
        self.compiler := compiler
    }

    method getText(file:File):String? {
        var result := textCache[file]
        if result = null {
            try {
                result := file.readAsString()
                textCache[file] := result
            }
            catch e:IOException {
            }
        }
        return result
    }

    @override
    method error(message:String, position:Position) {
        Console.writeLine("error: \{position}: " + 
                message)
        compiler.errorQueue.post(ERROR_MESSAGE)
    }

    @override
    method warning(message:String, position:Position) {
        Console.writeLine("warning: \{position}: " +
                message)
        compiler.errorQueue.post(WARNING_MESSAGE)
    }
}

================================================================================
Main entry point for the Panda compiler.
================================================================================
class PandaCompiler {
    constant PANDA_HOME := determinePandaHome()

    var lastCheckpointLabel:String?
    var lastCheckpointTime:Int64
    def errorQueue := MessageQueue<Immutable?>()
    def errors := CompilerErrorReporter(self)
    def parser := PandaParser(errors)
    var errorCount := 0
    var warningCount := 0
    var checkpoints := false

    @class
    function determinePandaHome():File {
        var home := System.environment["PANDA_HOME"]
        if home != null {
            return File(home)
        }
        else {
            throw CompilerException("PANDA_HOME is not set")
        }
    }

    @class
    method getLLVMHome():File {
        def os := System.operatingEnvironment().operatingSystem
        switch os {
            case OperatingSystem.MACOSX:
                def libexec := File("/opt/local/libexec")
                if !libexec.exists() {
                    throw CompilerException("path '" + libexec + 
                            "' does not exist. Use MacPorts to install " +
                            "Panda dependencies.")
                }
                def llvms := libexec.list("llvm-*.*")
                var maxMajor := 0
                var maxMinor := 0
                for llvm in llvms {
                    try {
                        def versions := llvm.name.parse(/llvm-(\d+)\.(\d+)/)
                        assert versions != null
                        def major := versions[0].convert()->Int
                        def minor := versions[1].convert()->Int
                        if major = 3 & minor = 6 {
                            maxMajor := major
                            maxMinor := minor
                        }
                    }
                    catch e:ParseException {
                    }
                }
                if maxMajor = 0 {
                    throw CompilerException("no LLVM 3.6 installation found " +
                            "under \{libexec}. Use MacPorts to install Panda " +
                            "dependencies.")
                }
                return verifyExists(File("/opt/local/libexec/llvm-" +
                        "\{maxMajor}.\{maxMinor}/bin"))
            case OperatingSystem.LINUX, OperatingSystem.OTHER_UNIX:
                return verifyExists(File("/usr/bin"))
            default:
                throw CompilerException("Unsupported operating " +
                        "system type: \{os}")
        }
    }

    @class
    method verifyExists(file:File):File {
        if !file.exists() {
            throw CompilerException("required file '\{file}' was not " +
                    "found. Please ensure that Panda's dependencies are " +
                    "installed.")
        }
        return file
    }

    @class
    method getCCompiler():File {
        def os := System.operatingEnvironment().operatingSystem
        switch os {
            case OperatingSystem.MACOSX:
                return verifyExists(getLLVMHome().resolve("clang"))
            case OperatingSystem.LINUX, OperatingSystem.OTHER_UNIX:
                return verifyExists(File("/usr/bin/gcc"))
            default:
                throw CompilerException("Unsupported operating " +
                        "system type: \{os}")
        }
    }

    @class
    method getCPPCompiler():File {
        def os := System.operatingEnvironment().operatingSystem
        switch os {
            case OperatingSystem.MACOSX:
                return verifyExists(getLLVMHome().resolve("clang++"))
            case OperatingSystem.LINUX, OperatingSystem.OTHER_UNIX:
                return verifyExists(File("/usr/bin/g++"))
            default:
                throw InternalCompilerException("Unsupported operating " +
                        "system type: \{os}")
        }
    }

    method checkpoint(label:String) {
        def now := Panda.currentTime()
        def lastCheckpointLabel := lastCheckpointLabel
        if checkpoints & lastCheckpointLabel != null {
            Console.writeLine(lastCheckpointLabel + " - " + 
                    (now - lastCheckpointTime) + "ms")
        }
        self.lastCheckpointLabel := label
        lastCheckpointTime := now
    }

    @protected
    @class
    method parsePLink(f:File, parser:PandaParser):ASTFile {
        def position := Position(f, 1, 1)
        method reportError() {
            throw CompilerException("error reading PLink file",
                    position)
        }
        def entries := Array<ASTNode>()
        def input := BufferedInputStream(f.openInputStream())
        var first := true
        def version := input.readInt16()
        loop {
            def nameLength := input.readInt16()
            first := false
            if nameLength = null  {
                break
            }
            def name := Array<UInt8>(nameLength)
            while name.count < nameLength {
                if input.read(name, nameLength - name.count) = null {
                    reportError()
                }
            }
            assert name.count = nameLength
            def containingClass:String?
            def containingClassLength := input.readInt16()
            if containingClassLength != 0 {
                def cc := Array<UInt8>(containingClassLength)
                while cc.count < containingClassLength {
                    if input.read(cc, containingClassLength - cc.count) = null {
                        reportError()
                    }
                }
                containingClass := String(cc)
            }
            else {
                containingClass := null
            }
            def codeLength := input.readInt32()
            if codeLength = null {
                reportError()
            }
            if codeLength > 0 {
                def code := Array<UInt8>(codeLength)
                while code.count < codeLength {
                    if input.read(code, codeLength - code.count) = null {
                        reportError()
                    }
                }
                assert code.count = codeLength
                entries.add(ASTUnparsedClass(position, String(name), 
                        String(code), containingClass))
            }
            else {
                assert containingClass = null
                entries.add(ASTInstanceDeclaration(position,
                        parser.parseType(String(name), position)))
            }
        }
        input.close()
        return ASTFile(f, entries)
    }

    @protected
    method getASTFiles(settings:CompilerSettings):CollectionView<ASTFile> {
        def result := Array<ASTFile>()
        def threads := Thread.preferredThreadCount().min(
                settings.sources.count)
        threads := 1
        if threads > 1 {
            def workQueue := MessageQueue<File?>()
            def responseQueue := MessageQueue<ImmutableArray<ASTFile>>()
            for f in settings.sources {
                workQueue.post(f)
            }
            def errorReporter := self.errors
            def parser := self.parser
            for i in 0 .. threads {
                workQueue.post(null)
                Thread.start(method() {
                    def result := Array<ASTFile>()
                    loop {
                        def f := workQueue.getMessage()
                        if f = null {
                            break
                        }
                        def parsed:ASTFile?
                        if f.name.endsWith(".plink") {
                            parsed := parsePLink(f, parser)
                        }
                        else {
                            parsed := parser.parseFile(f)
                        }
                        if parsed != null {
                            result.add(parsed)
                        }
                    }
                    responseQueue.post(ImmutableArray<ASTFile>(result))
                })
            }
            for i in 0 .. threads {
                def subresult := responseQueue.getMessage()
                result.addAll(subresult)
            }
        }
        else {
            for f in settings.sources {
                def input := BufferedInputStream(f.openInputStream())
                def parsed:ASTFile?
                if f.name.endsWith(".plink") {
                    parsed := parsePLink(f, parser)
                }
                else {
                    parsed := parser.parseFile(f)
                }
                if parsed != null {
                    result.add(parsed)
                }
                input.close()
            }
        }
        return result
    }

    @private
    method processMessages() {
        while errorQueue.hasMessage() {
            def message := errorQueue.getMessage()
            switch message {
                case CompilerErrorReporter.ERROR_MESSAGE: errorCount += 1
                case CompilerErrorReporter.WARNING_MESSAGE: warningCount += 1
                default: unreachable
            }
        }
    }

    @protected
    method compile(settings:CompilerSettings) {
        checkpoint("parse")
        def files := getASTFiles(settings)
        processMessages()
        if errorCount = 0 {
            processMessages()
            if errorCount = 0 {
                checkpoint("extract types")
                def stubGenerator := StubGenerator(files, errors)
                def root := stubGenerator.getRootPackage()
                processMessages()
                if errorCount = 0 {
                    checkpoint("semantic analysis")
                    def program := IRGenerator(root,  
                            HashMap<String, ClassStub>(), stubGenerator,
                            settings, errors).generateProgram()
                    processMessages()
                    if errorCount = 0 {
                        def cg:CodeGenerator
                        checkpoint("codegen")
                        switch settings.outputFormat {
                            case CompilerSettings.OutputFormat.EXECUTABLE:
                                cg := ExecutableCodeGenerator(program, 
                                        settings)
                            case CompilerSettings.OutputFormat.LLVM:
                                cg := LLVMCodeGenerator(program, settings)
                            case CompilerSettings.OutputFormat.JAVA:
                                cg := JavaCodeGenerator(program, settings)
                            case CompilerSettings.OutputFormat.JAR:
                                cg := JARCodeGenerator(program, settings)
                            case CompilerSettings.OutputFormat.HEADERS:
                                cg := HeaderCodeGenerator(program, settings)
                            case CompilerSettings.OutputFormat.JAVA_HEADERS: {
                                cg := JavaHeaderCodeGenerator(program, 
                                        settings)
                            }
                            case CompilerSettings.OutputFormat.LIB: {
                                cg := LibraryCodeGenerator(program, 
                                    settings)
                            }
                            case CompilerSettings.OutputFormat.PLINK:
                                cg := PLinkCodeGenerator(program, settings)
                            case CompilerSettings.OutputFormat.JAVASCRIPT:
                                cg := JavaScriptCodeGenerator(program, settings)
                            default: unreachable
                        } 
                        cg.generateCode(settings.target)
                    }
                }
            }
        }
        if warningCount > 1 {
            Console.writeLine(warningCount + " warnings")
        }
        else if warningCount = 1 {
            Console.writeLine("1 warning")
        }
        if errorCount > 1 {
            Console.writeLine(errorCount + " errors")
        }
        else if errorCount = 1 {
            Console.writeLine("1 error")
        }
    }

    method processArguments(args:ListView<String>):CompilerSettings {
        def sources := Array<File>()
        def librarySearchPaths := Array<File>() 
        librarySearchPaths.add(File("/opt/local/lib"))
        librarySearchPaths.add(PandaCompiler.PANDA_HOME.resolve(
                "native/core/lib"))
        var target:File? := null
        var loadCoreLibraries := true
        var outputFormat := CompilerSettings.OutputFormat.EXECUTABLE
        var preserveTempArtifacts := true
        var optimize := false
        var i := 0
        while i < args.count {
            def arg := args[i]
            switch arg {
                case "-o":
                    i += 1
                    if i >= args.count {
                        Console.writeLine("expected file path after '-o'")
                        System.exit(1)
                    }
                    if target != null {
                        Console.writeLine("'-o' specified multiple times")
                        System.exit(1)
                    }
                    target := File(args[i])
                case "-O":
                    optimize := true
                case "-f":
                    i += 1
                    if i >= args.count {
                        Console.writeLine("expected output format after '-f'")
                        System.exit(1)
                    }
                    switch args[i] {
                        case "java": outputFormat := CompilerSettings.OutputFormat.JAVA
                        case "jar": outputFormat := CompilerSettings.OutputFormat.JAR
                        case "exec": outputFormat := CompilerSettings.OutputFormat.EXECUTABLE
                        case "llvm": outputFormat := CompilerSettings.OutputFormat.LLVM
                        case "h": outputFormat := CompilerSettings.OutputFormat.HEADERS
                        case "javah": outputFormat := CompilerSettings.OutputFormat.JAVA_HEADERS
                        case "lib": outputFormat := CompilerSettings.OutputFormat.LIB
                        case "plink": outputFormat := CompilerSettings.OutputFormat.PLINK
                        case "js": outputFormat := CompilerSettings.OutputFormat.JAVASCRIPT
                        default:
                            Console.writeLine("unsupported output format " +
                                    "'\{args[i]}'")
                            System.exit(1)                        
                    }
                case "-L":
                    i += 1
                    if i >= args.count {
                        Console.writeLine("expected file path after '-L'")
                        System.exit(1)
                    }
                    librarySearchPaths.add(File(args[i]))
                case "-XnoCoreLib":
                    loadCoreLibraries := false
                case "-XpreserveTempArtifacts":
                    preserveTempArtifacts := true
                case "-Xtime":
                    checkpoints := true
                default:
                    if arg.endsWith(".panda") {
                        sources.add(File(arg))
                    }
                    else {
                        Console.writeLine("unsupported argument '\{arg}'")
                        System.exit(1)
                    }
            }
            i += 1
        }
        if target = null {
            if sources.count = 1 & sources[0].path.endsWith(".panda") {
                def path := sources[0].path
                target := File(path[0 .. path.length - ".panda".length])
            }
            else {
                Console.writeLine("multiple input files specified, use " +
                        "'-o <path>' to specify output path")
                System.exit(1)
            }
        }
        if loadCoreLibraries {
            sources.add(PANDA_HOME.resolve(
                    "shared/core/lib/PandaCoreClasses.plink"))
            def ui := PANDA_HOME.resolve("shared/ui/lib/pandaui.plink")
            if ui.exists() {
                sources.add(ui)
            }
        }
        return CompilerSettings(sources, librarySearchPaths, outputFormat,
                target->File, optimize, preserveTempArtifacts)
    }

    method runWithArgs(args:ListView<String>) {
        checkpoint("process arguments")
        def settings := processArguments(args)
        compile(settings)
        checkpoint("finished")
    }

    @class
    method main(args:ListView<String>) {
        try {
            if args.count < 1 {
                Console.writeLine("usage: pandac <input.panda>")
                System.exit(1)
            }
            def pandac := PandaCompiler()
            pandac.runWithArgs(args)
            if pandac.errorCount > 0 {
                System.exit(2)
            }
        }
        catch e:InternalCompilerException {
            def position := e.position
            if position != null {
                Console.writeLine(position + ": " + e)
            }
            else {
                Console.writeLine(e)
            }
            System.exit(3)
        }
        catch e:CompilerException {
            def position := e.position
            if position != null {
                Console.writeLine(position + ": " + e)
            }
            else {
                Console.writeLine(e)
            }
            System.exit(3)
        }
        catch e:Error {
            Console.writeLine(e)
            System.exit(3)
        }
    }
}