package org.pandalanguage.pandac.compiler

uses org.pandalanguage.pandac.ast.ASTNode
uses org.pandalanguage.pandac.ast.ASTType
uses org.pandalanguage.pandac.stubs.ClassStub
uses org.pandalanguage.pandac.stubs.Methods
uses org.pandalanguage.pandac.stubs.MethodStub
uses org.pandalanguage.pandac.stubs.TypeSymbol
uses org.pandalanguage.pandac.tree.ClassNode
uses org.pandalanguage.pandac.tree.FieldNode
uses org.pandalanguage.pandac.tree.Variable
uses org.pandalanguage.pandac.types.GenericParameterType
uses org.pandalanguage.pandac.types.GenericType
uses org.pandalanguage.pandac.types.Type
uses org.pandalanguage.pandac.types.UnresolvedType
uses org.pandalanguage.pandac.types.VoidType

-- FIXME: revamp this to use IndentedOutputStream
class PLinkCodeGenerator (CodeGenerator) {
    var out := IndentedOutputStream(MemoryOutputStream())
    
    var indent := 0

    def program:Program

    def compilerSettings:CompilerSettings

    def context:Context

    constant VERSION:Int16 := 0

    init(p:Program, compilerSettings:CompilerSettings) {
        self.program := p
        self.compilerSettings := compilerSettings
        def errors := FatalErrorReporter()
        self.context := IRGenerator(p.root, p.stubs, p.stubGenerator, 
                compilerSettings, errors).context
    }

    @override
    function defaultExtension():String? {
        return ".plink"
    }
    
    method generateFieldCode(f:FieldNode, owner:ClassStub) {
        if f.annotations.isSynthetic {
            return
        }
        out.writeLine(f.annotations)
        switch f.kind {
            case Variable.Kind.DEF: out.write("def")
            case Variable.Kind.VAR: out.write("var")
            case Variable.Kind.PROPERTY: out.write("property")
            case Variable.Kind.CONSTANT: out.write("constant")
            default: unreachable
        }
        out.write(" \{f.name}")
        if f.type-!>UnresolvedType {
            out.write(":\{f.type.name}")
        }
        if owner.annotations.isUnspecified & f.initialValue != null {
            out.write(" := \{f.initialValue->Object}")
        }
        out.writeLine()
    }

    method generateMethodCode(m:MethodStub, owner:ClassStub) {
        out.writeLine(m.annotations)
        switch m.kind {
            case MethodStub.Kind.METHOD: out.write("method")
            case MethodStub.Kind.FUNCTION: out.write("function")
            case MethodStub.Kind.INIT: out.write("init")
            default: unreachable
        }
        if m.kind != MethodStub.Kind.INIT {
            out.write(" \{m.name}")
        }
        out.write("(")
        var first := true
        for (i, p) in m.parameters.enumeration {
            if i > 0 {
                out.write(", ")
            }
            if p.isVar {
                out.write("var ")
            }
            out.write(p.name)
            out.write(":")
            if p.isVarArg {
                out.write(p.type->GenericType.parameters[0].name)
                out.write("...")
            }
            else {
                out.write(p.type.name)
            }
        }
        out.write(")")
        if m.returnType != VoidType.VOID {
            out.write(":\{m.returnType.name}")
        }
        out.writeLine()
        if owner.annotations.isUnspecified & 
                !m.annotations.isClass & m.body != null {
            m.body->ASTNode.write(out)
        }
-*        for p in m.annotations.post {
            if m.annotations.isOverride
                out.writeLine("@postAnd(\{p})")
            else
                out.writeLine("@post(\{p})")
        }*-
    }
    
    method generateClassCode(cl:ClassStub) {
        def name := cl.name.convert()->Array<UInt8>
        out.writeInt16(name.count->Int16)
        out.write(name)

        if cl.containingClass != null {
            def cName := cl.containingClass.name.convert()->Array<UInt8>
            out.writeInt16(cName.count->Int16)
            out.write(cName)
        }
        else {
            out.writeInt16(0)
        }

        def oldOut := out
        def buffer := MemoryOutputStream()
        out := IndentedOutputStream(buffer)

        def annotationString := cl.annotations.convert()->String
        if annotationString.length> 0 {
            out.writeLine(cl.annotations)
        }
        if cl.kind = ClassStub.Kind.INTERFACE {
            out.write("interface")
            out.write(" \{cl.simpleName}")
            def parameters := cl.genericParameters
            if parameters != null {
                out.write("<")
                for (i, p) in parameters.enumeration {
                    if i > 0 {
                        out.write(", ")
                    }
                    out.write("\{p[0]}")
                    def type := p[1]
                    if type != null {
                        out.write(":\{type}")
                    }
                }
                out.write(">")
            }
            if cl.interfaces.count > 0 {
                out.write(" : ")
                for (i, intf) in cl.interfaces.enumeration {
                    if i > 0 {
                        out.write(", ")
                    }
                    out.write(intf.name)
                }
            }
        }
        else {
            out.write("class")
            out.write(" \{cl.simpleName}")
            def parameters := cl.genericParameters
            if parameters != null {
                out.write("<")
                for (i, p) in parameters.enumeration {
                    if i > 0 {
                        out.write(", ")
                    }
                    if p[1] != null {
                        out.write("\{p[0]}:\{p[1].name}")
                    }
                    else {
                        out.write(p[0])
                    }
                }
                out.write(">")
            }
            def superclass := cl.superclass
            if superclass != null {
                out.write(":\{superclass.name}")
            }
            if cl.interfaces.count > 0 {
                out.write(" (")
                for (i, intf) in cl.interfaces.enumeration {
                    if i > 0 {
                        out.write(", ")
                    }
                    out.write(intf.name)
                }
                out.write(")")
            }
        }
        out.writeLine(" {")
        out.level += 1
        var first := true
        for s in cl.symbols.values {
            if first {
                first := false
            }
            else {
                out.writeLine()
            }
            if s-?>FieldNode {
                generateFieldCode(s->FieldNode, cl)
            }
            else if s-?>Methods {
                for m in s->Methods.methods {
                    generateMethodCode(m.stub, cl)
                }
            }
            else if s-?>TypeSymbol {
                if s->TypeSymbol.type-!>GenericParameterType {
                    out.writeLine("@$nested \{s.name}")
                }
            }
            else {
                unreachable
            }
        }
        out.level -= 1
        out.writeLine("}")

        out := oldOut
        out.writeInt32(buffer.count.convert())
        out.write(buffer.convert()->Array<UInt8>)
    }

    @override
    method generateCode(target:File) {
        out := IndentedOutputStream(target.openOutputStream())
        out.writeInt16(VERSION)
        for cl in program.classes.values {
            def type := cl.stub.type
            if type.isPrimitiveArray | type.isTuple | type-?>GenericType {
                continue
            }
            generateClassCode(cl.stub)
        }
        for cl in program.stubs.values {
            def type := cl.type
            if (!type.isPrimitiveArray & !type.isTuple & !type-?>GenericType) | 
                    cl.annotations.isUnspecified {
                continue
            }
            def name := type.name.convert()->Array<UInt8>
            out.writeInt16(name.count->Int16)
            out.write(name)
            out.writeInt16(0)
            out.writeInt32(0)
        }
        out.close()
    }
}