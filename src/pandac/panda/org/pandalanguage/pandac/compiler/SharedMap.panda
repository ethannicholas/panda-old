package org.pandalanguage.pandac.compiler

@private
enum SharedMapCommand {
    LENGTH,
    GET,
    SET,
    CONTAINS,
    REMOVE,
    CLEAR
}

================================================================================
Similar to `HashMap` but safely usable by multiple threads. The fact that 
`SharedMap` is declared `Immutable` is somewhat misleading: `SharedMap` really
represents an immutable handle to a (private) mutable data structure. Because it
is immutable, `SharedMap` can easily be shared between multiple threads.

IMPLEMENTATION NOTE: currently, each separate `SharedMap` instance creates its
own message handling thread. In the future, either these threads will become so
lightweight that this isn't a concern, or multiple `SharedMap` instances will be
pooled together to run on a single thread. But for right now, be careful not to
create too many instances because threads are fairly heavy.
================================================================================
class SharedMap<K:Immutable, V:Immutable> : Immutable {
    @private
    def queue:MessageQueue

    -- quite a bit of ugliness is due to current lack of generics; we should be
    -- able to declare this as a Map<Immutable, Immutable> later on to eliminate
    -- a lot of casts and conversions
    constructor() {
        def t := Thread.start(method() {
            def queue := Thread.currentThread.queue
            def contents := new GenericHashMap<K, V>()
            loop {
                def msg := queue.getMessage()
                if msg-?>((SharedMapCommand, MessageQueue)) {
                    def command, replyTo := msg->((SharedMapCommand,
                            MessageQueue))
                    switch command {
                        case SharedMapCommand.LENGTH: 
                            replyTo.post(contents.length)
                        default: 
                            unreachable
                    }
                }
                else if msg-?>(SharedMapCommand) {
                    assert msg = SharedMapCommand.CLEAR
                    contents.clear()
                }
                else if msg-?>((SharedMapCommand, (K, V))) {
                    def command, payload := msg->((SharedMapCommand, (K, V)))
                    assert command = SharedMapCommand.SET
                    def key, value := payload
                    contents[key] := value
                }
                else {
                    def command, key, replyTo := 
                            msg->((SharedMapCommand, K, MessageQueue))
                    switch command {
                        case SharedMapCommand.GET: 
                            replyTo.post(contents[key])
                        case SharedMapCommand.CONTAINS: 
                            replyTo.post(contents.contains(key))
                        case SharedMapCommand.REMOVE:
                            contents.remove(key)
                        default: 
                            unreachable
                    }
                }
            }
        }, false)
        queue := t.queue
    }

    @unsafeFunction
    function [](key:K):V? {
        def reply := Thread.currentThread.queue
        queue.post((SharedMapCommand.GET, key, reply))
        return reply.getMessage()->(V?)
    }

    method contains(key:K):Bit {
        def reply := Thread.currentThread.queue
        queue.post((SharedMapCommand.CONTAINS, key, reply))
        return reply.getMessage()->(Bit)
    }

    method length():Int {
        def reply := Thread.currentThread.queue
        queue.post((SharedMapCommand.LENGTH, reply))
        return reply.getMessage()->(Int)
    }

    method []:=(key:K, value:V) {
        queue.post((SharedMapCommand.SET, (key, value)))
    }

    method remove(key:K) {
        def reply := Thread.currentThread.queue
        queue.post((SharedMapCommand.REMOVE, key))
    }

    method clear() {
        queue.post(SharedMapCommand.CLEAR)
    }

    method addAll(map:GenericMapView<K, V>) {
        for (key, value) in map
            self[key] := value
    }
}