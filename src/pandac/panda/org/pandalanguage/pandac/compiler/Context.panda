package org.pandalanguage.pandac.compiler

uses org.pandalanguage.pandac.ast.ASTInvariant
uses org.pandalanguage.pandac.ast.ASTClassType
uses org.pandalanguage.pandac.ast.ASTType
uses org.pandalanguage.pandac.parser.PandaParser
uses org.pandalanguage.pandac.stubs.ClassStub
uses org.pandalanguage.pandac.stubs.FormalParameter
uses org.pandalanguage.pandac.stubs.Methods
uses org.pandalanguage.pandac.stubs.MethodStub
uses org.pandalanguage.pandac.stubs.Package
uses org.pandalanguage.pandac.stubs.Symbol
uses org.pandalanguage.pandac.stubs.TypeSymbol
uses org.pandalanguage.pandac.tree.Annotations
uses org.pandalanguage.pandac.tree.AnnotationType
uses org.pandalanguage.pandac.tree.ArrayLiteral
uses org.pandalanguage.pandac.tree.Cast
uses org.pandalanguage.pandac.tree.CastType
uses org.pandalanguage.pandac.tree.ClassLiteral
uses org.pandalanguage.pandac.tree.Construct
uses org.pandalanguage.pandac.tree.FieldNode
uses org.pandalanguage.pandac.tree.InstanceContext
uses org.pandalanguage.pandac.tree.LocalVariable
uses org.pandalanguage.pandac.tree.MethodCall
uses org.pandalanguage.pandac.tree.MethodNode
uses org.pandalanguage.pandac.tree.MethodNodeType
uses org.pandalanguage.pandac.tree.NewPrimitiveArrayWithLength
uses org.pandalanguage.pandac.tree.NewPrimitiveArrayWithValues
uses org.pandalanguage.pandac.tree.Parameter
uses org.pandalanguage.pandac.tree.Position
uses org.pandalanguage.pandac.tree.PrimitiveArrayCopy
uses org.pandalanguage.pandac.tree.Super
uses org.pandalanguage.pandac.tree.UnaryOperation
uses org.pandalanguage.pandac.tree.UnaryOperationType
uses org.pandalanguage.pandac.tree.UnresolvedClassLiteral
uses org.pandalanguage.pandac.tree.UnresolvedRange
uses org.pandalanguage.pandac.tree.Unwrap
uses org.pandalanguage.pandac.tree.Value
uses org.pandalanguage.pandac.tree.Variable
uses org.pandalanguage.pandac.tree.VariableReference
uses org.pandalanguage.pandac.types.CharType
uses org.pandalanguage.pandac.types.ClassType
uses org.pandalanguage.pandac.types.GenericParameterType
uses org.pandalanguage.pandac.types.GenericType
uses org.pandalanguage.pandac.types.IntType
uses org.pandalanguage.pandac.types.MethodType
uses org.pandalanguage.pandac.types.NullType
uses org.pandalanguage.pandac.types.PrimitiveArrayType
uses org.pandalanguage.pandac.types.PrimitiveType
uses org.pandalanguage.pandac.types.StringOrCharType
uses org.pandalanguage.pandac.types.TupleType
uses org.pandalanguage.pandac.types.Type
uses org.pandalanguage.pandac.types.VoidType
uses org.pandalanguage.pandac.types.WrapperType

class Context {
    def stubGenerator:StubGenerator

    def irGenerator:IRGenerator

    var root:Package

    def classes:Map<String, ClassStub>

    var errors:ErrorReporter

    def compilerSettings:CompilerSettings

    var currentClass:ClassStub

    var currentMethod:MethodStub

    var inClosure:Bit

    ============================================================================
    Methods to be added to the current class.
    ============================================================================
    def methods := Array<MethodNode>()

    ============================================================================
    Captures we have run into while compiling closures. The topmost entry of the
    stack is for the current (innermost) closure.
    ============================================================================
    def captures := Stack<(MethodStub, Set<Variable>)>()

    var symbolTableStack := Stack<SymbolTable>()

    def localVariables := Array<LocalVariable>()

    def symbolTables := HashMap<ClassStub, SymbolTable>()

    init(irGenerator:IRGenerator, stubGenerator:StubGenerator, 
            root:Package, classes:MapView<String, ClassStub>, 
            errors:ErrorReporter, compilerSettings:CompilerSettings) {
        self.irGenerator := irGenerator
        self.stubGenerator := stubGenerator
        self.root := root
        self.classes := HashMap<String, ClassStub>(classes)
        self.errors := errors
        self.compilerSettings := compilerSettings
        self.currentClass := ClassStub(Position.INTERNAL, 
                ClassType("ContextDummy"), false, Annotations(
                    Position.INTERNAL, Array<AnnotationType>()), 
                null, Array<ClassType>(), 
                OrderedMap<String, Symbol>(),
                LookupContext(), Array<ASTInvariant>(), null, true,
                null)
        def classAnnotation := Array<AnnotationType>()
        classAnnotation.add(AnnotationType.CLASS)
        self.currentMethod := MethodStub(Position.INTERNAL, "<dummy>",
                Annotations(Position.INTERNAL, classAnnotation),
                MethodNodeType.METHOD, Array<FormalParameter>(), 
                VoidType.VOID, null, ClassType.OBJECT)
        symbolTableStack.push(stubGenerator.masterSymbolTable)
        -- force IMMUTABLE_CHAR_ARRAY to have a stub so that String constants
        -- work
        getStub(PrimitiveArrayType.IMMUTABLE_CHAR_ARRAY)
    }

    property symbolTable:SymbolTable

    @private
    function get_symbolTable():SymbolTable {
        return symbolTableStack.peek()
    }

    method pushSymbolTable() {
        symbolTableStack.push(SymbolTable([symbolTable]))
    }

    method pushSymbolTable(symbolTable:SymbolTable) {
        symbolTableStack.push(symbolTable)
    }

    method popSymbolTable() {
        symbolTableStack.pop()
    }

    method resolveType(type:ASTType):Type? {
        return stubGenerator.resolveType(type, symbolTable)
    }

    ============================================================================
    Given something that appears to be a type name (such as a dot-separated list
    of identifiers), attempt to resolve it as a type. If we find a valid type
    name before reaching the end, return the remaining tokens as a list of
    `String`s. For instance, given the expression:

        def a := foo -> Int.abs

    this will parse as `foo -> (Int.abs)`, since `Int.abs` is a valid type 
    name. During evaluation, we note that `Int` is a valid type name, but 
    `Int.abs` is not, so we return `(Int, ["abs"])`.
    ============================================================================
    method resolveTypeWithExtras(type:ASTType):(Type, ListView<String>)? {
        return stubGenerator.resolveTypeWithExtras(type, symbolTable)
    }

    method resolveType(name:String):Type? {
        return stubGenerator.resolveType(
                PandaParser(errors).parseType(name, Position.INTERNAL), 
                symbolTable)
    }

    @private
    function isKnown(type:Type):Bit {
        return stubGenerator.knownInstances.contains(type)
    }

    @private
    method createStub(name:String):ClassStub? {
        var type := stubGenerator.resolveType(
                PandaParser(errors).parseType(name, Position.INTERNAL), 
                symbolTable)
        if type = null
            return null
        type := type.unwrapNullable
        if type-?>PrimitiveArrayType {
            def array := type->PrimitiveArrayType
            def unspecified:Bit
            if array.elementType.isPrimitive
                unspecified := false
            else if array.elementType.unwrapNullable-?>GenericParameterType
                unspecified := true
            else {
                def elementStub := getStub(array.elementType.name)
                unspecified := elementStub.annotations.isUnspecified
            }
            def result := array.createStub(unspecified, isKnown(type), self)
            return result
        }
        else if type-?>GenericType {
            def generic := type->GenericType
            def baseStub := getStub(generic.base.name)
            def parameterStubs := Array<ClassStub?>()
            for p in generic.parameters {
                if p-!>PrimitiveType & p-!>GenericParameterType
                    parameterStubs.add(getStub(p.convert()->ClassType))
                else
                    parameterStubs.add(null)
            }
            return generic.createStub(baseStub, parameterStubs, isKnown(type), 
                    self)
        }
        else if type-?>GenericParameterType {
            return getStub(type->GenericParameterType.bound.name)
        }
        else if type-?>TupleType {
            def tuple := type->TupleType
            def stubs := Array<ClassStub?>()
            var unspecified := false
            for t in tuple.types {
                if t-?>GenericParameterType {
                    unspecified := true
                    break
                }
                else if !t.isPrimitive {
                    def stub := getStub(t.name)
                    if stub.annotations.isUnspecified {
                        unspecified := true
                        break
                    }
                }
            }
            return tuple.createStub(unspecified, isKnown(type), self)
        }
        else if type-?>MethodType {
            if type.isImmutable(self)
                return getStub(ClassType.METHOD)
            else
                return getStub(ClassType.MUTABLE_METHOD)
        }
        else
            return stubGenerator.getStub(type.name)
    }

    @private
    @unsafeFunction
    function getStub(name:String):ClassStub {
        if name.endsWith("?")
            return getStub(name[0 .. name.length - 1])
        var result := classes[name]
        if result = null {
            result := createStub(name)
            assert result != null : "failed to create stub for \{name}"
            classes[name] := result
        }
        return result
    }

    function getStub(cl:ClassType):ClassStub {
        if cl.isMethod
            return getStub(ClassType.METHOD)
        return getStub(cl.name)
    }

    property isInstance:Bit

    @private
    function get_isInstance():Bit {
        return symbolTable[Parameter.SELF_NAME] != null
    }

    @private
    constant VARARG_COST := 1

    function matchCost(target:Value, m:MethodStub, 
            var params:ListView<Value>, returnType:Type?):Int? {
        var result := 0
        var methodParams:ListView<FormalParameter> := m.parameters
        var isVarArg := methodParams.length > 0 & 
                methodParams[methodParams.length - 1].isVarArg
        if isVarArg
            result += VARARG_COST
        if params.length > 0 & params[params.length - 1]-?>Unwrap {
            -- we handle unwrap parameters (such as the call foo(bar, baz...))
            -- by simply turning off varargs; the last parameter is already an
            -- array and we just let it be treated as such
            isVarArg := false
            -- ...but we do need to handle primitive arrays for legacy code
            -- right now
            def lastType := m.parameters[m.parameters.length - 1].type
            if lastType-?>PrimitiveArrayType {
                def newParams := Array<Value>()
                newParams.addAll(params[0 .. params.length - 1])
                newParams.add(Dummy(params[params.length - 1].position,
                        lastType))
                params := newParams
            }
        }
        if isVarArg {
            -- strip off vararg parameter, it's not required
            methodParams := m.parameters[..m.parameters.length - 1]
        }
        -- do we have the right number of parameters?
        if !isVarArg & params.length != methodParams.length | 
                isVarArg & params.length < methodParams.length
            return null

        for (i, param) in methodParams.enumeration() {
            def targetType := param.type
            def cost := params[i].implicitCastCost(self, targetType)
            if cost = null
                return null
            else
                result += cost
        }
        
        if isVarArg {
            -- verify that all remaining parameters match the vararg
            def varArg := m.parameters[m.parameters.length - 1]
            def varArgType := varArg.type->GenericType.parameters[0]
            for i in methodParams.length .. params.length {
                def cost := params[i].implicitCastCost(self, varArgType)
                if cost = null
                    return null
                else
                    result += cost
            }
        }

        if returnType != null {
            def cost := m.returnType.implicitCastCost(self, returnType)
            if cost = null
                return null
            else
                result += cost
        }
        return result
    }

    method getSymbolTable(cl:ClassStub):SymbolTable {
        var result := symbolTables[cl]
        if result = null {
            def parents := Array<SymbolTable>()
            def containingClass := cl.containingClass
            if containingClass != null
                parents.add(getSymbolTable(getStub(containingClass)))
            def superclass := cl.superclass
            if superclass != null
                parents.add(getSymbolTable(getStub(superclass)))
            else
                parents.add(stubGenerator.masterSymbolTable)
            for intf in cl.interfaces
                parents.add(getSymbolTable(getStub(intf)))
            result := SymbolTable(parents)
            stubGenerator.usePackage("panda.collections", result, 
                    Position.INTERNAL)
            stubGenerator.usePackage("panda.core", result, 
                    Position.INTERNAL)
            stubGenerator.usePackage("panda.io", result, 
                    Position.INTERNAL)
            stubGenerator.usePackage("panda.math", result, 
                    Position.INTERNAL)
            stubGenerator.usePackage("panda.threads", result, 
                    Position.INTERNAL)
            for p in cl.lookupContext.packageUses
                stubGenerator.usePackage(p, result, cl.position)
            for (alias, target) in cl.lookupContext.classAliases {
                def resolved := resolveType(ASTClassType(
                        cl.position, target, null, false))
                assert resolved != null
                stubGenerator.aliasType(alias, resolved, result)
            }
            result.addAll(cl.symbols)
            symbolTables[cl] := result
        }
        return result
    }

    method getMethodsNamed(name:String, searchClass:ClassStub):
            CollectionView<MethodStub> {
        def symbol := getSymbolTable(searchClass)[name]
        if symbol-?>Methods
            return symbol->Methods.methods
        return Array<MethodStub>()
    }

    ============================================================================
    Finds the best match for the given method.

    @param target the object the method is being called on, or `null` if
            it is a bare method name
    @param name the name of the method
    @param params the method parameters
    ============================================================================
    method getMethod(target:Value, name:String, 
            params:ListView<Value>, returnType:Type?):MethodStub? {
        def searchClass:ClassStub
        def classMethod:Bit
        if target-?>ClassLiteral {
            searchClass := getStub(target->ClassLiteral.value)
            classMethod := true
        }
        else if target-?>Super {
            def cc := currentClass
            searchClass := getStub(cc.superclass->ClassType)
            classMethod := false
        }
        else {
            classMethod := false
            searchClass := getStub(target.type.convert()->ClassType)
        }
        def methods:CollectionView<MethodStub>
        if classMethod = true {
            methods := getMethodsNamed(name, searchClass).filter
                    (m => m.annotations.isClass | 
                    m.methodType = MethodNodeType.INIT)
        }
        else if classMethod = false {
            methods := getMethodsNamed(name, searchClass).filter
                    (m => !m.annotations.isClass)
        }
        else
            methods := getMethodsNamed(name, searchClass)
        var maxCost := Int.MAX
        var max:MethodStub? := null
        for m in methods {
            def cost := matchCost(target, m, params, returnType)
            if cost != null & cost < maxCost {
                maxCost := cost
                max := m
            }
        }
        return max
    }

    method testCall(position:Position, var target:Value, 
            methodName:String, var params:ListView<Value>):Value? {
        def methodStub := getMethod(target, methodName, params, null)
        if methodStub != null
            return call(position, target, methodStub, params)
        else
            return null
    }

    function isNumber(type:Type):Bit {
        if type.isNumber
            return true
        if type.isWrapper
            return type.convert()->PrimitiveType.isNumber
        return false
    }

    ============================================================================
    Looks for an overloaded version of `name` (which could be `"="`, `"+"`, 
    etc.) and returns a call to it, or `null` if no such overloaded operator was
    found.
    
    @param position the position of the call in the source code
    @param name the name of the method to call
    @param left the left argument
    @param right the right argument
    @returns a method call, or `null`
    ============================================================================
    method callOverloadedOperator(position:Position, var name:String, 
            left:Value, right:Value):Value? {
        -- avoid calling the various "fake" operators we define in the wrapper
        -- classes
        if name = "=" | name = "!=" {
            if left.type.isPrimitive & right.type.isPrimitive
                return null
            def isChar := function(v:Value):Bit {
                return v.type = CharType.CHAR | 
                        v.type = StringOrCharType.STRING_OR_CHAR
            }
            if isChar(left) & isChar(right)
                return null
        }
        else if !name.startsWith("[") & isNumber(left.type) & 
                isNumber(right.type) {
            return null
        }
        if left.type = NullType.NULL | right.type = NullType.NULL {
            return null -- force this to be compiled as ==, which is quicker 
                        -- than calling nullableEquals.
        }
        if name != "=" {
            if left.type = StringOrCharType.STRING_OR_CHAR {
                def charCast := left.implicitCast(self, 
                        WrapperType.CHAR_WRAPPER)
                var result := callOverloadedOperator(position, name, charCast, 
                        right)
                if result = null {
                    def stringCast := left.implicitCast(self, ClassType.STRING)
                    result := callOverloadedOperator(position, name, stringCast, 
                            right)
                }
                return result
            }
            if right.type = StringOrCharType.STRING_OR_CHAR {
                def charCast := right.implicitCast(self, 
                        WrapperType.CHAR_WRAPPER)
                var result := callOverloadedOperator(position, name, left, 
                        charCast)
                if result = null {
                    def stringCast := right.implicitCast(self, ClassType.STRING)
                    result := callOverloadedOperator(position, name, left,
                            stringCast)
                }
                return result
            }
        }

        def rawName := name
        -- map != and !== to = and ==. We'll invert the answer on return.
        if name.startsWith("!")
            name := name[1..]
        var result:Value? := null
        if name = "=" & (left.type.isNullable | right.type.isNullable) {
            -- for equality, if one or both parameters are null, we need to
            -- funnel this through Panda.nullableEquals
            result := testCall(position, ClassLiteral(
                    position, ClassType.PANDA), "nullableEquals", [left, right])
            assert result != null : "failed to call nullableEquals"
        }
        if result = null {
            -- check for overload on left (both instance & class)
            result := testCall(position, left, name, [right])
            if result = null {
                result := testCall(position, ClassLiteral(
                        position, left.type.convert()->ClassType), name, [left, right])
            }
        }
        if result = null {
            -- check for overload on right (class only)
            result := testCall(position, ClassLiteral(position, 
                    right.type.convert()->ClassType), name, [left, right])
        }
        if rawName.startsWith("!") & result != null {
            result := UnaryOperation(position, UnaryOperationType.NOT,
                    result)
        }
        return result
    }

    @private
    method getMethodNotFoundMessage(target:Value, methodName:String, 
            params:ListView<Value>):String {
        def msg := MutableString("no match found for method ")
        msg.append(methodName)
        msg.append("(")
        var first := true
        for (i, p) in params.enumeration() {
            if p-?>Dummy
                continue
            if first
                first := false
            else
                msg.append(", ")
            msg.append(p.type.displayName)
        }
        msg.append(")")
        if target-?>Super
            msg.append(" in \{currentClass->ClassStub.superclass->Type.displayName}")
        else if target-?>ClassLiteral
            msg.append(" in \{target}")
        else
            msg.append(" in \{target.type.displayName}")
        for p in params {
-*            if p-?>UnresolvedLambda {
                def lambda := p->UnresolvedLambda
                if lambda.errors.length > 0 {
                    msg.append("\n    possible error in lambda at " +
                            "\{lambda.position}:")
                    def entries := PrimitiveArray<Object>()
                    for e in lambda.errors
                        entries.append(e)
                    Panda.sort(entries, function(eo1:Object, eo2:Object):Bit {
                        def e1 := eo1->(Object?, Object?)[0]->PrimitiveArray<Type>
                        def e2 := eo2->(Object?, Object?)[0]->PrimitiveArray<Type>
                        assert e1.length = e2.length
                        for i in 0 .. e1.length {
                            def n1 := e1[i].name
                            def n2 := e2[i].name
                            if n1 > n2
                                return true
                            if n2 > n1
                                return false
                        }
                        return false
                    })
                    for raw in entries {
                        def e := raw->(Object?, Object?)
                        def types := e[0]->PrimitiveArray<Type>
                        def typeString := MutableString()
                        typeString.append("(")
                        for (i, type) in types.enumeration {
                            if i > 0
                                typeString.append(",")
                            typeString.append(type.displayName)
                        }
                        typeString.append(")=>(...)")
                        var error, errorPos := e[1]->(String, Position?)
                        if errorPos = null
                            errorPos := Position.INTERNAL
                        msg.append("\n        when interpreted as \{typeString}:\n")
                        msg.append("            \{error}")
                        if errorPos != lambda.position
                            msg.append(" at \{errorPos}")
                    }
                }
            }*-
        }
        return msg.convert()
    }

    method call(position:Position, var target:Value, m:MethodStub,
            var params:ListView<Value>):Value? {
        if target.type.isPrimitive & m.name = "hash" & params.length = 0 {
            -- simple optimization, avoid calling non-wrapper function in this
            -- common case (can't be a wrapper function because it is an
            -- override)
            return target.convert(self, m.returnType)
        }
        def finalTarget := getEffectiveTarget(m, target)
        if finalTarget != null 
            target := finalTarget
        else {
            if m.annotations.isClass {
                errors.error("cannot call @class method on an instance",
                        position)
            }
            else {
                errors.error("cannot call instance method from a class context",
                        position)
            }
            return null
        }
        def methodParams := m.parameters
        var isVarArg := methodParams.length > 0 &
                methodParams[methodParams.length - 1].isVarArg
        if params.length > 0 {
            def last := params[params.length - 1]
            if last-?>UnresolvedRange {
                def range := last->UnresolvedRange
                def left := range.left
                if isListView(left) & range.right = null {
                    assert left != null
                    def newParams := Array<Value>()
                    newParams.addAll(params[0 .. params.length - 1])
                    newParams.add(Unwrap(left))
                    params := newParams
                }
            }
        }
        for (i, p) in params.enumeration() {
            if p-?>Unwrap {
                if !isVarArg {
                    errors.error("'...' may not be used with " +
                            "non-variadic \{m}", position)
                    return null
                }
                if i < params.length - 1 {
                    errors.error("'...' may only be used " +
                            "with the last parameter of a call", position)
                    return null
                }
            }
        }
        if isVarArg & params.length > 0 & params[params.length - 1]-?>Unwrap
            isVarArg := false
        def count:Int
        if isVarArg
            count := methodParams.length - 1
        else
            count := methodParams.length
        def finalParams := Array<Value>()
        if params.length < count | (params.length > count & !isVarArg) {
            errors.error("\{m} requires \{count} parameters, but found " +
                    params.length, position)
            return null
        }
        for i in 0 .. count {
            def targetType := m.parameters[i].type
            if params[i].canImplicitCastTo(self, targetType) {
                def cast := params[i].implicitCast(self, targetType)
                finalParams.add(cast)
            }
            else if params[i]-?>Unwrap & targetType-?>PrimitiveArrayType {
                -- temporary, until new compiler is done and we stop using
                -- PrimitiveArrays outside of Array. FIXME remove this case.
                finalParams.add(params[i].convert(self, targetType))
            }
            else {
                params[i].reportCastError(self, targetType)
                return null
            }
        }
        if isVarArg {
            def values := Array<Value>()
            def arrayType := methodParams[methodParams.length - 1].type->GenericType
            def elementType := arrayType.parameters[0]
            for i in count .. params.length {
                def cast := params[i].implicitCast(self, elementType)
                values.add(cast)
            }
            def varParams := createArrayLiteral(position, arrayType, values)
            finalParams.add(varParams)
        }
        if target-!>ClassLiteral {
            def selfType:Type
            if m.annotations.isWrapperMethod
                selfType := m.owner.convert()->PrimitiveType
            else
                selfType := m.owner
            target := target.implicitCast(self, selfType)
        }
        if m.name = "convert" & target.type.isWrapper & 
                target.type.convert()->PrimitiveType.isNumeric & 
                m.returnType.isNumeric {
            -- handle conversions between primitive types directly
            return Cast(position, target.unwrap(self), m.returnType, 
                    CastType.CONVERT)
        }
        return MethodCall(position, target, m, finalParams)
    }

    @private
    function isListView(value:Value?):Bit {
        if value = null
            return false
        def cl := getStub(value.type.convert()->ClassType)
        for intf in cl.allInterfaces(self) {
            if intf.name.startsWith("panda.collections.ListView<")
                return true
        }
        return false
    }

    @private
    function getEffectiveTarget(m:MethodStub, target:Value):Value? {
        if target-?>InstanceContext {
            if m.annotations.isClass
                return ClassLiteral(target.position, m.owner)
            else
                return target->InstanceContext.selfParam
        }
        else {
            def isInit := m.methodType = MethodNodeType.INIT
            if !isInit & 
                    (m.annotations.isClass != target-?>ClassLiteral)
                return null
            return target
        }
    }

    method call(position:Position, target:Value, 
            methodName:String, var params:ListView<Value>):Value? {
        return call(position, target, methodName, params, null, true)
    }

    method call(position:Position, target:Value, 
            methodName:String, var params:ListView<Value>, returnType:Type?,
            reportErrors:Bit):Value? {
        def stub:ClassStub
        if target-?>ClassLiteral
            stub := getStub(target->ClassLiteral.value)
        else if target-?>Super {
            def sub := getStub(target.type.convert()->ClassType)
            stub := getStub(sub.superclass->ClassType)
        }
        else
            stub := getStub(target.type.convert()->ClassType)
        def symbolTable := getSymbolTable(stub)
        def methods := symbolTable[methodName]
        if methods-?>Methods {
            return call(position, target, methods->Methods.methods, params,
                    returnType, reportErrors)
        }
        if reportErrors {
            if methods != null {
                errors.error("'\{target.type.displayName}.\{methodName}' is " +
                        "not a method", position)
            }
            else {
                errors.error("'\{target.type.displayName}' has no member " +
                        "named '\{methodName}'", position)
            }
        }
        return null
    }

    method call(position:Position, target:Value, 
            methods:ListView<MethodStub>, params:ListView<Value>):Value? {
        return call(position, target, methods, params, null, true)
    }

    method call(position:Position, target:Value, 
            methods:ListView<MethodStub>, var params:ListView<Value>,
            returnType:Type?, reportErrors:Bit):Value? {
        if params.length > 0 {
            def last := params[params.length - 1]
            if last-?>UnresolvedRange {
                def range := last->UnresolvedRange
                def left := range.left
                if isListView(left) & range.right = null {
                    assert left != null
                    def newParams := Array<Value>()
                    newParams.addAll(params[0 .. params.length - 1])
                    newParams.add(Unwrap(left))
                    params := newParams
                }
            }
        }
        var bestCost := Int.MAX
        var best:Array<MethodStub> := []
        for m in methods {
            def finalTarget := getEffectiveTarget(m, target)
            if finalTarget = null
                continue
            def cost := matchCost(finalTarget, m, params, returnType)
            if cost != null
            if cost != null & cost < bestCost {
                bestCost := cost
                best := [m]
            }
            else if cost = bestCost
                best.add(m)
        }
        if best.length = 1 {
            def finalTarget := getEffectiveTarget(best[0], target)
            assert finalTarget != null
            if reportErrors & inClosure & target-?>InstanceContext & 
                    !best[0].annotations.isClass {
                errors.error("cannot implicitly reference 'self' within a " + 
                        "closure. Use an explicit 'self.' to make the " +
                        "capture semantics explicit.", position)
            }
            return call(position, finalTarget, best[0], params)
        }
        else if best.length = 0 {
            if reportErrors {
                def types := Array<String>()
                for p in params
                    types.add(p.type.displayName)
                errors.error("no match for \{methods[0].name}(\{types.join(', ')})", 
                        position)
            }
            return null
        }
        else {
            if reportErrors
                reportAmbiguous(position, best, params, returnType)
            return null
        }
    }

    method reportAmbiguous(position:Position, 
            methods:CollectionView<MethodStub>, params:ListView<Value>, 
            returnType:Type?) {
        def result := MutableString()
        result.append("call to '\{methods.iterator().next().name}' with " +
                "parameters (")
        for (i, p) in params.enumeration() {
            if i > 0
                result.append(", ")
            result.append(p.type.displayName)
        }
        result.append(")")
        if returnType != null {
            result.append(" and expected return type " +
                    "'\{returnType.displayName}'")
        }
        result.append(" is ambiguous. The following methods are " +
                "equally good matches:")
        for m in methods
            result.append("\n    \{m}")
        errors.error(result.convert(), position)
    }

    method createArrayLiteral(position:Position, type:GenericType, 
            values:ListView<Value>):Value {
        def params := Array<Value>()
        def typeParameters := Array<ASTType>()
        typeParameters.add(IRGenerator.toASTType(position,
                type.parameters[0]))
        def primName:String
        def arrayName:String
        if type.isImmutable(self) {
            primName := ClassType.IMMUTABLE_PRIMITIVE_ARRAY.name
            arrayName := ClassType.IMMUTABLE_ARRAY.name
        }
        else {
            primName := ClassType.PRIMITIVE_ARRAY.name
            arrayName := ClassType.ARRAY.name
        }
        def primType := resolveType(ASTClassType(position, 
                primName, typeParameters, false))
        assert primType != null
        def arrayType := resolveType(ASTClassType(position, 
                arrayName, typeParameters, false))
        assert arrayType != null
        params.add(NewPrimitiveArrayWithValues(position, 
                primType->PrimitiveArrayType, values))
        def c := call(position, ClassLiteral(position, arrayType),
                MethodNode.INIT_NAME, params)
        assert c != null
        return Construct(c->MethodCall).implicitCast(self, type)
    }
}