package org.pandalanguage.pandac.compiler

uses org.pandalanguage.pandac.stubs.Methods
uses org.pandalanguage.pandac.stubs.Symbol
uses org.pandalanguage.pandac.types.GenericType

================================================================================
`SymbolTable` for a particular instance of an unspecialized type (e.g. 
`Foo<Int>` and `Foo<String>` will get two different 
`UnspecializedTypeSymbolTable`s).
================================================================================
class UnspecializedTypeSymbolTable : SymbolTable {
    def context:Context

    def type:GenericType

    init(context:Context, type:GenericType, parent:SymbolTable) {
        super.init(parent)
        self.context := context
        self.type := type
    }

    @override
    function [](name:String):Symbol? {
        var result := mySymbols[name]
        if result = null {
            result := parents[0][name]
            if result-?>Methods {
                result := result->Methods.forType(context, type)
                mySymbols[name] := result
            }
        }
        return result
    }

    @self
    @override
    method add(name:String, s:Symbol) {
        unreachable
    }
}