package org.pandalanguage.pandac.compiler

uses org.pandalanguage.pandac.stubs.Methods
uses org.pandalanguage.pandac.stubs.Symbol
uses org.pandalanguage.pandac.tree.MethodNode

class SymbolTable {
    @private
    def parents:ListView<SymbolTable>

    def mySymbols := OrderedMap<String, Symbol>()

    init() {
        parents := []
    }

    init(symbols:MapView<String, Symbol>) {
        parents := []
        self.mySymbols.addAll(symbols)
    }

    init(parent:SymbolTable) {
        self.parents := [parent]
    }    

    init(parents:ListView<SymbolTable>) {
        self.parents := parents[..]
    }    

    init(parents:ListView<SymbolTable>, 
            symbols:OrderedMap<String, Symbol>) {
        self.parents := parents[..]
        self.mySymbols.addAll(symbols)
    }    

    function [](name:String):Symbol? {
        var result := mySymbols[name]
        if result != null & result-!>Methods {
            return result
        }
        if name = MethodNode.INIT_NAME {
            return result
        }
        for p in parents {
            if result-?>Methods {
                def prev := p[name]
                if prev-?>Methods {
                    result := prev->Methods + result->Methods
                }
            }
            else {
                assert result = null
                result := p[name]
                if result != null & result-!>Methods {
                    return result
                }
            }
        }
        return result
    }

    @self
    method add(name:String, s:Symbol) {
        assert name != "_"
        if s-?>Methods {
            var methods := s->Methods
            def existing := self[name]
            if existing-?>Methods {
                var oldMethods := existing->Methods
                oldMethods += methods
                methods := oldMethods
            }
            mySymbols[name] := methods
        }
        else {
            mySymbols[name] := s
        }
    }

    @self
    method add(s:Symbol) {
        add(s.name, s)
    }

    method addAll(map:MapView<String, Symbol>) {
        for (name, s) in map {
            add(name, s)
        }
    }

    @override
    function convert():String {
        return "SymbolTable<symbols=\{mySymbols}, parents=\{parents}>"
    }
}