package org.pandalanguage.pandac.compiler

uses org.pandalanguage.pandac.stubs.ClassStub
uses org.pandalanguage.pandac.stubs.MethodStub
uses org.pandalanguage.pandac.tree.MethodNode
uses org.pandalanguage.pandac.types.ClassType
uses org.pandalanguage.pandac.types.Type
uses org.pandalanguage.pandac.types.VoidType

class MethodNamer {
    constant MAPPED_NAMES := ImmutableHashMap<String, String>(
            HashMap<String, String>(["+", "-", "*", "/", "//", "^", "[]", 
            "[]:=", "[..]", "[..]:=", "[...]", "[...]:=", "=", ">", "<", ">=", 
            "<=", "|", "||", "&", "&&", "~", "~~", "!", "!!", "<<", ">>"],
            ["$ADD", "$SUB", "$MUL", "$DIV", "$INTDIV", "$POW", "$ARR", "$ARREQ", 
            "$SLE", "$SLEEQ", "$SLI", "$SLIEQ", "$EQ", "$GT", "$LT", "$GE", 
            "$LE", "$OR", "$BOR", "$AND", "$BAND", "$XOR", "$BXOR", "$NOT",
            "$BNOT", "$SHL", "$SHR"]))

    constant PANDAMAIN_NAME := "pandaMain"
    
    @private
    constant PANDASTART_NAME := "pandaStart"

    @private
    def context:Context

    @private
    def named := HashSet<ClassStub>()

    @private
    def names := HashMap<MethodStub, String>()

    @class
    function escapeTypeName(name:String):String {
        def result := MutableString()
        for c in name.characters {
            switch c {
                case ".": result.append("$")
                case "<": result.append("$LT")
                case ">": result.append("$GT")
                case "?": result.append("$Z")
                case "*": result.append("$p")
                case "(": result.append("$LP")
                case ")": result.append("$RP")
                case "=": result.append("$EQ")
                case ",": result.append("$C")
                case "&": result.append("$AM")
                case " ": { }
                default: result.append(c)
            }
        }
        return result.convert()
    }

    init(context:Context) {
        self.context := context
    }

    method shortName(rawName:String, owner:ClassStub):String {
        if rawName.startsWith(IRGenerator.SHIM_PREFIX) {
            return IRGenerator.SHIM_PREFIX + shortName(
                    rawName[IRGenerator.SHIM_PREFIX.length..], owner)
        }
        if rawName = MethodNode.MAIN_NAME {
            return PANDAMAIN_NAME
        }
        else if rawName = MethodNode.START_NAME & 
                owner.name = Panda.name {
            return PANDASTART_NAME
        }
        def result := MutableString()
        result.append(MethodNamer.escapeTypeName(owner.name))
        result.append("$")
        def mapped := MAPPED_NAMES[rawName]->String?
        if mapped != null {
            result.append(mapped)
        }
        else if rawName.endsWith(":=") {
            result.append(rawName[0 .. rawName.length - 2])
            result.append("$SET")
        }
        else {
            result.append(rawName)
        }
        return result.convert()
    }    

    method getName(m:MethodStub):String {
        def cl := context.getStub(m.owner)
        if m.name = MethodNode.MAIN_NAME {
            return PANDAMAIN_NAME
        }
        else if m.name = MethodNode.START_NAME & 
                cl.name = Panda.name {
            return PANDASTART_NAME
        }
        def result := MutableString(shortName(m.name, cl))
        if m.annotations.isClass {
            result.append("_class")
        }
        for (i, p) in m.parameters.enumeration {
            def t := p.type.unwrapUnspecializedGenerics(context)
            result.append("_")
            if t.isPrimitive {
                def index := t.name.lastIndexOf(".")
                if index != null {
                    result.append(t.name[index + 1..])
                }
                else {
                    result.append(t.name)
                }
            }
            else {
                result.append(MethodNamer.escapeTypeName(t.name))
            }
        }
        def t := m.returnType.unwrapUnspecializedGenerics(context)
        if t != VoidType.VOID {
            result.append("_$R")
            result.append(MethodNamer.escapeTypeName(t.name))
        }
        return result.convert()
    }
}