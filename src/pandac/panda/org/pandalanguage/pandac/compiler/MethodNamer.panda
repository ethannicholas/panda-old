package org.pandalanguage.pandac.compiler

uses org.pandalanguage.pandac.stubs.ClassStub
uses org.pandalanguage.pandac.stubs.MethodStub
uses org.pandalanguage.pandac.types.ClassType
uses org.pandalanguage.pandac.types.Type

================================================================================
Applies a pluggable naming strategy to all of the methods in a class, in order
to name methods in a fashion which is compatible with and unambiguous in the
target language.
================================================================================
class MethodNamer {
    @private
    def strategy:MethodNamingStrategy

    @private
    def context:Context

    @private
    def named := HashSet<ClassStub>()

    @private
    def names := HashMap<MethodStub, String>()

    @class
    function escapeTypeName(name:String):String {
        def result := MutableString()
        for c in name.characters {
            switch c {
                case ".": result.append("$")
                case "<": result.append("$LT")
                case ">": result.append("$GT")
                case "?": result.append("$Z")
                case "*": result.append("$p")
                case "(": result.append("$LP")
                case ")": result.append("$RP")
                case "=": result.append("$EQ")
                case ",": result.append("$C")
                case "&": result.append("$AM")
                case " ": { }
                default: result.append(c)
            }
        }
        return result.convert()
    }

    init(context:Context, strategy:MethodNamingStrategy) {
        self.context := context
        self.strategy := strategy
    }

    method getName(m:MethodStub):String {
        def stub := context.getStub(m.owner)
        nameMethods(stub)
        def result := names[m]
        assert result != null : "method \{m.owner.name}:\{m} has " +
                "not been named (methods were \{stub.methods})"
        return result
    }

    @private
    @self
    method nameMethods(cl:ClassStub) {
        if named.contains(cl)
            return
        named.add(cl)
        def context := self.context
        def getStub := function(type:ClassType):ClassStub {
            return context.getStub(type)
        }
        def sc := cl.superclass
        def disambiguationBuckets:Map<String, List<MethodStub>> := 
                HashMap<String, List<MethodStub>>()
        for m in cl.methods {
            addToBucket(disambiguationBuckets, strategy.disambiguation(m.stub), 
                    m.stub)
        }
        for (_, bucket) in disambiguationBuckets {
            def shortBuckets:Map<String, List<MethodStub>> := 
                    HashMap<String, List<MethodStub>>()
            for m in bucket
                addToBucket(shortBuckets, strategy.shortName(cl, m), m)
            for (key, shortBucket) in shortBuckets {
                if shortBucket.count = 1
                    names[shortBucket[0]] := key
                else {
                    def mediumBuckets:Map<String, List<MethodStub>> := 
                            HashMap<String, List<MethodStub>>()
                    for m in shortBucket {
                        addToBucket(mediumBuckets, strategy.mediumName(cl, m),
                                m)
                    }
                    for (mKey, mediumBucket) in mediumBuckets {
                        if mediumBucket.count = 1
                            names[mediumBucket[0]] := mKey
                        else {
                            for m in mediumBucket
                                names[m] := strategy.longName(cl, m)
                        }
                    }
                }
            }
        }
    }

    @private
    @class
    method addToBucket(buckets:Map<String, List<MethodStub>>, name:String, 
            m:MethodStub) {
        var bucket := buckets[name]
        if bucket = null {
            bucket := Array<MethodStub>()
            buckets[name] := bucket
        }
        bucket.add(m)
    }
}