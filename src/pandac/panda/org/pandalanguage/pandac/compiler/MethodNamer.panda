package org.pandalanguage.pandac.compiler

uses org.pandalanguage.pandac.stubs.ClassStub
uses org.pandalanguage.pandac.stubs.MethodStub
uses org.pandalanguage.pandac.types.ClassType
uses org.pandalanguage.pandac.types.Type

================================================================================
Applies a pluggable naming strategy to all of the methods in a class, in order
to name methods in a fashion which is compatible with and unambiguous in the
target language.
================================================================================
class MethodNamer {
    @private
    def strategy:MethodNamingStrategy

    @private
    def context:Context

    @private
    def named := new HashSet<ClassStub>()

    @private
    def names := new HashMap<MethodStub, String>()

    @class
    function escapeTypeName(name:String):String {
        return name.replace(".", "$").replace("<", "$LT").
                replace(">", "$GT").replace("?", "$Z").
                replace("*", "$p").replace("(", "$LP").
                replace(")", "$RP").replace("=", "$EQ").
                replace(",", "$C").replace("&", "$AM")
    }

    constructor(context:Context, strategy:MethodNamingStrategy) {
        self.context := context
        self.strategy := strategy
    }

    method getName(m:MethodStub):String {
        nameMethods(context.getStub(m.owner))
        Console.writeLine("getting name of \{m.owner}::\{m}")
        return names[m]->(String)
    }

    @private
    @self
    method nameMethods(cl:ClassStub) {
        if named.contains(cl)
            return
        Console.writeLine("naming methods in \{cl.name}:\{cl.annotations.isUnspecified}")
        named.add(cl)
        def getStub := function(type:ClassType):ClassStub {
            return context.getStub(type)
        }
        def sc := cl.superclass
        def disambiguationBuckets:Map<String, List<MethodStub>> := 
                new HashMap<String, List<MethodStub>>()
        for m in cl.methods {
            Console.writeLine("looking at \{m}")
            if !cl.annotations.isUnspecified | m.annotations.isClass {
                Console.writeLine("bucketing \{m}")
                addToBucket(disambiguationBuckets, strategy.disambiguation(m), 
                        m)
            }
        }
        for (_, bucket) in disambiguationBuckets {
            def shortBuckets:Map<String, List<MethodStub>> := 
                    new HashMap<String, List<MethodStub>>()
            for m in bucket
                addToBucket(shortBuckets, strategy.shortName(cl, m), m)
            for (key, shortBucket) in shortBuckets {
                if shortBucket.length = 1
                    names[shortBucket[0]] := key
                else {
                    def mediumBuckets:Map<String, List<MethodStub>> := 
                            new HashMap<String, List<MethodStub>>()
                    for m in shortBucket {
                        addToBucket(mediumBuckets, strategy.mediumName(cl, m),
                                m)
                    }
                    for (mKey, mediumBucket) in mediumBuckets {
                        if mediumBucket.length = 1
                            names[mediumBucket[0]] := mKey
                        else {
                            for m in mediumBucket
                                names[m] := strategy.longName(cl, m)
                        }
                    }
                }
            }
        }
    }

    @private
    @class
    method addToBucket(buckets:Map<String, List<MethodStub>>, name:String, 
            m:MethodStub) {
        var bucket := buckets[name]
        if bucket = null {
            bucket := new Array<MethodStub>()
            buckets[name] := bucket
        }
        bucket.add(m)
    }
}