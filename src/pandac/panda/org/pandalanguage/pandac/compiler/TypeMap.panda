package org.pandalanguage.pandac.compiler

uses org.pandalanguage.pandac.compiler.Message
uses org.pandalanguage.pandac.parser.ParseNode
uses org.pandalanguage.pandac.stubs.UntypedClassStub
uses org.pandalanguage.pandac.types.Type

class TypeMap : Immutable {
    @private
    def queue := new MessageQueue()

    constructor(stubs:CollectionView<UntypedClassStub>) {
        def immutableStubs := new ImmutableArray<UntypedClassStub>(stubs)
        Thread.start(method() {
            def typeMap := new MutableTypeMap(immutableStubs)
            loop {
                def message := queue.getMessage()
                if message-?>(Type) {
                    typeMap.putType(message->(Type))
                }
                else {
                    def node, context, replyTo := 
                            message->((ParseNode, LookupContext, 
                                MessageQueue))
                    def type, messages := typeMap.getType(node, context)
                    def wrappedMessages:ImmutableArray<Message>?
                    if messages != null
                        wrappedMessages := new ImmutableArray<Message>(messages)
                    else
                        wrappedMessages := null
                    replyTo.post((type, wrappedMessages))
                }
            }
        }, false)
    }

    @self
    method getType(node:ParseNode, lookupContext:LookupContext):(Type?, ListView<Message>?) {
        def replyTo := Thread.currentThread().queue
        queue.post((node, lookupContext, replyTo))
        def type, messages := replyTo.getMessage()->((Type?, ImmutableArray<Message>?))
        return (type, messages)
    }

    @self
    method putType(type:Type) {
        queue.post(type)
    }
 }
