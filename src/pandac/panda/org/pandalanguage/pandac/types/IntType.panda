package org.pandalanguage.pandac.types

uses org.pandalanguage.pandac.compiler.Context

================================================================================
The four `Int` types.
================================================================================
class IntType : PrimitiveType {
    constant REAL_CAST_COST := 4

    constant INT8 := IntType(1)

    constant INT16 := IntType(2)
                         
    constant INT32 := IntType(4)
                         
    constant INT64 := IntType(8)
    
    constant UINT8 := IntType(1, false)

    constant UINT16 := IntType(2, false)
                         
    constant UINT32 := IntType(4, false)
                         
    constant UINT64 := IntType(8, false)

    def signed:Bit
    
    @private
    init(size:Int) {
        init(size, true)
    }

    @private
    init(size:Int, signed:Bit) {
        super.init(getName(size, signed), size)
        self.signed := signed
    }

    @private
    @class
    function getName(size:Int, signed:Bit):String {
        var prefix:String
        if signed
            prefix := "Int"
        else
            prefix := "UInt"
        return "panda.core." + prefix + size * 8            
    }

    @override
    function get_isNumeric():Bit {
        return true
    }

    @override
    function get_isNumber():Bit {
        return true
    }

    @override
    function get_isInteger():Bit {
        return true
    }

    @override
    function canExplicitCastTo(context:Context, target:Type):Bit {
        if target.isPrimitive | target.unwrapNullable.isWrapper
            return target.convert()->PrimitiveType.isNumeric
        return self.convert()->WrapperType.canExplicitCastTo(context, target)
    }

    @override
    function implicitCastCost(context:Context, target:Type):Int? {
        if target.isNumber {
            if target.convert()->PrimitiveType.size < size
                return null
            var s := size
            var result := 0
            if target-?>IntType {
                if signed & !target->IntType.signed
                    return null
                if !signed & target->IntType.signed { 
                    if s = target->IntType.size
                        return null
                    result += 1
                }
            }
            while s < target->PrimitiveType.size {
                s *= 2
                result += 1
            }
            if target.isReal
                result += REAL_CAST_COST
            return result
        }
        else if target.isWrapper {
            var result := implicitCastCost(context, target.convert()->PrimitiveType)
            if result != null & target.isNullable
                result += NullableType.TO_NULLABLE_CAST_COST
            return result
        }
        if !target.isWrapper & !target.isPrimitive {
            return self.convert()->WrapperType.implicitCastCost(context, 
                    target)
        }
        return null
    }

    @override
    function convert():WrapperType {
        switch self {
            case INT8:   return WrapperType.INT8_WRAPPER
            case INT16:  return WrapperType.INT16_WRAPPER
            case INT32:  return WrapperType.INT32_WRAPPER
            case INT64:  return WrapperType.INT64_WRAPPER
            case UINT8:  return WrapperType.UINT8_WRAPPER
            case UINT16: return WrapperType.UINT16_WRAPPER
            case UINT32: return WrapperType.UINT32_WRAPPER
            case UINT64: return WrapperType.UINT64_WRAPPER
            default: unreachable
        }
    }

    @override
    function get_preferredVariableType():Type {
        switch self {
            case INT8: return INT32
            case INT16: return INT32
            case INT32: return INT32
            case INT64: return INT64
            case UINT8: return INT32
            case UINT16: return INT32
            case UINT32: return INT64
            case UINT64: return UINT64
            default: unreachable
        }
    }
}
