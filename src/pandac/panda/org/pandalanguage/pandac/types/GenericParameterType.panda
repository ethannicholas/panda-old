package org.pandalanguage.pandac.types

uses org.pandalanguage.pandac.tree.ClassNode
uses org.pandalanguage.pandac.tree.MethodNode
uses org.pandalanguage.pandac.types.Type

================================================================================
A type corresponding to one of the formal generic parameters on a class, 
interface, or method. In the class `panda.collections.HashMap<K, V>`:

* `panda.collections.HashMap` is a `ClassStub` (and corresponding 
  `ClassType`), with two `genericParameterTypes`. This stub will have the 
  automatically-added `@unspecified` annotation, indicating that it cannot be 
  used without specifying generic parameters.
* `K` and `V` are `GenericParameterTypes`. They have their own entries in the
  type table, as well as appearing in the `genericParameterTypes` property of
  `panda.collections.HashMap`.
* A specific instantiation of this class, such as 
  `panda.collections.HashMap<panda.core.String, panda.core.Object>`, would be a 
  new `GenericType` with its own class stub.
================================================================================
class GenericParameterType : Type {
    ============================================================================
    The type bound on this parameter, which defaults to `Object?`. In `Foo<T>`,
    `T` has a bound of `Object?`, whereas in `Foo<T:Bar>` the bound is `Bar`.
    ============================================================================
    def bound:Type

    constructor(name:String, bound:Type) {
        super.constructor(name)
        self.bound := bound
    }

    @override
    function ->>():ClassType {
      return bound->>(ClassType)
    }
}