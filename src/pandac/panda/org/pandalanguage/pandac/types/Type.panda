package org.pandalanguage.pandac.types

uses org.pandalanguage.pandac.compiler.Context
uses org.pandalanguage.pandac.compiler.CompilerException
uses org.pandalanguage.pandac.compiler.ErrorReporter
uses org.pandalanguage.pandac.parser.PandaParser
uses org.pandalanguage.pandac.tree.Position

class FatalErrorReporter : ErrorReporter {
    @override
    method error(message:String, position:Position) {
        throw CompilerException(message, position)
    }

    @override
    method warning(message:String, position:Position) {
        throw CompilerException(message, position)
    }
}

================================================================================
Represents a Panda type. This includes class types (`panda.core.Object`),
primitive types (`Int32`), nullable types (`panda.core.Object?`), and special
types (`STRING_OR_CHAR`, `REAL_LITERAL`), among others.

Each type has two names: the `name` property, which is the actual, internal name
of the type, and the `displayName` property, which is the user-visible name of
the type that should be reported in error messages. `displayName` is not unique,
as e.g. the types `panda.core.Int32` and `panda.core.Int32Wrapper` both get
displayed as `panda.core.Int32`. To avoid mistakes relating to `name` vs.
`displayName`, `Type` deliberately has a useless convert-to-string operator
which forces you to pick one or the other name property.

With only a few exceptions (primitive types, special internal-only types) types 
represent classes and have associated `ClassStub`s. To get actual 
information about the type (what methods it contains, etc.) you will need access
to its corresponding class stub; the `Type` by itself is primarily just a key
uniquely identifying the type.
================================================================================
@abstract
class Type : Immutable {
    constant FATAL := FatalErrorReporter()

    def name:String

    @protected
    init(name:String) {
        self.name := name
    }

    function displayName():String {
        return name
    }

    function simpleName():String {
        def index := name.lastIndexOf(".")
        if index != null
            return name[index + 1..]
        return name
    }

    function preferredVariableType():Type {
        return self
    }

    @final
    function canImplicitCastTo(context:Context, t:Type):Bit {
        return implicitCastCost(context, t) != null
    }

    function implicitCastCost(context:Context, t:Type):Int? {
        if self = t
            return 0
        return null
    }

    function canExplicitCastTo(context:Context, t:Type):Bit {
        return implicitCastCost(context, t) != null
    }

    function isPrimitive():Bit {
        return false
    }

    function isPrimitiveArray():Bit {
        return false
    }

    function isWrapper():Bit {
        return false
    }

    function isNullable():Bit {
        return false
    }

    function isMethod():Bit {
        return false
    }

    function isTuple():Bit {
        return false
    }

    function isNumber():Bit {
        return false
    }

    function isNumeric():Bit {
        return false
    }

    function isInteger():Bit {
        return false
    }

    function isReal():Bit {
        return false
    }

    @override
    function convert():String {
        return "\{class.simpleName}<\{name}>"
    }

    function unwrapNullable():Type {
        return self
    }

    method nullableVersion(context:Context):Type {
        if isNullable
            return self
        assert !name.endsWith("?")
        var result := context.stubGenerator.types[name + "?"]
        if result = null {
            result := NullableType(self.convert()->ClassType)
            context.stubGenerator.types[result.name] := result
        }
        return result
    }

    method isImmutable(context:Context):Bit {
        return context.getStub(self.convert()->ClassType).isImmutable(context)
    }

    ============================================================================
    Returns the narrowest type which can hold an instance of either `type1` or
    `type2`.

    @param type1 the first type to join
    @param type1 the second type to join
    @returns a type which can hold an instance of either parameter
    ============================================================================
    @class
    method union(context:Context, var type1:Type, var type2:Type):Type {
        if type1 = type2
            return type1
        if type1 = NullType.NULL
            return type2.nullableVersion(context)
        if type2 = NullType.NULL
            return type1.nullableVersion(context)
        if type1 = StringOrCharType.STRING_OR_CHAR {
            if type2 = ClassType.STRING | type2 = CharType.CHAR
                return type2
            type1 := CharType.CHAR
        }
        if type2 = StringOrCharType.STRING_OR_CHAR {
            if type1 = ClassType.STRING | type2 = CharType.CHAR
                return type1
            type2 := CharType.CHAR
        }
        var nullable := false
        if type1.isNullable {
            type1 := type1.unwrapNullable
            nullable := true
        }
        if type2.isNullable {
            type2 := type2.unwrapNullable
            nullable := true
        }
        if type1 = RealLiteralType.REAL_LITERAL
            type1 := RealType.REAL32
        if type2 = RealLiteralType.REAL_LITERAL
            type2 := RealType.REAL32
        def ancestors1 := Array<Type>()
        var test1:Type? := type1.convert()->ClassType
        while test1 != null {
            ancestors1.add(test1)
            def cl := context.getStub(test1.convert()->ClassType)
            test1 := cl.superclass
        }
        def ancestors2 := Array<Type>()
        var test2:Type? := type2.convert()->ClassType
        while test2 != null {
            ancestors2.add(test2)
            def cl := context.getStub(test2.convert()->ClassType)
            test2 := cl.superclass
        }
        var index := 0
        while index < ancestors1.length & index < ancestors2.length &
                ancestors1[ancestors1.length - (index + 1)] = 
                    ancestors2[ancestors2.length - (index + 1)]
            index += 1
        var type := ancestors1[ancestors1.length - index]
        while !type.isPrimitive & 
                context.getStub(type->ClassType).annotations.isUnspecified
            type := context.getStub(type->ClassType).superclass->Type
        if nullable
            type := type.nullableVersion(context)

        return type
    }

    @override
    @final
    function hash():Int {
        return name.hash
    }

    @override
    @final
    function =(o:Object):Bit {
        if o-!>Type
            return false
        return name = o->Type.name
    }

    function convert():PrimitiveType {
        throw NotSupportedException("\{self} is not a wrapper")
    }

    function convert():ClassType {
        throw NotSupportedException("\{self} is not a class")
    }

    function convert():WrapperType {
        throw NotSupportedException("\{self} is not primitive")
    }

    function convert():TupleType {
        throw NotSupportedException("\{self} is not a tuple")
    }

    function convert():PrimitiveArrayType {
        throw NotSupportedException("\{self} is not a primitive array")
    }

    function convert():MethodType {
        throw NotSupportedException("\{self} is not a method")
    }
}
