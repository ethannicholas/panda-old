package org.pandalanguage.pandac.types

================================================================================
Represents a Panda type. This includes class types (`panda.core.Object`),
primitive types (`Int32`), nullable types (`panda.core.Object?`), and special
types (`STRING_OR_CHAR`, `REAL_LITERAL`), among others.

Each type has two names: the `name` property, which is the actual, internal name
of the type, and the `displayName` property, which is the user-visible name of
the type that should be reported in error messages. `displayName` is not unique,
as e.g. the types `panda.core.Int32` and `panda.core.Int32Wrapper` both get
displayed as `panda.core.Int32`. To avoid mistakes relating to `name` vs.
`displayName`, `Type` deliberately has a useless convert-to-string operator
which forces you to pick one or the other name property.
================================================================================
@abstract
class Type : Immutable {
    def name:String

    @protected
    constructor(name:String) {
        self.name := name
    }

    function displayName():String {
        return name
    }

    function simpleName():String {
        return name
    }

    function isTuple():Bit {
        return false
    }

    function preferredVariableType():Type {
        return self
    }

    function implicitCastCost(t:Type):Int? {
        if self = t
            return 0
        return null
    }

    @override
    function format(fmt:String):String {
        return "\{class.simpleName}<\{name}:\{hash}>"
    }

    function ->>():TupleType {
        throw new NotSupportedException("\{self} is not a tuple")
    }
}
