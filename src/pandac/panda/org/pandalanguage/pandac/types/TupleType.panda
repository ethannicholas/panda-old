package org.pandalanguage.pandac.types

uses org.pandalanguage.pandac.ast.ASTArrowExpression
uses org.pandalanguage.pandac.ast.ASTAssignment
uses org.pandalanguage.pandac.ast.ASTBinaryExpression
uses org.pandalanguage.pandac.ast.ASTBitLiteral
uses org.pandalanguage.pandac.ast.ASTBlock
uses org.pandalanguage.pandac.ast.ASTCallExpression
uses org.pandalanguage.pandac.ast.ASTClassLiteral
uses org.pandalanguage.pandac.ast.ASTDotExpression
uses org.pandalanguage.pandac.ast.ASTExpression
uses org.pandalanguage.pandac.ast.ASTExpressionStatement
uses org.pandalanguage.pandac.ast.ASTIdentifier
uses org.pandalanguage.pandac.ast.ASTIf
uses org.pandalanguage.pandac.ast.ASTIndex
uses org.pandalanguage.pandac.ast.ASTIntegerLiteral
uses org.pandalanguage.pandac.ast.ASTInvariant
uses org.pandalanguage.pandac.ast.ASTNew
uses org.pandalanguage.pandac.ast.ASTNullLiteral
uses org.pandalanguage.pandac.ast.ASTReturn
uses org.pandalanguage.pandac.ast.ASTSelf
uses org.pandalanguage.pandac.ast.ASTStatement
uses org.pandalanguage.pandac.ast.ASTStringLiteral
uses org.pandalanguage.pandac.ast.ASTSwitch
uses org.pandalanguage.pandac.ast.ASTSwitchCase
uses org.pandalanguage.pandac.ast.ASTTypedIdentifier
uses org.pandalanguage.pandac.ast.ASTUnreachable
uses org.pandalanguage.pandac.ast.ASTStringLiteral
uses org.pandalanguage.pandac.ast.ASTVarDeclaration
uses org.pandalanguage.pandac.compiler.Context
uses org.pandalanguage.pandac.compiler.IRGenerator
uses org.pandalanguage.pandac.compiler.LookupContext
uses org.pandalanguage.pandac.compiler.OrderedMap
uses org.pandalanguage.pandac.compiler.SymbolTable
uses org.pandalanguage.pandac.stubs.ClassStub
uses org.pandalanguage.pandac.stubs.FormalParameter
uses org.pandalanguage.pandac.stubs.MethodStub
uses org.pandalanguage.pandac.stubs.Methods
uses org.pandalanguage.pandac.stubs.Symbol
uses org.pandalanguage.pandac.tree.Annotations
uses org.pandalanguage.pandac.tree.FieldNode
uses org.pandalanguage.pandac.tree.MethodNode
uses org.pandalanguage.pandac.tree.Parameter
uses org.pandalanguage.pandac.tree.Position
uses org.pandalanguage.pandac.tree.Variable

================================================================================
A tuple; there is a `TupleType` for each different combination of types. Tuples
must have at least two values.
================================================================================
class TupleType : ClassType {
    constant FIELD_PREFIX := "$field"

    def types:ImmutableArray<Type>

    @pre(types.count > 1)
    init(types:ListView<Type>) {
        super.init(getName(types))
        self.types := ImmutableArray<Type>(types)
    }

    @private
    function getName(types:ListView<Type>):String {
        def result := MutableString("(")
        for (i, t) in types.enumeration {
            if i > 0 {
                result.append(",")
            }
            result.append(t.displayName)
        }
        result.append(")")
        return result.convert()
    }

    @override
    function get_isTuple():Bit {
        return true
    }

    @override
    function convert():TupleType {
        return self
    }

    @override
    function get_unwrapGenerics():Type {
        def unwrapped := Array<Type>()
        for t in types {
            unwrapped.add(t.unwrapGenerics)
        }
        return TupleType(unwrapped)
    }

    @override
    function unwrapUnspecializedGenerics(context:Context):Type {
        def unwrapped := Array<Type>()
        for t in types {
            unwrapped.add(t.unwrapUnspecializedGenerics(context))
        }
        return TupleType(unwrapped)
    }

    @override
    function implicitCastCost(context:Context, target:Type):Int? {
        if target.isNullable {
            def result := implicitCastCost(context, target.unwrapNullable)
            if result != null {
                return result + NullableType.TO_NULLABLE_CAST_COST
            }
            else {
                return null
            }
        }
        if target-?>TupleType {
            def tuple := target->TupleType
            if tuple.types.count != types.count {
                return null
            }
            var total := 0
            for (i, t) in types.enumeration {
                def cost := t.implicitCastCost(context, tuple.types[i])
                if cost = null {
                    return null
                }
                total += cost
            }
            return total
        }
        return super.implicitCastCost(context, target)
    }

    @private
    method createInit():MethodStub {
        def position := Position.INTERNAL
        def parameters := Array<FormalParameter>()
        def statements := Array<ASTStatement>()
        for (i, type) in types.enumeration {
            def name := FIELD_PREFIX + i
            parameters.add(FormalParameter(position, name, type, false, 
                    false))

            def targets := Array<ASTExpression>()
            targets.add(ASTDotExpression(ASTSelf(position), name))
            statements.add(ASTAssignment(targets, null, ASTIdentifier(
                    position, name)))
        }
        def body := ASTBlock(position, statements)
        return MethodStub(position, MethodNode.INIT_NAME, 
                Annotations(position, []), MethodStub.Kind.INIT, parameters, 
                null, VoidType.VOID, body, self)
    }

    @private
    method createEquals(context:Context):MethodStub {
        def position := Position.INTERNAL
        def parameters := [FormalParameter(position, "o", ClassType.OBJECT, 
                false, false)]
        def statements := Array<ASTStatement>()
        def cl := ASTDotExpression(ASTIdentifier(position, "o"), 
                "$class")
        statements.add(ASTIf(position, ASTBinaryExpression(
                    BinaryOperation.Kind.NOT_EQUAL, cl, 
                    ASTIdentifier(position, "$class")), 
                ASTReturn(position, ASTBitLiteral(position, false)),
                null))
        statements.add(ASTVarDeclaration(position, Variable.Kind.DEF, 
                [ASTTypedIdentifier(position, "cast", null)], 
                ASTArrowExpression(ASTArrowExpression.Kind.CAST,
                    ASTIdentifier(position, "o"), 
                    IRGenerator.toASTType(position, self))))
        for (i, type) in types.enumeration {
            def selfField := ASTIndex(ASTSelf(position), 
                    ASTIntegerLiteral(position, i->UInt64, false))
            def otherField := ASTIndex(ASTIdentifier(position, "cast"), 
                    ASTIntegerLiteral(position, i->UInt64, false))
            statements.add(ASTIf(position, ASTBinaryExpression(
                        BinaryOperation.Kind.NOT_EQUAL, selfField, otherField), 
                    ASTReturn(position, ASTBitLiteral(position, false)),
                    null))
        }
        statements.add(ASTReturn(position, ASTBitLiteral(position, 
                true)))
        def body := ASTBlock(position, statements)
        return MethodStub(position, "=", 
                Annotations(position, [Annotations.Kind.OVERRIDE]), 
                MethodStub.Kind.FUNCTION, parameters, null, BitType.BIT, body, 
                self)
    }

    @private
    method createHash(context:Context):MethodStub {
        def position := Position.INTERNAL
        def expression:ASTExpression? := null
        for (i, type) in types.enumeration {
            def field := ASTIndex(ASTSelf(position), 
                    ASTIntegerLiteral(position, i->UInt64, false))
            def hash := ASTCallExpression(ASTIdentifier(position, "hashField"), 
                    [field])
            if expression = null {
                expression := hash
            }
            else {
                expression := ASTBinaryExpression(
                        BinaryOperation.Kind.BITWISE_XOR,
                        expression, hash)
            }
        }
        def body := ASTBlock(position, [ASTReturn(position, expression)])
        return MethodStub(position, "get_hash", 
                Annotations(position, [Annotations.Kind.OVERRIDE]), 
                MethodStub.Kind.FUNCTION, [], null, IntType.INT32, body, self)
    }

    @private
    method createIndex(context:Context):MethodStub {
        def position := Position.INTERNAL
        def parameters := [FormalParameter(position, "i", IntType.INT32, 
                false, false)]
        def statements := Array<ASTStatement>()
        def cases := Array<ASTSwitchCase>()
        var returnType := types[0]
        for (i, type) in types.enumeration {
            cases.add(ASTSwitchCase(position, 
                    [ASTIntegerLiteral(position, i->UInt64, false)],
                    ASTReturn(position, ASTIndex(ASTSelf(position), 
                        ASTIntegerLiteral(position, i->UInt64, false)))))
            if i > 0 {
                returnType := Type.union(context, returnType, type)
            }
        }
        statements.add(ASTSwitch(position, ASTIdentifier(position, "i"),
                cases, ASTUnreachable(position, null)))
        def body := ASTBlock(position, statements)
        return MethodStub(position, "[]", 
                Annotations(position, []), MethodStub.Kind.FUNCTION, parameters, 
                null, returnType, body, self)
    }

    @private
    method createConvert():MethodStub {
        def position := Position.INTERNAL
        def statements := Array<ASTStatement>()
        statements.add(ASTVarDeclaration(position, Variable.Kind.DEF, 
                [ASTTypedIdentifier(position, "result", null)], 
                ASTNew(position,
                    IRGenerator.toASTType(position, ClassType.MUTABLE_STRING),
                    [ASTStringLiteral(position, "(")])))
        for (i, type) in types.enumeration {
            if i > 0 {
                statements.add(ASTExpressionStatement(
                        ASTCallExpression(ASTDotExpression(
                            ASTIdentifier(position, "result"), "append"),
                            [ASTStringLiteral(position, ", ")])))
            }
            def converted := ASTArrowExpression(ASTArrowExpression.Kind.CAST,
                    ASTCallExpression(ASTDotExpression(
                        ASTIndex(ASTSelf(position), 
                        ASTIntegerLiteral(position, i->UInt64, false)), 
                        "convert"), []),
                    IRGenerator.toASTType(position, ClassType.STRING))
            if type.isNullable {
                statements.add(ASTIf(position, ASTBinaryExpression(
                        BinaryOperation.Kind.EQUAL, 
                        ASTIndex(ASTSelf(position), 
                            ASTIntegerLiteral(position, i->UInt64, false)),
                        ASTNullLiteral(position)),
                        ASTExpressionStatement(
                            ASTCallExpression(ASTDotExpression(
                            ASTIdentifier(position, "result"), "append"),
                            [ASTStringLiteral(position, "null")])),
                        ASTExpressionStatement(
                            ASTCallExpression(ASTDotExpression(
                            ASTIdentifier(position, "result"), "append"),
                            [converted]))))
            }
            else {
                statements.add(ASTExpressionStatement(
                        ASTCallExpression(ASTDotExpression(
                            ASTIdentifier(position, "result"), "append"),
                            [converted])))
            }
        }
        statements.add(ASTExpressionStatement(
                ASTCallExpression(ASTDotExpression(
                    ASTIdentifier(position, "result"), "append"),
                    [ASTStringLiteral(position, ")")])))
        statements.add(ASTReturn(position, 
                ASTCallExpression(ASTDotExpression(
                    ASTIdentifier(position, "result"),
                    "convert"), [])))
        def body := ASTBlock(position, statements)
        return MethodStub(position, MethodNode.CONVERT_NAME, 
                Annotations(position, [Annotations.Kind.OVERRIDE]), 
                MethodStub.Kind.FUNCTION, [], null, ClassType.STRING, body, self)
    }

    @private
    method addMethod(m:MethodStub, symbols:OrderedMap<String, Symbol>) {
        assert symbols[m.name] = null
        symbols[m.name] := Methods(m, m.type)
    }

    method createStub(unspecified:Bit, external:Bit, 
            context:Context):ClassStub {
        var isImmutable := true
        for t in types {
            if !t.isImmutable(context) {
                isImmutable := false
                break
            }
        }
        def superclass:ClassType
        if isImmutable {
            superclass := ClassType.IMMUTABLE_TUPLE
        }
        else {
            superclass := ClassType.TUPLE
        }
        def classAnnotations := [Annotations.Kind.FINAL]
        if unspecified {
            classAnnotations.add(Annotations.Kind.UNSPECIFIED)
        }
        def position := Position.INTERNAL
        def fieldAnnotations := Annotations(position, 
                [Annotations.Kind.FINAL])
        def symbols := OrderedMap<String, Symbol>()
        for (i, type) in types.enumeration {
            def field := FieldNode(position, self, FIELD_PREFIX + i, 
                    fieldAnnotations, Variable.Kind.DEF, type, null, null)
            symbols[field.name] := field
        }
        addMethod(createInit(), symbols)
        addMethod(createConvert(), symbols)
        addMethod(createEquals(context), symbols)
        addMethod(createHash(context), symbols)
        addMethod(createIndex(context), symbols)
        return ClassStub(position, self, ClassStub.Kind.CLASS, 
                Annotations(position, classAnnotations), 
                superclass, Array<ClassType>(), symbols,
                LookupContext(), Array<ASTInvariant>(), null, external,
                null)
    }    
}
