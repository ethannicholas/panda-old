package org.pandalanguage.pandac.types

uses org.pandalanguage.pandac.compiler.Context
uses org.pandalanguage.pandac.tree.ClassNode
uses org.pandalanguage.pandac.tree.MethodNode
uses org.pandalanguage.pandac.tree.Position

================================================================================
A nullable version of a `ClassType`.
================================================================================
class NullableType : Type {
    constant TO_NULLABLE_CAST_COST := 1

    constant FROM_NULLABLE_CAST_COST := 2

    constant ANY := NullableType(ClassType.OBJECT)
    
    constant ANY_IMMUTABLE := NullableType(ClassType.IMMUTABLE)
    
    def base:Type

    @pre(!base.isPrimitive)
    @pre(!base.isNullable)
    init(base:Type) {
        super.init(base.name + "?")
        assert !base.isPrimitive
        assert !name.endsWith("??") : "creating double-nullable type '\{name}'"
        self.base := base
    }

    @override
    function get_displayName():String {
        return base.displayName + "?"
    }

    @override
    function get_simpleName():String {
        return base.simpleName + "?"
    }

    @override
    function get_isTuple():Bit {
        return base.isTuple
    }

    @override
    function get_isWrapper():Bit {
        return base.isWrapper
    }

    @override
    function get_isPrimitiveArray():Bit {
        return base.isPrimitiveArray
    }

    @override
    function get_isMethod():Bit {
        return base.isMethod
    }

    @override
    function get_isNullable():Bit {
        return true
    }

    @override
    function get_unwrapNullable():Type {
        return base.unwrapNullable
    }

    @override
    function get_unwrapGenerics():Type {
        def unwrapped := base.unwrapGenerics
        if unwrapped.isNullable {
            return unwrapped
        }
        return NullableType(unwrapped)
    }

    @override
    function unwrapUnspecializedGenerics(context:Context):Type {
        def unwrapped := base.unwrapUnspecializedGenerics(context)
        if unwrapped.isNullable {
            return unwrapped
        }
        return NullableType(unwrapped)
    }

    @override
    function implicitCastCost(context:Context, target:Type):Int? {
        if target.isNullable {
            return unwrapNullable.implicitCastCost(context,
                    target.unwrapNullable)
        }
        var result := unwrapNullable.implicitCastCost(context, target)
        if result != null {
            result += FROM_NULLABLE_CAST_COST
        }
        return result
    }

    @override
    function canExplicitCastTo(context:Context, target:Type):Bit {
        return base.canExplicitCastTo(context, target)
    }

    @override
    function convert():TupleType {
        return base.convert()->TupleType
    }

    @override
    function convert():ClassType {
        return base.convert()->ClassType
    }

    @override
    function convert():PrimitiveType {
        return base.convert()->PrimitiveType
    }

    @override
    function convert():WrapperType {
        return base.convert()->WrapperType
    }

    @override
    function convert():PrimitiveArrayType {
        return base.convert()->PrimitiveArrayType
    }

    @override
    function convert():MethodType {
        return base.convert()->MethodType
    }
}
