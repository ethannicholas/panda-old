package org.pandalanguage.pandac.types

uses org.pandalanguage.pandac.compiler.InternalCompilerException
uses org.pandalanguage.pandac.tree.ClassNode
uses org.pandalanguage.pandac.tree.Position
uses org.pandalanguage.pandac.compiler.SymbolTable

================================================================================
A wrapper for a primitive type.
================================================================================
class WrapperType : ClassType {
    constant SUFFIX := "Wrapper"

    constant INT8_WRAPPER   := new WrapperType(IntType.INT8)
    constant INT16_WRAPPER  := new WrapperType(IntType.INT16)
    constant INT32_WRAPPER  := new WrapperType(IntType.INT32)
    constant INT64_WRAPPER  := new WrapperType(IntType.INT64)
    constant UINT8_WRAPPER  := new WrapperType(IntType.UINT8)
    constant UINT16_WRAPPER := new WrapperType(IntType.UINT16)
    constant UINT32_WRAPPER := new WrapperType(IntType.UINT32)
    constant UINT64_WRAPPER := new WrapperType(IntType.UINT64)
    constant REAL32_WRAPPER := new WrapperType(RealType.REAL32)
    constant REAL64_WRAPPER := new WrapperType(RealType.REAL64)
    constant BIT_WRAPPER    := new WrapperType(BitType.BIT)
    constant CHAR_WRAPPER   := new WrapperType(CharType.CHAR)

    @private
    def base:PrimitiveType

    constructor(base:PrimitiveType) {
        super.constructor(base.name + SUFFIX)
        self.base := base
    }

    @override
    function displayName():String {
        assert name.endsWith(SUFFIX)
        return name[..name.length - SUFFIX.length]
    }

    @override
    function simpleName():String {
        assert name.endsWith(SUFFIX)
        return name[name.lastIndexOf(".")->(Int) + 1 .. 
                name.length - SUFFIX.length]
    }

    @override
    function isWrapper():Bit {
        return true
    }

    @class
    function wrapperFor(type:PrimitiveType):Type {
        switch type {
            case IntType.INT8: return INT8_WRAPPER
            case IntType.INT16: return INT16_WRAPPER
            case IntType.INT32: return INT32_WRAPPER
            case IntType.INT64: return INT64_WRAPPER
            case IntType.UINT8: return UINT8_WRAPPER
            case IntType.UINT16: return UINT16_WRAPPER
            case IntType.UINT32: return UINT32_WRAPPER
            case IntType.UINT64: return UINT64_WRAPPER
            case RealType.REAL32: return REAL32_WRAPPER
            case RealType.REAL64: return REAL64_WRAPPER
            case BitType.BIT: return BIT_WRAPPER
            case CharType.CHAR: return CHAR_WRAPPER
            default: unreachable
        }
    }    

    @override
    function ->>():PrimitiveType {
        return base
    }
}
