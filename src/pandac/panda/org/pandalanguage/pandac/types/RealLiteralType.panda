package org.pandalanguage.pandac.types

uses org.pandalanguage.pandac.compiler.Context
uses org.pandalanguage.pandac.tree.MethodNode

================================================================================
The compile-time type of a real literal, which the compiler must eventually 
choose to convert either to a `Real32` or a `Real64`.
================================================================================
class RealLiteralType : SpecialType {
    constant REAL32_CAST_COST := 4
    constant REAL64_CAST_COST := 0
    constant REAL_LITERAL := RealLiteralType("<Real>")

    @private
    init(name:String) {
        super.init(name)
    }

    @override
    function isPrimitive():Bit {
        return true
    }

    @override
    function isReal():Bit {
        return true
    }

    @override
    function isNumber():Bit {
        return true
    }

    @override
    function isNumeric():Bit {
        return true
    }

    @override
    function preferredVariableType():Type {
        return RealType.REAL64
    }

    @override
    function implicitCastCost(context:Context, target:Type):Int? {
        if target = self
            return 0
        if target.isPrimitive | target.isWrapper {
            def primitive := target->>PrimitiveType
            if primitive.isReal {
                var result := 0
                if primitive->>PrimitiveType.size = 4
                    result += 1
                if target.isNullable
                    result += NullableType.TO_NULLABLE_CAST_COST
                return result
            }
            return null
        }
        return self->>WrapperType.implicitCastCost(context, target)
    }

    @override
    function canExplicitCastTo(context:Context, target:Type):Bit {
        if target.isPrimitive | target.isWrapper
            return target->>PrimitiveType.isReal
        return self->>WrapperType.canExplicitCastTo(context, target)
    }

    @override
    function convert():ClassType {
        return WrapperType.REAL64_WRAPPER
    }

    @override
    function convert():PrimitiveType {
        return RealType.REAL64
    }

    @override
    function convert():WrapperType {
        return WrapperType.REAL64_WRAPPER
    }
}
