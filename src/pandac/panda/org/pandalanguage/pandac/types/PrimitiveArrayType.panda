package org.pandalanguage.pandac.types

uses org.pandalanguage.pandac.ast.ASTAnnotation
uses org.pandalanguage.pandac.ast.ASTBlock
uses org.pandalanguage.pandac.ast.ASTFile
uses org.pandalanguage.pandac.ast.ASTIdentifier
uses org.pandalanguage.pandac.ast.ASTInvariant
uses org.pandalanguage.pandac.ast.ASTReturn
uses org.pandalanguage.pandac.ast.ASTSimpleAnnotation
uses org.pandalanguage.pandac.ast.ASTStatement
uses org.pandalanguage.pandac.ast.ClassCategory 
uses org.pandalanguage.pandac.compiler.IRGenerator
uses org.pandalanguage.pandac.compiler.CompilerException
uses org.pandalanguage.pandac.compiler.Context
uses org.pandalanguage.pandac.compiler.LookupContext
uses org.pandalanguage.pandac.compiler.OrderedMap
uses org.pandalanguage.pandac.compiler.PandaCompiler
uses org.pandalanguage.pandac.compiler.StubGenerator
uses org.pandalanguage.pandac.compiler.SymbolTable
uses org.pandalanguage.pandac.parser.PandaParser
uses org.pandalanguage.pandac.stubs.ClassStub
uses org.pandalanguage.pandac.stubs.FormalParameter
uses org.pandalanguage.pandac.stubs.MethodStub
uses org.pandalanguage.pandac.stubs.Methods
uses org.pandalanguage.pandac.stubs.Symbol
uses org.pandalanguage.pandac.tree.Annotations
uses org.pandalanguage.pandac.tree.BitLiteral
uses org.pandalanguage.pandac.tree.Block
uses org.pandalanguage.pandac.tree.Cast
uses org.pandalanguage.pandac.tree.CastType
uses org.pandalanguage.pandac.tree.ClassNode
uses org.pandalanguage.pandac.tree.FieldNode
uses org.pandalanguage.pandac.tree.FieldReference
uses org.pandalanguage.pandac.tree.IntegerLiteral
uses org.pandalanguage.pandac.tree.LocalVariable
uses org.pandalanguage.pandac.tree.MethodCall
uses org.pandalanguage.pandac.tree.MethodNode
uses org.pandalanguage.pandac.tree.MethodNodeType
uses org.pandalanguage.pandac.tree.Parameter
uses org.pandalanguage.pandac.tree.Position
uses org.pandalanguage.pandac.tree.Return
uses org.pandalanguage.pandac.tree.Statement
uses org.pandalanguage.pandac.tree.Value
uses org.pandalanguage.pandac.tree.ValueStatement
uses org.pandalanguage.pandac.tree.Variable
uses org.pandalanguage.pandac.tree.VariableAssignment
uses org.pandalanguage.pandac.tree.VariableReference
uses org.pandalanguage.pandac.types.IntType

================================================================================
A primitive array (mutable or immutable) of another type.
================================================================================
class PrimitiveArrayType : GenericType {
    -- all statically-allocated types must be added to the MutableTypeMap 
    -- init
    constant IMMUTABLE_CHAR_ARRAY := PrimitiveArrayType(
            ClassType.IMMUTABLE_PRIMITIVE_ARRAY, CharType.CHAR)

    @pre(arrayClass = ClassType.PRIMITIVE_ARRAY | 
            arrayClass = ClassType.IMMUTABLE_PRIMITIVE_ARRAY)
    init(arrayClass:ClassType, elementType:Type) {
        super.init(arrayClass, [elementType])
    }

    @override
    function get_simpleName():String {
        -- FIXME we should be using elementType.simpleName here, but leaving it
        -- as-is for backwards compatibility until new compiler is finished
        return base.simpleName + "<" + elementType.name + ">"
    }

    property elementType:Type

    @private
    function get_elementType():Type {
        return parameters[0]
    }

    @override
    function get_isPrimitiveArray():Bit {
        return true
    }

    method createStub(unspecified:Bit, external:Bit, 
            context:Context):ClassStub {
        def position := Position(File(name), -1)
        def final := [Annotations.Kind.FINAL]
        def length := FieldNode(position, self, "$length", 
                Annotations(position, final), Variable.Kind.DEF, 
                IntType.INT32, null, null)
        def elements := FieldNode(position, self, FieldNode.ELEMENTS_NAME, 
                Annotations(position, final), Variable.Kind.DEF,
                elementType, null, null)
        def symbols := SymbolTable()
        symbols.add(length)
        symbols.add(elements)
        def classAnnotations := Array<Annotations.Kind>()
        if unspecified
            classAnnotations.add(Annotations.Kind.UNSPECIFIED)

        def lengthParameters := Array<FormalParameter>()
        def lengthStatements := Array<ASTStatement>()
        lengthStatements.add(ASTReturn(position, ASTIdentifier(position,
                length.name)))
        def lengthBody := ASTBlock(position, lengthStatements)
        def lengthFunction := MethodStub(position, "length", 
                Annotations(position, Array<Annotations.Kind>()),
                MethodNodeType.FUNCTION, Array<FormalParameter>(), null,
                IntType.INT32, lengthBody, self)
        addMethod(lengthFunction, symbols)

        def immutable := name.startsWith(ImmutablePrimitiveArray.name)

        def superclass:ClassType
        if immutable
            superclass := ClassType.IMMUTABLE_PRIMITIVE_ARRAY
        else
            superclass := ClassType.PRIMITIVE_ARRAY
        return ClassStub(position, self, ClassCategory.CLASS, 
                Annotations(position, classAnnotations), 
                superclass, Array<ClassType>(), symbols.mySymbols, 
                LookupContext(), Array<ASTInvariant>(), null, external,
                null)
    }

    @override
    function convert():PrimitiveArrayType {
        return self
    }
}
