package org.pandalanguage.pandac.types

uses org.pandalanguage.pandac.ast.ASTInvariant
uses org.pandalanguage.pandac.compiler.IRGenerator
uses org.pandalanguage.pandac.compiler.CompilerException
uses org.pandalanguage.pandac.compiler.LookupContext
uses org.pandalanguage.pandac.compiler.PandaCompiler
uses org.pandalanguage.pandac.compiler.StubMap
uses org.pandalanguage.pandac.parser.ParseNode
uses org.pandalanguage.pandac.parser.PandaParser
uses org.pandalanguage.pandac.stubs.ClassStub
uses org.pandalanguage.pandac.stubs.MethodStub
uses org.pandalanguage.pandac.tree.Add
uses org.pandalanguage.pandac.tree.Annotations
uses org.pandalanguage.pandac.tree.AnnotationType
uses org.pandalanguage.pandac.tree.BitLiteral
uses org.pandalanguage.pandac.tree.Block
uses org.pandalanguage.pandac.tree.Cast
uses org.pandalanguage.pandac.tree.CastType
uses org.pandalanguage.pandac.tree.ClassNode
uses org.pandalanguage.pandac.tree.ClassNodeState
uses org.pandalanguage.pandac.tree.FieldNode
uses org.pandalanguage.pandac.tree.FieldReference
uses org.pandalanguage.pandac.tree.IntegerLiteral
uses org.pandalanguage.pandac.tree.IndexedAssignment
uses org.pandalanguage.pandac.tree.LocalVariable
uses org.pandalanguage.pandac.tree.MethodCall
uses org.pandalanguage.pandac.tree.MethodNode
uses org.pandalanguage.pandac.tree.MethodNodeType
uses org.pandalanguage.pandac.tree.Parameter
uses org.pandalanguage.pandac.tree.Position
uses org.pandalanguage.pandac.tree.Return
uses org.pandalanguage.pandac.tree.SymbolTable
uses org.pandalanguage.pandac.tree.Value
uses org.pandalanguage.pandac.tree.ValueStatement
uses org.pandalanguage.pandac.tree.VariableAssignment
uses org.pandalanguage.pandac.tree.VariableReference
uses org.pandalanguage.pandac.tree.VariableType

================================================================================
A primitive array (mutable or immutable) of another type.
================================================================================
class PrimitiveArrayType : GenericType {
    -- all statically-allocated types must be added to the MutableTypeMap 
    -- constructor
    constant IMMUTABLE_CHAR_ARRAY := new PrimitiveArrayType(
            ClassType.IMMUTABLE_PRIMITIVE_ARRAY, CharType.CHAR)

    @pre(arrayClass = ClassType.PRIMITIVE_ARRAY | 
            arrayClass = ClassType.IMMUTABLE_PRIMITIVE_ARRAY)
    constructor(arrayClass:ClassType, elementType:Type) {
        super.constructor(arrayClass, FIXMEwrap(elementType))
    }

    -- ugh I can't wait until I have the array syntax wired up properly
    function FIXMEwrap(t:Type):Array<Type> {
        def a := new Array<Type>()
        a.add(t)
        return a
    }

    @override
    function simpleName():String {
        -- FIXME we should be using elementType.simpleName here, but leaving it
        -- as-is for backwards compatibility until new compiler is finished
        return base.simpleName + "<" + elementType.name + ">"
    }

    function elementType():Type {
        return parameters[0]
    }

    @override
    function isPrimitiveArray():Bit {
        return true
    }

    method createStub(elementStub:ClassStub?):ClassStub {
        def position := new Position(name, -1, -1)
        def final := new Array<AnnotationType>()
        final.add(AnnotationType.FINAL)
        def length := new FieldNode(position, self, "length", 
                new Annotations(position, final), VariableType.DEF, 
                IntType.INT32, null, null)
        def maxLength := new FieldNode(position, self, "$maxLength", 
                new Annotations(position, final), VariableType.DEF, 
                IntType.INT32, null, null)
        def elements := new FieldNode(position, self, FieldNode.ELEMENTS_NAME, 
                new Annotations(position, final), VariableType.DEF,
                elementType, null, null)
        def fields := new Array<FieldNode>()
        fields.add(length)
        fields.add(maxLength)
        fields.add(elements)
        def classAnnotations := new Array<AnnotationType>()
        if elementStub != null & elementStub.annotations.isUnspecified
            classAnnotations.add(AnnotationType.UNSPECIFIED)
        return new ClassStub(position, name, false, 
                new Annotations(position, classAnnotations), 
                new LookupContext(new Array<String>(), 
                    new HashMap<String, String>()), 
                ClassType.OBJECT, new Array<ClassType>(), 
                new Array<MethodStub>(), fields, 
                new Array<ASTInvariant>(), null, false)
    }

    @override
    function ->>():PrimitiveArrayType {
        return self
    }
}
