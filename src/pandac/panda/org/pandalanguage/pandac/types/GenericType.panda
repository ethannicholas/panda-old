package org.pandalanguage.pandac.types

uses org.pandalanguage.pandac.ast.ASTType
uses org.pandalanguage.pandac.compiler.CompilerException
uses org.pandalanguage.pandac.compiler.Context
uses org.pandalanguage.pandac.compiler.LookupContext
uses org.pandalanguage.pandac.compiler.OrderedMap
uses org.pandalanguage.pandac.compiler.PandaCompiler
uses org.pandalanguage.pandac.compiler.StubGenerator
uses org.pandalanguage.pandac.compiler.SymbolTable
uses org.pandalanguage.pandac.parser.PandaParser
uses org.pandalanguage.pandac.stubs.ClassStub
uses org.pandalanguage.pandac.stubs.FormalParameter
uses org.pandalanguage.pandac.stubs.MethodStub
uses org.pandalanguage.pandac.stubs.Methods
uses org.pandalanguage.pandac.stubs.Symbol
uses org.pandalanguage.pandac.stubs.TypeSymbol
uses org.pandalanguage.pandac.tree.Annotations
uses org.pandalanguage.pandac.tree.FieldNode
uses org.pandalanguage.pandac.tree.MethodNode
uses org.pandalanguage.pandac.tree.Parameter
uses org.pandalanguage.pandac.tree.Position
uses org.pandalanguage.pandac.types.UnresolvedType

================================================================================
A concrete instantiation of a type with generic parameters, such as 
`panda.collections.HashMap<panda.core.String, panda.core.Object>`. See
`GenericParameterType` for a more thorough discussion of how types are handled
with respect to generics (note in particular that `HashMap<K, V>` is *not* a 
`GenericType`).
================================================================================
class GenericType : ClassType {
    def base:ClassType
    def parameters:ImmutableArray<Type>

    init(base:ClassType, 
            parameters:ListView<Type>) {
        super.init(getName(base, parameters))
        assert self-?>PrimitiveArrayType | 
                (base != ClassType.PRIMITIVE_ARRAY &
                base != ClassType.IMMUTABLE_PRIMITIVE_ARRAY)
        self.base := base
        self.parameters := ImmutableArray<Type>(parameters)
    }

    @private
    @class
    function getName(base:ClassType, parameters:ListView<Type>):String {
        def result := MutableString(base.name)
        result.append("<")
        for (i, p) in parameters.enumeration {
            if i > 0 {
                result.append(",")
            }
            result.append(p.name)
        }
        result.append(">")
        return result.convert()
    }

    @override
    function get_simpleName():String {
        def result := MutableString(base.simpleName)
        result.append("<")
        for (i, p) in parameters.enumeration {
            if i > 0 {
                result.append(",")
            }
            result.append(p.simpleName)
        }
        result.append(">")
        return result.convert()
    }    

    @override
    function implicitCastCost(context:Context, target:Type):Int? {
        def baseCost := base.implicitCastCost(context, target)
        if baseCost != null {
            return baseCost
        }
        if target-?>GenericType & parameters = target->GenericType.parameters {
            return base.implicitCastCost(context, target->GenericType.base)
        }
        return super.implicitCastCost(context, target)
    }

    @private
    function parseType(name:String, context:Context):ASTType {
        return PandaParser(context.errors).parseType(name, 
                Position(File(name), -1, -1))
    }


    @override
    function get_unwrapGenerics():Type {
        def params := Array<Type>()
        for p in parameters {
            params.add(p.unwrapGenerics)
        }
        return GenericType(base, params)
    }

    @override
    function unwrapUnspecializedGenerics(context:Context):Type {
        def params := Array<Type>()
        for p in parameters {
            params.add(p.unwrapUnspecializedGenerics(context))
        }
        return GenericType(base, params)
    }

    @class
    method getType(type:Type, symbols:SymbolTable):Type {
        if type-?>PrimitiveType | type-?>WrapperType | type-?>UnresolvedType |
                type = VoidType.VOID {
            return type
        }
        if type-?>NullableType {
            var result := getType(type.unwrapNullable, symbols)
            if !result.isNullable {
                if result.isPrimitive {
                    result := NullableType(result.convert()->ClassType)
                }
                else {
                    result := NullableType(result)
                }
            }
            return result
        }
        if type-?>PrimitiveArrayType {
            def arrayType:ClassType
            if type.name.startsWith(ClassType.PRIMITIVE_ARRAY.name) {
                arrayType := ClassType.PRIMITIVE_ARRAY
            }
            else {
                assert type.name.startsWith(
                        ClassType.IMMUTABLE_PRIMITIVE_ARRAY.name)
                arrayType := ClassType.IMMUTABLE_PRIMITIVE_ARRAY
            }
            return PrimitiveArrayType(arrayType,
                    getType(type->PrimitiveArrayType.elementType, symbols))
        }
        if type-?>GenericType {
            def types := Array<Type>()
            for p in type->GenericType.parameters {
                types.add(getType(p, symbols))
            }
            return GenericType(
                    getType(type->GenericType.base, symbols)->ClassType, types)
        }
        if type-?>MethodType {
            def m := type->MethodType
            def parameters := Array<Type>()
            for p in m.methodParameters {
                parameters.add(getType(p, symbols))
            }
            def returnType := getType(m.returnType, symbols)
            return MethodType(parameters, returnType, m.isFunction, 
                    m.immutableMethod)
        }
        if type-?>TupleType {
            def types := Array<Type>()
            for t in type->TupleType.types {
                types.add(getType(t, symbols))
            }
            return TupleType(types)
        }
        def resolved := symbols[type.name]
        if resolved-?>TypeSymbol {
            return resolved->TypeSymbol.type
        }
        return type
    }

    @private
    method instantiateField(f:FieldNode, symbols:SymbolTable):FieldNode {
        return FieldNode(f.position, self, f.name, f.annotations, f.kind,
                getType(f.type, symbols), f.initialValue, f.tuplePosition)
    }

    @private
    method instantiateMethod(m:MethodStub, symbols:SymbolTable, 
            superclass:ClassType?, interfaces:ListView<ClassType>, 
            stubGenerator:StubGenerator):MethodStub {
        def parameters := Array<FormalParameter>()
        for p in m.parameters {
            def type := getType(p.type, symbols)
            parameters.add(FormalParameter(p.position, p.name, type, 
                    p.isVar, p.isVarArg))
        }
        var annotations := m.annotations
        if m.body = null {
            annotations += Annotations.Kind.ABSTRACT
        }
        def result := MethodStub(m.position, m.name, annotations,
                m.kind, parameters, null, getType(m.returnType, symbols), 
                m.body, self)
        def shim := stubGenerator.createShimIfNeeded(result, superclass, 
                interfaces)
        if shim != null & 
                shim.type.unwrapGenerics != result.type.unwrapGenerics {
            addMethod(shim, symbols)
        }
        return result
    }

    @protected
    method addMethod(m:MethodStub, symbols:SymbolTable) {
        def methods := symbols.mySymbols[m.name]
        if methods = null {
            symbols.add(Methods(m))
        }
        else if methods-?>Methods {
            symbols.mySymbols[m.name] := methods->Methods + m
        }
        else {
            unreachable
        }
    }

    method addSupertypeSymbols(type:ClassType, symbols:SymbolTable,
            stubGenerator:StubGenerator) {
        if type-?>GenericType {
            def g := type->GenericType
            def base := stubGenerator.getStub(g.base)
            for (i, p) in base.genericParameters.enumeration {
                symbols.add(base.name + "." + p[0], TypeSymbol(g.parameters[i]))
            }
        }
        def stub := stubGenerator.getStub(type)
        def superclass := stub.superclass
        if superclass != null {
            def resolved := getType(superclass, symbols)
            addSupertypeSymbols(superclass, symbols, stubGenerator)
        }
        def interfaces := Array<ClassType>()
        for intf in stub.interfaces {
            def type := getType(intf, symbols)
            def intfClass := type.convert()->ClassType
            addSupertypeSymbols(intfClass, symbols, stubGenerator)
        }
    }

    method createStub(baseStub:ClassStub, parameterStubs:ListView<ClassStub?>, 
            external:Bit, stubGenerator:StubGenerator):ClassStub {
        def baseParameters := baseStub.genericParameters
        assert baseParameters != null : 
                "base class (\{baseStub.name}) is not generic"
        assert baseParameters.count = parameters.count : 
                "parameter mismatch in \{baseStub.name} (expected \{baseParameters}, found \{parameters})"
        def position := Position(File(name), -1, -1)
        def symbols := SymbolTable()
        for (i, p) in parameters.enumeration {
            def symbol := TypeSymbol(p)
            symbols.add(baseParameters[i][0], symbol)
            def fullName := baseStub.name + "." + baseParameters[i][0]
            symbols.add(fullName, symbol)
        }        
        var superclass := baseStub.superclass
        if superclass != null {
            def resolved := getType(superclass, symbols)
            superclass := resolved->ClassType
            addSupertypeSymbols(superclass, symbols, stubGenerator)
        }
        else {
            superclass := null
        }
        def interfaces := Array<ClassType>()
        for intf in baseStub.interfaces {
            def type := getType(intf, symbols)
            def intfClass := type.convert()->ClassType
            interfaces.add(intfClass)
            addSupertypeSymbols(intfClass, symbols, stubGenerator)
        }
        for f in baseStub.fields {
            if f.annotations.isClass | f.annotations.isThread {
                symbols.add(f)
            }
            else {
                def newField := instantiateField(f, symbols)
                symbols.add(newField)
            }
        }
        for m in baseStub.methods.filter(m => !m.annotations.isClass) {
            addMethod(instantiateMethod(m, symbols, superclass, interfaces, 
                    stubGenerator), symbols)
        }
        var annotations := baseStub.annotations - Annotations.Kind.UNSPECIFIED
        for (i, p) in parameters.enumeration {
            if stubGenerator.isUnspecified(p) {
                annotations += Annotations.Kind.UNSPECIFIED
                break
            }
        }
        return ClassStub(position, self, baseStub.kind, annotations, superclass, 
                interfaces, symbols.mySymbols, baseStub.lookupContext, 
                baseStub.invariants, null, external, null)
    }
}
