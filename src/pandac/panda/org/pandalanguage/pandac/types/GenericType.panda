package org.pandalanguage.pandac.types

uses org.pandalanguage.pandac.compiler.CompilerException
uses org.pandalanguage.pandac.compiler.Context
uses org.pandalanguage.pandac.compiler.LookupContext
uses org.pandalanguage.pandac.compiler.OrderedMap
uses org.pandalanguage.pandac.compiler.PandaCompiler
uses org.pandalanguage.pandac.parser.PandaParser
uses org.pandalanguage.pandac.parser.ParseNode
uses org.pandalanguage.pandac.stubs.ClassStub
uses org.pandalanguage.pandac.stubs.FormalParameter
uses org.pandalanguage.pandac.stubs.MethodStub
uses org.pandalanguage.pandac.stubs.Methods
uses org.pandalanguage.pandac.stubs.Symbol
uses org.pandalanguage.pandac.stubs.TypeSymbol
uses org.pandalanguage.pandac.tree.Annotations
uses org.pandalanguage.pandac.tree.AnnotationType
uses org.pandalanguage.pandac.tree.FieldNode
uses org.pandalanguage.pandac.tree.MethodNode
uses org.pandalanguage.pandac.tree.MethodNodeType
uses org.pandalanguage.pandac.tree.Parameter
uses org.pandalanguage.pandac.tree.Position
uses org.pandalanguage.pandac.types.UnresolvedType

================================================================================
A concrete instantiation of a type with generic parameters, such as 
`panda.collections.HashMap<panda.core.String, panda.core.Object>`. See
`GenericParameterType` for a more thorough discussion of how types are handled
with respect to generics (note in particular that `HashMap<K, V>` is *not* a 
`GenericType`).
================================================================================
class GenericType : ClassType {
    def base:ClassType
    def parameters:ImmutableArray<Type>

    constructor(base:ClassType, 
            parameters:ListView<Type>) {
        super.constructor(getName(base, parameters))
        self.base := base
        self.parameters := new ImmutableArray<Type>(parameters)
    }

    @private
    @class
    function getName(base:ClassType, parameters:ListView<Type>):String {
        var result := base.name->>(MutableString)
        result.append("<")
        for i, p in parameters {
            if i > 0
                result.append(",")
            result.append(p.name)
        }
        result.append(">")
        return result->>(String)
    }

    @override
    function simpleName():String {
        def result := new MutableString(base.simpleName())
        result.append("<")
        for i, p in parameters {
            if i > 0
                result.append(",")
            result.append(p.simpleName)
        }
        result.append(">")
        return result->>(String)
    }    

    @private
    function parseType(name:String, context:Context):ParseNode {
        return new PandaParser(context.errors).parseType(name, 
                new Position(name, -1, -1))
    }

    @private
    method getType(type:Type, context:Context, 
            symbols:MapView<String, Symbol>):Type {
        if type-?>(UnresolvedType)
            return type
        if type = VoidType.VOID
            return type
        def result := context.stubGenerator.resolveType(
                new PandaParser(context.errors).parseType(type.name,
                    context.currentClass.position), symbols)
        if result != null
            return result
        throw new CompilerException("unable to resolve type '\{type.name}'",
                Position.INTERNAL)
    }

    @private
    method instantiateField(f:FieldNode, context:Context, 
            symbols:MapView<String, Symbol>):FieldNode {
        return new FieldNode(f.position, self, f.name, f.annotations, f.varType,
                getType(f.type, context, symbols), f.initialValue, 
                f.tuplePosition)
    }

    @private
    method instantiateMethod(m:MethodStub, context:Context, 
            symbols:MapView<String, Symbol>):MethodStub {
        def parameters := new Array<FormalParameter>()
        for p in m.parameters {
            def type := getType(p.type, context, symbols)
            parameters.add(new FormalParameter(p.position, p.name, 
                    type, p.isVar, p.isConvert, p.isVarArg))
        }
        var annotations := m.annotations
        if m.body = null
            annotations += AnnotationType.ABSTRACT
        return new MethodStub(m.position, m.name, annotations,
                m.methodType, parameters, getType(m.returnType, context,
                    symbols), 
                m.body, self)
    }

    @protected
    method addSymbol(m:MethodStub, symbols:Map<String, Symbol>) {
        def methods := symbols[m.name]
        if methods = null {
            def list := new Array<MethodStub>()
            list.add(m)
            symbols[m.name] := new Methods(list)
        }
        else if methods-?>(Methods)
            symbols[m.name] := methods->(Methods) + m
        else
            unreachable
    }

    @protected
    method addSymbol(s:Symbol, symbols:Map<String, Symbol>) {
        symbols[s.name] := s
    }

    method createStub(context:Context, baseStub:ClassStub,
            parameterStubs:ListView<ClassStub?>):ClassStub {
        def baseParameters := baseStub.genericParameters
        assert baseParameters != null : 
                "base class (\{baseStub.name}) is not generic"
        assert baseParameters.length = parameters.length : 
                "parameter mismatch (\{baseParameters} vs. \{parameters})"
        def position := new Position(name, -1, -1)
        def symbols := new OrderedMap<String, Symbol>()
        for i, p in parameters {
            def symbol := new TypeSymbol(p)
            symbols[baseParameters[i].identifier] := symbol
            def fullName := baseStub.name + "." + baseParameters[i].identifier
            symbols[fullName] := symbol
        }        
        var superclass := baseStub.superclass
        if superclass != null {
            def resolved:Type?
            resolved := getType(superclass, context, symbols)
            superclass := resolved->(ClassType)
        }
        else
            superclass := null
        def interfaces := new Array<ClassType>()
        for intf in baseStub.interfaces {
            var type:Type?
            type := getType(intf, context, symbols)
            if type != null {
                def intfClass := type->>(ClassType)
                interfaces.add(intfClass)
            }
        }
        for f in baseStub.fields {
            if f.annotations.isClass | f.annotations.isThread
                symbols[f.name] := f
            else {
                def newField := instantiateField(f, context, symbols)
                symbols[newField.name] := newField
                addSymbol(newField, symbols)
            }
        }
        for m in baseStub.methods.filter(m => !m.annotations.isClass)
            addSymbol(instantiateMethod(m, context, symbols), symbols)
        var annotations := baseStub.annotations - AnnotationType.UNSPECIFIED
        for i, p in parameters {
            var unspecified := p-?>(GenericParameterType)
            def stub := parameterStubs[i]
            unspecified |= stub != null & stub.annotations.isUnspecified
            if unspecified {
                annotations += AnnotationType.UNSPECIFIED
                break
            }
        }
        return new ClassStub(position, self, baseStub.isInterface, annotations, 
                superclass, interfaces, symbols, baseStub.lookupContext, 
                baseStub.invariants, null, false, null)
    }
}
