package org.pandalanguage.pandac.types

uses org.pandalanguage.pandac.tree.ClassNode

================================================================================
Represents a method type, with a list of parameters and return type (which may
be `void`).
================================================================================
class MethodType : ClassType {
    @private
    def methodParameters:ImmutableArray<Type>
    
    @private
    def returnType:Type?

    @readonly
    def isFunction:Bit

    @private
    def immutableMethod:Bit

    constructor(methodParameters:ListView<Type>, returnType:Type?, 
            isFunction:Bit, isImmutable:Bit) {
        super.constructor(getName(methodParameters, returnType, isFunction,
                isImmutable))
        self.methodParameters := new ImmutableArray<Type>(methodParameters)
        self.returnType := returnType
        self.isFunction := isFunction
        self.immutableMethod := isImmutable
    }

    @private
    @class
    function getName(parameterTypes:ListView<Type>, returnType:Type?, 
            isFunction:Bit, isImmutable:Bit):String {
        var parameters := new MutableString()
        for i, p in parameterTypes {
            if i > 0
                parameters.append(",")
            parameters.append(p.name)
        }
        var yields:String
        if isFunction
            yields := "=>"
        else
            yields := "=&>"
        if isImmutable
            yields += "*"
        if returnType = null
            return "(" + parameters + ")" + yields + "()"
        else
            return "(" + parameters + ")" + yields + "(" + returnType.name + ")"
    }

    @override
    function simpleName():String {
        def result := new MutableString("(")
        for i, p in methodParameters {
            if i > 0
                result.append(", ")
            result.append(p.simpleName)
        }
        result.append(")=")
        if !isFunction
            result.append("&")
        result.append(">")
        if immutableMethod
            result.append("*")
        result.append("(")
        if returnType != null
            result.append(returnType.simpleName)
        result.append(")")
        return result->>(String)
    }

    @override
    function displayName():String {
        def result := new MutableString("(")
        for i, p in methodParameters {
            if i > 0
                result.append(", ")
            result.append(p.displayName)
        }
        result.append(")=")
        if !isFunction
            result.append("&")
        result.append(">")
        if immutableMethod
            result.append("*")
        result.append("(")
        if returnType != null
            result.append(returnType.displayName)
        result.append(")")
        return result->>(String)
    }

    @override
    function isMethod():Bit {
        return true
    }
}
