package org.pandalanguage.pandac.types

uses org.pandalanguage.pandac.compiler.Context
uses org.pandalanguage.pandac.compiler.StubGenerator
uses org.pandalanguage.pandac.stubs.ClassStub
uses org.pandalanguage.pandac.stubs.Methods
uses org.pandalanguage.pandac.stubs.MethodStub
uses org.pandalanguage.pandac.tree.ClassNode
uses org.pandalanguage.pandac.tree.MethodNode
uses org.pandalanguage.pandac.tree.Position

================================================================================
A type representing a class, such as `panda.lang.String`. `ClassType`s are 
always resolved; a reference to something that looks like a class in the code, 
but a name which hasn't actually been encountered yet, will be handled as an
`UnresolvedType` until the name is either resolved or an 
`UnresolvedTypeException` is thrown.
================================================================================
class ClassType : Type {
    -- all statically-allocated types must be added to the MutableTypeMap 
    -- init
    constant CLASS := ClassType(Class.name)
    constant OBJECT := ClassType(Object.name)
    constant STRING := ClassType(String.name)
    constant MUTABLE_STRING := ClassType(MutableString.name)
    constant IMMUTABLE := ClassType(Immutable.name)
    constant CHOICE := ClassType(Choice.name)
    constant ERROR := ClassType(Error.name)
    constant METHOD := ClassType(Method.name)
    constant MUTABLE_METHOD := ClassType(MutableMethod.name)
    constant SAFETY_ERROR := ClassType(SafetyError.name)
    constant LIST_VIEW := ClassType("panda.collections.ListView")
    constant ARRAY := ClassType("panda.collections.Array")
    constant IMMUTABLE_ARRAY := ClassType("panda.collections.ImmutableArray")
    constant PRIMITIVE_ARRAY := ClassType(PrimitiveArray.name)
    constant IMMUTABLE_PRIMITIVE_ARRAY := ClassType(
            ImmutablePrimitiveArray.name)
    constant PANDA := ClassType(Panda.name)
    constant REGULAR_EXPRESSION := ClassType(RegularExpression.name)
    constant TUPLE := ClassType(Tuple.name)
    constant IMMUTABLE_TUPLE := ClassType(ImmutableTuple.name)

    @pre(class != ClassType | !name.contains("<"))
    init(name:String) {
        super.init(name)
        assert class = WrapperType | !name.startsWith("panda.core.") |
                !name.endsWith("Wrapper")
    }

    @override
    function implicitCastCost(context:Context, target:Type):Int? {
        if self = target {
            return 0
        }
        if target = NativePointerType.NATIVE_POINTER {
            return null
        }
        if target.isNullable {
            var result := implicitCastCost(context, target.unwrapNullable)
            if result != null {
                result += NullableType.TO_NULLABLE_CAST_COST
            }
            return result
        }
        assert !target.isNullable
        var targetClass:ClassStub
        if target.isPrimitive {
            targetClass := context.getStub(target.convert()->WrapperType)
        }
        else {
            if target-!>ClassType {
                return null
            }
            targetClass := context.getStub(target->ClassType)
        }
        def myClass := context.getStub(self)
        def parent:ClassType? := myClass.superclass
        var best:Int? := null
        if parent != null {
            var result := parent.implicitCastCost(context, target)
            if result != null {
                result += 1
                if best != null {
                    best := best.min(result)
                }
                else {
                    best := result
                }
            }
        }
        for intf in myClass.interfaces {
            var result := intf.implicitCastCost(context, target)
            if result != null {
                result += 1
                if best != null {
                    best := best.min(result)
                }
                else {
                    best := result
                }
            }
        }
        return best
    }

    @override
    function canExplicitCastTo(context:Context, var target:Type):Bit {
        if target.isWrapper {
            target := target.convert()->PrimitiveType
        }
        if canImplicitCastTo(context, target) {
            return true
        }
        if !target.isPrimitive & context.getStub(
                target.convert()->ClassType).kind = ClassStub.Kind.INTERFACE & 
                !context.getStub(self).annotations.isFinal {
            -- as long as this class isn't final, we could be dealing with a
            -- subclass that potentially implements any interface
            return true
        }
        return target.canImplicitCastTo(context, self)
    }

    ============================================================================
    Returns the set of all of the interfaces directly or indirectly implemented
    by this class. If this class represents an interface, it will include itself
    in the result.
    ============================================================================
    function allInterfaces(context:Context):CollectionView<ClassType> {
        def result := HashSet<ClassType>()
        def stub := context.getStub(self)
        def sc := stub.superclass
        if sc != null {
            result.addAll(context.effectiveType(self, sc)->ClassType.allInterfaces(
                    context))
        }
        if stub.kind = ClassStub.Kind.INTERFACE {
            result.add(self)
        }
        for intf in stub.interfaces {
            result.addAll(context.effectiveType(self, 
                    intf)->ClassType.allInterfaces(context))
        }
        return result
    }

    ============================================================================
    Returns a list of all of the interface methods in this class corresponding
    to a particular interface. The order of methods in the resulting array is 
    consistent across all classes implementing this interface.
    ============================================================================
    @safeReturn
    method interfaceMethods(intf:ClassType, 
            stubGenerator:StubGenerator):ListView<MethodStub> {
        def result := Array<MethodStub>(intf.virtualMethods(stubGenerator))
        def myMethods := virtualMethods(stubGenerator)
        for (i, m) in result.enumeration {
            for m2 in myMethods {
                if m2.isOverrideOf(m) {
                    result[i] := m2
                    break
                }
            }
        }
        return result
    }

    @limited
    method addOverrides(stubGenerator:StubGenerator, 
            source:CollectionView<MethodStub>, 
            dest:List<MethodStub>) {
        def stub := stubGenerator.getStub(self)
        outer: for s in source {
            if !s.isDeclaredVirtual {
                continue
            }
            for (i, d) in dest.enumeration {
                if s.isOverrideOf(d) {
                    dest[i] := s
                    continue outer
                }
            }
            dest.add(s)
        }
    }

    function instanceMethods(stubGenerator:StubGenerator):
            CollectionView<MethodStub> {
        def result := Array<MethodStub>()
        def stub := stubGenerator.getStub(self)
        if stub.superclass != null {
            def effective := stubGenerator.effectiveType(self, 
                    stub.superclass)->ClassType
            result.addAll(effective.instanceMethods(stubGenerator).filter(
                        m => !m.annotations.isPrivate))
        }
        def test:(MethodStub)=>(Bit) := 
                m => m.kind != MethodStub.Kind.INIT & 
                !m.annotations.isClass
        def myMethods := stub.methods.filter(test)
        if self-?>GenericType & stub.isUnspecialized {
            def parameters := self->GenericType.parameters
            for m in myMethods {
                result.add(m)
            }
        }
        else {
            result.addAll(myMethods)
        }
        return result
    }

    ============================================================================
    Returns a ListView of all of the virtual methods in this class. Methods 
    which are inherited or overridden from parent classes appear in this array 
    in the same index in which they were present in the parent class, and new 
    methods will appear at the end of the array.
    ============================================================================
    @safeReturn
    method virtualMethods(stubGenerator:StubGenerator):ListView<MethodStub> {
        def stub := stubGenerator.getStub(self)
        if self-!>GenericType & stub.genericParameters != null {
            def params := Array<Type>()
            for p in stub.genericParameters {
                params.add(GenericParameterType(name + "." + p[0], p[1]))
            }
            return GenericType(self, params).virtualMethods(stubGenerator)
        }
        def result := Array<MethodStub>()

        for i in stub.interfaces.count - 1 ... 0 by -1 {
            def intf := stubGenerator.effectiveType(self, stub.interfaces[i])
            addOverrides(stubGenerator, 
                    intf->ClassType.virtualMethods(stubGenerator),
                    result)
        }
        def sc := stub.superclass
        if sc != null {
            def effective := stubGenerator.effectiveType(self, sc)->ClassType
            addOverrides(stubGenerator, effective.virtualMethods(stubGenerator), 
                    result)
        }
        def virtuals := Array<MethodStub>()
        def symbolTable := stubGenerator.getSymbolTable(self)
        def names := HashSet<String>()
        for m in stub.methods {
            names.add(m.name)
        }
        for name in names {
            for m in symbolTable[name]->Methods.entries {
                if m.isDeclaredVirtual {
                    virtuals.add(m)
                }
            }
        }
        addOverrides(stubGenerator, virtuals, result)
        return result
    }

    @override
    function convert():ClassType {
        return self
    }
}