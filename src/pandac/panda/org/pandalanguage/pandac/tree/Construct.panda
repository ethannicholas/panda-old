package org.pandalanguage.pandac.tree

================================================================================
Represents an object construction and constructor call.
================================================================================
class Construct : Value {
    ============================================================================
    The constructor being called.
    ============================================================================
    var methodNode:MethodNode
    
    ============================================================================
    Creates a new `Construct`.
    
    @param methodNode the method being called
    @param params the parameters to the method (*not* including 'self')
    ============================================================================
    @pre(!methodNode.owner.annotations.isAbstract)
    constructor(position:Position, methodNode:MethodNode,
            parameters:PrimitiveArray<Value>) {
        super.constructor(position, methodNode.parameters[0].type)
            try {
        self.methodNode := methodNode
        for i in 0 ... parameters.length - 1
            add(parameters[i])
        }
        catch e:Error {
            Console.writeLine("error at: " + position)
            throw e
        }
    }
    
    function parameters():PrimitiveArray<Value> {
        var result := new PrimitiveArray<Value>()
        for i in 0 ... length - 1
            result.append(self[i]->(Value))
        return result
    }

    @override
    method markLive() {
        if !live {
            super.markLive()
            methodNode.markLive()
        }
    }

    @override
    function format(fmt:String):String {
        var result := new MutableString()
        result.append(methodNode.parent->(ClassNode).name)
        result.append(".")
        result.append(methodNode.name)
        result.append("(")
        for i in 0 ... parameters.length - 1 {
            if i > 0
                result.append(", ")
            result.append(parameters[i])
        }
        result.append(")")
        return result->>(String)
    }
}