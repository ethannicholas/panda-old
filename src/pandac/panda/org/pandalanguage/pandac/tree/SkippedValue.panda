package org.pandalanguage.pandac.tree

uses org.pandalanguage.pandac.compiler.Context
uses org.pandalanguage.pandac.types.Type

================================================================================
A value that is evaluated and then discarded in favor of a second value.
Equivalent to the comma operator in C.
================================================================================
class SkippedValue : Value {
	def discardedValue:Value

	def actualValue:Value

	init(discardedValue:Value, actualValue:Value) {
		super.init(actualValue.position, actualValue.type)
		self.discardedValue := discardedValue
		self.actualValue := actualValue
	}

	@override
    method preferredType(context:Context, preferImmutable:Bit):Type {
    	return actualValue.preferredType(context, preferImmutable)
	}

	@override
    method preferredVariableType(context:Context, preferImmutable:Bit):Type {
        return actualValue.preferredVariableType(context, preferImmutable)
    }

    @override
    function get_isValid():Bit {
        return actualValue.isValid
    }

    @override
    method checkValid(context:Context):Bit {
        return actualValue.checkValid(context)
    }

    @override
    function implicitCastCost(context:Context, t:Type):Int? {
        return actualValue.implicitCastCost(context, t)
    }

    @override
    method implicitCast(position:Position, context:Context, t:Type):Value {
        return SkippedValue(discardedValue, actualValue.implicitCast(position,
                context, t))
    }    

    @override
    function canExplicitCastTo(context:Context, t:Type):Bit {
        return actualValue.canExplicitCastTo(context, t)
    }

    @override
    method explicitCast(position:Position, context:Context, t:Type, 
            force:Bit):Value {
        return SkippedValue(discardedValue, actualValue.explicitCast(position, 
                context, t, force))
    }

    @override
    function isResolved():Bit {
        return actualValue.isResolved()
    }

}