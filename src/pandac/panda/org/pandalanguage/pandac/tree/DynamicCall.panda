package org.pandalanguage.pandac.tree

uses org.pandalanguage.pandac.types.MethodType

class DynamicCall : Value {
    @pre(methodValue.type.isMethod)
    @pre(methodValue.type->>(MethodType).methodParameters.length = 
            parameters.length)
    constructor(methodValue:Value, 
            parameters:ListView<Value>) {
        super.constructor(methodValue.position, 
                methodValue.type->>(MethodType).returnType, 
                wrap(methodValue, parameters))
        Console.writeLine("creating dynamicCall:\{position} on \{methodValue}:\{methodValue.type} with \{parameters}: \{self}")
    }

    @class
    function wrap(methodValue:Value, parameters:ListView<Value>):ListView<Node> {
        def result := new Array<Node>()
        result.add(methodValue)
        for v in parameters
            result.add(v)
        return result
    }
    
    function methodValue():Value {
        return self[0]->(Value)
    }

    function parameters():Array<Value> {
        def result := new Array<Value>()
        for i, p in self {
            if i = 0
                continue
            result.add(p->(Value))
        }
        return result
    }

    @override
    function format(fmt:String):String {
        return methodValue + "(" + parameters.join(", ") + ")"
    }
}