package org.pandalanguage.pandac.tree

uses org.pandalanguage.pandac.compiler.Context
uses org.pandalanguage.pandac.compiler.Dummy
uses org.pandalanguage.pandac.stubs.MethodStub
uses org.pandalanguage.pandac.types.Type
uses org.pandalanguage.pandac.types.UnresolvedType

================================================================================
Represents a value which has not yet been resolved into its final form. 
Unresolved values generally depend upon context (for instance, '[1]' could be an
Array<Int>, a ListView<Object>, or any of countless other types depending on 
context), and may not even be valid at all without further context (for 
instance, 'panda.core' by itself is not generally valid, and depends upon us 
running into something like '.String' next).
================================================================================
@abstract
class UnresolvedValue : Value {
    ============================================================================
    The value this Unresolved should resolve to if it turns out there is no 
    additional context. If value is null, then this Unresolved is not valid at
    all without additional context.
    ============================================================================
    def value:Value?
    
    constructor(position:Position, description:String, value:Value?) {
        super.constructor(position, 
                new UnresolvedType("unresolved:\{description}", position))
        self.value := value
    }

    ============================================================================
    Reports an attempt to use this Unresolved in an invalid state.
    ============================================================================
    @abstract
    method reportError(context:Context)

    @override
    function isValid():Bit {
        return value != null
    }

    @override
    method checkValid(context:Context):Bit {
        if isValid()
            return true
        reportError(context)
        return false
    }

    @override
    method preferredType(context:Context, preferImmutable:Bit):Type {
        return value->Value.preferredType(context)
    }

    @override
    method preferredVariableType(context:Context, preferImmutable:Bit):Type {
        return value->Value.preferredVariableType(context)
    }

    @override
    function implicitCastCost(context:Context, t:Type):Int? {
        if value = null
            return null
        return value.type.implicitCastCost(context, t)
    }

    @override
    method implicitCast(position:Position, context:Context, t:Type):Value {
        if !checkValid(context)
            return new Dummy(position, t)
        return value->Value.implicitCast(position, context, t)
    }

    @override
    function canExplicitCastTo(context:Context, t:Type):Bit {
        return value != null & value.canExplicitCastTo(context, t)
    }

    @override
    method explicitCast(position:Position, context:Context, t:Type):Value {
        if !checkValid(context)
            return new Dummy(position, t)
        return value->Value.explicitCast(position, context, t)
    }

    @protected
    @override
    function findConverter(context:Context, t:Type):MethodStub? {
        if value = null
            return null
        return value.findConverter(context, t)
    }
}