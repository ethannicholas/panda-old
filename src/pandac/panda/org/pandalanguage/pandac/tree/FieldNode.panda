package org.pandalanguage.pandac.tree

uses org.pandalanguage.pandac.compiler.ASTGenerator
uses org.pandalanguage.pandac.types.GenericType
uses org.pandalanguage.pandac.types.Type

================================================================================
Represents a (class or instance) field of a class.
================================================================================
class FieldNode : Variable {
    constant PROPERTY_PREFIX:String := "_"
    constant CLASS_INITED_NAME := "$classInited"
    constant ELEMENTS_NAME := "<element>"
    
    ============================================================================
    The annotations attached to this field.
    ============================================================================
    var annotations := new Annotations()

    ============================================================================
    The contents of the doccomment attached to the field, or `null` if none.
    ============================================================================
    var doccomment:String?

    constructor(name:String, type:Type) {
        super.constructor(name, type)
    }

    constructor(position:Position, name:String, type:Type) {
        super.constructor(position, name, type)
    }
    
    function owner():ClassNode {
        return parent->(ClassNode)
    }

    function initialValue():Value? {
        if length > 0
            return self[0]->(Value)
        else
            return null
    }

    @self
    @pre(length = 0)
    method initialValue:=(v:Value) {
        add(v)
    }
    
    function unwrap():FieldNode {
        return self
    }

    @override
    method markLive() {
        if !live {
            super.markLive()
            type.markLive()
            if annotations.isThread {
                -- ugh I can't wait to implement a better system for 
                -- threadlocals
                var fieldTarget := name + ASTGenerator.INDEX_SUFFIX
                var methodTarget := 
                        ASTGenerator.getThreadLocalInitializerName(self)
                for child in owner.children {
                    if child-?>(FieldNode) {
                        var f := child->(FieldNode)
                        if f.name = fieldTarget
                            f.markLive()
                    }
                    else if child-?>(MethodNode) {
                        var m := child->(MethodNode)
                        if m.name = methodTarget
                            m.markLive()
                    }
                }
            }
        }
    }

    @override
    function format(fmt:String):String {
        return name
    }
}