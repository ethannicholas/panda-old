package org.pandalanguage.pandac.tree

uses org.pandalanguage.pandac.ast.ASTExpression
uses org.pandalanguage.pandac.compiler.StubGenerator
uses org.pandalanguage.pandac.compiler.SymbolTable
uses org.pandalanguage.pandac.stubs.Methods
uses org.pandalanguage.pandac.types.ClassType
uses org.pandalanguage.pandac.types.GenericType
uses org.pandalanguage.pandac.types.Type

class FieldNode : Variable {
    constant PROPERTY_PREFIX:String := "_"

    constant CLASS_INITED_NAME := "$classInited"
    
    constant ELEMENTS_NAME := "<element>"

    def owner:ClassType

    ============================================================================
    The field's initial value.
    ============================================================================
    def initialValue:ASTExpression?

    ============================================================================
    If the field is being initialized as a single element from a tuple, this is
    the index of the tuple element.
    ============================================================================
    def tuplePosition:Int?

    ============================================================================
    The annotations attached to the field.
    ============================================================================
    def annotations:Annotations

    def base:FieldNode?

    init(position:Position, owner:ClassType, name:String, 
            annotations:Annotations, kind:Kind, type:Type, 
            initialValue:ASTExpression?, tuplePosition:Int?) {
        init(position, owner, name, annotations, kind, type, initialValue,
                tuplePosition, null)
    }

    init(position:Position, owner:ClassType, name:String, 
            annotations:Annotations, kind:Kind, type:Type, 
            initialValue:ASTExpression?, tuplePosition:Int?, base:FieldNode?) {
        super.init(position, name, type, kind)
        assert name != "self" : "creating field named 'self'"
        self.owner := owner
        self.initialValue := initialValue
        self.annotations := annotations
        self.tuplePosition := tuplePosition
        self.base := base
    }

    ============================================================================
    Given a child type, finds a parent type among its ancestors and interfaces.
    For instance, finding Iterable within Array<String> would return 
    Iterable<String>.
    ============================================================================
    @class
    function findType(stubGenerator:StubGenerator, child:ClassType, 
            parentBase:ClassType):ClassType? {
        if child = parentBase | 
                (child-?>GenericType & child->GenericType.base = parentBase) {
            return child
        }
        def stub := stubGenerator.getStub(child)
        var result:ClassType? := null
        if stub.superclass != null {
            result := findType(stubGenerator, stub.superclass, parentBase)
            if result != null {
                return result
            }
        }
        for intf in child.allInterfaces(stubGenerator) {
            if intf = child {
                continue
            }
            result := findType(stubGenerator, intf, parentBase)
            if result != null {
                return result
            }
        }
        return null
    }

    function forType(stubGenerator:StubGenerator, type:GenericType):FieldNode {
        if owner-?>GenericType {
            def found := findType(stubGenerator, type, owner->GenericType.base)
            assert found-?>GenericType
            return stubGenerator.getSymbolTable(found)[name]->FieldNode
        }
        def symbols := SymbolTable()
        def ownerStub := stubGenerator.getStub(owner)
        if ownerStub.genericParameters != null {
            for (i, g) in ownerStub.genericParameters.enumeration {
                def base:String
                if owner-?>GenericType {
                    base := owner->GenericType.base.name
                }
                else {
                    base := owner.name
                }
                symbols.add(base + "." + g[0], 
                        TypeSymbol(type.parameters[i]))
            }
        }
        def newType := GenericType.getType(self.type, symbols)
        return FieldNode(position, type, name, annotations, kind, newType,
                initialValue, tuplePosition, self)
    }
}