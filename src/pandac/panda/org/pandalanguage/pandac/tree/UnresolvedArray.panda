package org.pandalanguage.pandac.tree

uses org.pandalanguage.pandac.compiler.Context
uses org.pandalanguage.pandac.types.CharType
uses org.pandalanguage.pandac.types.ClassType
uses org.pandalanguage.pandac.types.GenericType
uses org.pandalanguage.pandac.types.NullableType
uses org.pandalanguage.pandac.types.NullType
uses org.pandalanguage.pandac.types.PrimitiveArrayType
uses org.pandalanguage.pandac.types.RealLiteralType
uses org.pandalanguage.pandac.types.RealType
uses org.pandalanguage.pandac.types.StringOrCharType
uses org.pandalanguage.pandac.types.Type
uses org.pandalanguage.pandac.types.UnresolvedType

================================================================================
Represents an array created with the array literal syntax, e.g. `[1, 2, 3]`.
`UnresolvedArray` is turned into a concrete array value once its type is 
determined.
================================================================================
class UnresolvedArray : UnresolvedValue {
    def values:List<Value>

    init(context:Context, position:Position, values:ListView<Value>) {
        super.init(position, "<array>", getValue(context, position,
        		values))
        self.values := Array<Value>(values)
    }

    @class
    function getElementType(context:Context, values:ListView<Value>, 
            variableType:Bit, preferImmutable:Bit):Type? {
        var elementType:Type
        if values.length = 0
            elementType := NullableType.ANY
        else {
            if values[0].isValid {
                elementType := values[0].preferredType(context, preferImmutable)
                for i in 1 .. values.length {
                    def v := values[i]
                    if v.isValid {
                        elementType := Type.union(context, elementType, 
                                v.preferredType(context, preferImmutable), true)
                    }
                    else
                        return null
                }
            }
            else
                return null
        }
        if variableType
            elementType := elementType.preferredVariableType
        if elementType = StringOrCharType.STRING_OR_CHAR
            elementType := CharType.CHAR
        else if elementType = NullType.NULL
            elementType := NullableType.ANY
        else if elementType = RealLiteralType.REAL_LITERAL
            elementType := RealType.REAL64
        return elementType
    }

    @class
    method getValue(context:Context, position:Position, 
    		values:ListView<Value>):Value? {
        def elementType:Type? := getElementType(context, values, false, false)
        if elementType = null
            return null
        def type := context.resolveType(GenericType(ClassType.ARRAY, 
                [elementType]).name)->GenericType
        def casted := Array<Value>()
        for v in values
            casted.add(v.implicitCast(context, elementType))
        return context.createArrayLiteral(position, type, casted)
    }

    function isCollection(context:Context, base:ClassType):Bit {
        if base = ClassType.ARRAY | base = ClassType.IMMUTABLE_ARRAY
            return true
        def interfaces := context.getStub(base).allInterfaces(context)
        for intf in interfaces {
            def intfBase:Type
            if intf.type-?>GenericType
                intfBase := intf.type->GenericType.base
            else
                intfBase := intf.type
            if base = intfBase
                return true
        }
        return false
    }

    @override
    method preferredType(context:Context, preferImmutable:Bit):Type {
        def elementType:Type? := getElementType(context, values, false,
                preferImmutable)
        if elementType = null
            return ClassType.OBJECT
        if preferImmutable & elementType.isImmutable(context)
            return context.resolveType(GenericType(ClassType.IMMUTABLE_ARRAY, [elementType]).name)
        else
            return context.resolveType(GenericType(ClassType.ARRAY, [elementType]).name)
    }

    @override
    method preferredVariableType(context:Context, preferImmutable:Bit):Type {
        var elementType:Type? := getElementType(context, values, true,
                preferImmutable)
        if elementType = null
            return ClassType.OBJECT
        elementType := elementType.preferredVariableType
        if preferImmutable & elementType.isImmutable(context)
            return context.resolveType(GenericType(ClassType.IMMUTABLE_ARRAY, [elementType]).name)
        else
            return context.resolveType(GenericType(ClassType.ARRAY, [elementType]).name)
    }

    @override
    function implicitCastCost(context:Context, t:Type):Int? {
        if !t.isPrimitive {
            var stub := context.getStub(t.convert()->ClassType)
            loop {
                if stub.type-?>GenericType {
                    def g := stub.type->GenericType.base
                    if isCollection(context, g) {
                        def elementType := stub.type->GenericType.parameters[0]
                        var result := 0
                        if g = ClassType.LIST_VIEW
                            result += 2
                        else if g = ClassType.ARRAY
                            result += 1
                        for v in values {
                            def cost := v.implicitCastCost(context, elementType)
                            if cost = null
                                return null
                            result += cost
                        }
                        return result
                    }
                }
                def parent := stub.superclass
                if parent != null
                    stub := context.getStub(parent)
                else
                    break
            }
        }
        return value->Value.type.implicitCastCost(context, t)
    }

    @override
    method implicitCast(position:Position, context:Context, t:Type):Value {
        if !t.isPrimitive {
            var stub := context.getStub(t.convert()->ClassType)
            loop {
                if stub.type-?>GenericType {
                    def g := stub.type->GenericType.base
                    if isCollection(context, g) {
                        def elementType := 
                                stub.type->GenericType.parameters[0]
                        def casted := Array<Value>()
                        for v in values {
                            casted.add(v.implicitCast(position, context, 
                                    elementType))
                        }
                        return context.createArrayLiteral(position, 
                                stub.type->GenericType, casted)
                    }
                }
                def parent := stub.superclass
                if parent != null
                    stub := context.getStub(parent)
                else
                    break
            }
        }
        return value->Value.implicitCast(position, context, t)
    }

    @override
    method reportError(context:Context) {
    	for v in values
            v.checkValid(context)
    }
}