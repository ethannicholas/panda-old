package org.pandalanguage.pandac.tree

uses org.pandalanguage.pandac.compiler.Context
uses org.pandalanguage.pandac.stubs.MethodStub
uses org.pandalanguage.pandac.types.Type
uses org.pandalanguage.pandac.types.VoidType

choice MethodNodeType {
    METHOD,
    FUNCTION,
    INIT
}

class MethodNode : Node {
    constant INIT_NAME       := "init"

    constant MAIN_NAME       := "main"
 
    constant START_NAME      := "start"
 
    constant CONVERT_NAME    := "convert"
 
    constant FINALIZE_NAME   := "finalize"
 
    constant CLASS_INIT_NAME := "$classInit"

    constant CLOSURE_NAME    := "closure"

    def stub:MethodStub

    def parameters:ImmutableArray<Parameter>

    def body:Block

    def localVariables:ImmutableArray<LocalVariable>

    init(stub:MethodStub, body:Block, parameters:ListView<Parameter>,
            localVariables:ListView<LocalVariable>) {
        super.init(stub.position)
        self.stub := stub
        self.body := body
        self.parameters := ImmutableArray<Parameter>(parameters)
        self.localVariables := ImmutableArray<LocalVariable>(localVariables)
    }

    @override
    function convert():String {
        def result := MutableString()
        switch stub.methodType {
            case MethodNodeType.METHOD: result.append("method ")
            case MethodNodeType.FUNCTION: result.append("function ")
            case MethodNodeType.INIT: { }
            default: unreachable
        }
        result.append(stub.name)
        result.append("(")
        var start:Int
        if stub.annotations.isClass
            start := 0
        else
            start := 1
        for i in start .. stub.parameters.count {
            if i > start
                result.append(", ")
            result.append(stub.parameters[i].name)
            result.append(":")
            result.append(stub.parameters[i].type.name)
            if stub.parameters[i].isVarArg
                result.append("...")
        }
        result.append(")")
        if stub.returnType != VoidType.VOID {
            result.append(":")
            result.append(stub.returnType.name)
        }
        result.append(" {\n")
        for v in localVariables {
            switch v.kind {
                case Variable.Kind.DEF: result.append("def ")
                case Variable.Kind.VAR: result.append("var ")
                case Variable.Kind.CONSTANT: result.append("constant ")
            }
            result.append("\{v.name}:\{v.type.displayName}\n")
        }
        result.append(body->Node)
        result.append("\n}")
        return result.convert()
    } 
}