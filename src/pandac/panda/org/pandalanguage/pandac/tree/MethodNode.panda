package org.pandalanguage.pandac.tree

uses org.pandalanguage.pandac.stubs.MethodStub
uses org.pandalanguage.pandac.types.Type
uses org.pandalanguage.pandac.types.VoidType

enum MethodNodeType {
    METHOD,
    FUNCTION,
    CONSTRUCTOR
}

class MethodNode : Node {
    constant CONSTRUCTOR_NAME := "constructor"

    constant MAIN_NAME        := "main"
 
    constant START_NAME       := "start"
 
    constant CONVERT_NAME     := "->>"
 
    constant FINALIZE_NAME    := "finalize"
 
    constant CLASS_INIT_NAME  := "$classInit"

    def stub:MethodStub

    def parameters:ImmutableArray<Parameter>

    def body:Block

    def localVariables:ImmutableArray<LocalVariable>

    constructor(stub:MethodStub, body:Block, 
            localVariables:ListView<LocalVariable>) {
        super.constructor(stub.position)
        self.stub := stub
        self.body := body
        def parameters := new Array<Parameter>()
        for p in stub.parameters {
            parameters.add(new Parameter(p.position, p.name, p.type, p.isVar, 
                    p.isConvert, p.isVarArg))
        }
        self.parameters := new ImmutableArray<Parameter>(parameters)
        self.localVariables := new ImmutableArray<LocalVariable>(localVariables)
    }

    @override
    function format(fmt:String):String {
        def result := new MutableString()
        switch stub.methodType {
            case MethodNodeType.METHOD: result.append("method ")
            case MethodNodeType.FUNCTION: result.append("function ")
            case MethodNodeType.CONSTRUCTOR: { }
            default: unreachable
        }
        result.append(stub.name)
        result.append("(")
        var start:Int
        if stub.annotations.isClass
            start := 0
        else
            start := 1
        for i in start .. stub.parameters.length {
            if i > start
                result.append(", ")
            result.append(stub.parameters[i].name)
            if stub.parameters[i].isConvert
                result.append("->>")
            else
                result.append(":")
            result.append(stub.parameters[i].type.name)
            if stub.parameters[i].isVarArg
                result.append("...")
        }
        result.append(")")
        if stub.returnType != VoidType.VOID {
            result.append(":")
            result.append(stub.returnType.name)
        }
        result.append(" {\n")
        for v in localVariables {
            switch v.varType {
                case VariableType.DEF: result.append("def ")
                case VariableType.VAR: result.append("var ")
                case VariableType.CONSTANT: result.append("constant ")
            }
            result.append("\{v.name}:\{v.type.displayName}\n")
        }
        result.append(body->(Node))
        result.append("\n}")
        return result->>(String)
    }
}