package org.pandalanguage.pandac.tree

uses org.pandalanguage.pandac.types.Type

enum MethodNodeType {
    METHOD,
    FUNCTION,
    CONSTRUCTOR
}

class MethodNode : Node {
    ============================================================================
    The method's name.
    ============================================================================
    def name:String

    ============================================================================
    The method's formal parameters.
    ============================================================================
    def parameters:ImmutableArray<Parameter>

    ============================================================================
    The method's return type.
    ============================================================================
    def returnType:Type?

    ============================================================================
    The annotations attached to this method.
    ============================================================================
    def annotations:Annotations

    constructor(position:Position, name:String, parameters:ListView<Parameter>,
            returnType:Type?, annotations:Annotations, block:Block?) {
        super.constructor(position, wrap(block))
        self.name := name
        self.parameters := new ImmutableArray<Parameter>(parameters)
        self.returnType := returnType
        self.annotations := annotations
    }

    @private
    @class
    function wrap(b:Block?):Array<Node> {
        def result := new Array<Node>()
        if b != null
            result.add(b)
        return result
    }

    function block():Block? {
        if length > 0
            return self[0]->(Block)
        return null
    }
}