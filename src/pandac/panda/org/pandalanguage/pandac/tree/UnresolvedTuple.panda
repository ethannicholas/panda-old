package org.pandalanguage.pandac.tree

uses org.pandalanguage.pandac.compiler.Context
uses org.pandalanguage.pandac.tree.Tuple
uses org.pandalanguage.pandac.types.PrimitiveArrayType
uses org.pandalanguage.pandac.types.ClassType
uses org.pandalanguage.pandac.types.TupleType
uses org.pandalanguage.pandac.types.Type
uses org.pandalanguage.pandac.types.UnresolvedType

================================================================================
Represents an as-yet-unresolved tuple literal.
================================================================================
class UnresolvedTuple : UnresolvedValue {
    def values:ListView<Value>

    @pre(values.length > 1)
    init(context:Context, position:Position, values:ListView<Value>) {
        super.init(position, "tuple", getTuple(context, position, 
                values))
        self.values := Array<Value>(values)
    }

    @override
    function implicitCastCost(context:Context, t:Type):Int? {
        if t.isTuple {
            def types := t.unwrapNullable->TupleType.types
            if types.length != values.length
                return null
            var total := 0
            for (i, v) in values.enumeration() {
                def cost := v.implicitCastCost(context, types[i])
                if cost = null
                    return null
                total += cost
            }
            return total
        }    
        return super.implicitCastCost(context, t)    
    }

    @override
    method implicitCast(position:Position, context:Context, t:Type):Value {
        def finalValues := Array<Value>()
        def unwrapped := t.unwrapNullable
        def tupleType:TupleType
        if unwrapped.isTuple
            tupleType := unwrapped.unwrapNullable->TupleType
        else
            tupleType := preferredVariableType(context)->TupleType
        for (i, v) in values.enumeration() {
            finalValues.add(v.implicitCast(v.position, context, 
                    tupleType.types[i]))
        }
        def tuple := context.call(position, 
                ClassLiteral(position, tupleType), 
                MethodNode.INIT_NAME, finalValues)->MethodCall
        return Construct(tuple).implicitCast(tuple.position, 
                context, t)
    }

    @override
    method explicitCast(position:Position, context:Context, t:Type):Value {
        def finalValues := Array<Value>()
        def unwrapped := t.unwrapNullable
        def tupleType:TupleType
        if unwrapped.isTuple
            tupleType := unwrapped.unwrapNullable->TupleType
        else
            tupleType := preferredVariableType(context)->TupleType
        for (i, v) in values.enumeration() {
            finalValues.add(v.explicitCast(v.position, context, 
                    tupleType.types[i]))
        }
        def tuple := context.call(position, 
                ClassLiteral(position, tupleType), 
                MethodNode.INIT_NAME, finalValues)
        assert tuple != null
        return tuple.explicitCast(tuple.position, context, t)
    }

    @private
    @class
    method getTuple(context:Context, position:Position, 
            values:ListView<Value>):Value? {
        def types := Array<Type>()
        def finalValues := Array<Value>()
        for v in values {
            if !v.isValid
                return null
            def type := v.preferredVariableType(context)
            types.add(type)
            finalValues.add(v.implicitCast(v.position, context, type))
        }
        def type := TupleType(types)
        def result := context.call(position, ClassLiteral(position, type), 
                MethodNode.INIT_NAME, finalValues)
        return Construct(result->MethodCall)
    }

    @override
    method reportError(context:Context) {
        unreachable
    }
}