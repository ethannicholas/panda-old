package org.pandalanguage.pandac.tree

uses org.pandalanguage.pandac.ast.ASTBlock
uses org.pandalanguage.pandac.ast.ASTExpression
uses org.pandalanguage.pandac.ast.ASTMethodValue
uses org.pandalanguage.pandac.ast.ASTParameter
uses org.pandalanguage.pandac.ast.ASTReturn
uses org.pandalanguage.pandac.ast.ASTStatement
uses org.pandalanguage.pandac.ast.ASTType
uses org.pandalanguage.pandac.compiler.Context
uses org.pandalanguage.pandac.compiler.Dummy
uses org.pandalanguage.pandac.compiler.ErrorReporter
uses org.pandalanguage.pandac.compiler.IRGenerator
uses org.pandalanguage.pandac.compiler.SymbolTable
uses org.pandalanguage.pandac.stubs.Methods
uses org.pandalanguage.pandac.stubs.MethodStub
uses org.pandalanguage.pandac.types.ClassType
uses org.pandalanguage.pandac.types.GenericType
uses org.pandalanguage.pandac.types.MethodType
uses org.pandalanguage.pandac.types.NullableType
uses org.pandalanguage.pandac.types.PrimitiveArrayType
uses org.pandalanguage.pandac.types.StringOrCharType
uses org.pandalanguage.pandac.types.Type
uses org.pandalanguage.pandac.types.UnresolvedType
uses org.pandalanguage.pandac.types.VoidType

class DummyErrorReporter : ErrorReporter {
    @override
    method error(message:String, position:Position) {
    }

    @override
    method warning(message:String, position:Position) {
    }
}

class UnresolvedLambda : UnresolvedValue {
    def parameterNames:ImmutableArray<String>

    def parameterTypes:Array<Type?>

    def expression:ASTExpression

    @pre(parameterNames.count = parameterTypes.count)
    init(context:Context, position:Position, 
            parameterNames:ListView<String>, parameterTypes:ListView<Type?>,
            expression:ASTExpression, value:Value?) {
        super.init(position, "<lambda>", value)
        self.parameterNames := ImmutableArray<String>(parameterNames)
        self.parameterTypes := Array<Type?>(parameterTypes)
        self.expression := expression
    }

    method determineReturnValue(context:Context, types:ListView<Type>):Value? {
        def ir := IRGenerator(context.root, context.classes,
                context.stubGenerator, context.compilerSettings,
                DummyErrorReporter())
        ir.context.pushSymbolTable(SymbolTable([context.symbolTable]))
        def dummyMethod := MethodStub(position, "<lambda dummy method>", 
                Annotations(position), MethodNodeType.METHOD, [], null, 
                VoidType.VOID, ASTBlock(position, []), 
                context.currentMethod.owner)
        ir.context.captures.push((dummyMethod, HashSet<Variable>()))
        def old := ir.context.currentMethod
        ir.context.currentMethod := dummyMethod
        for (i, t) in types.enumeration {
            ir.context.symbolTable.add(LocalVariable(
                    position, parameterNames[i], t, Variable.Kind.DEF,
                    dummyMethod))
        }
        def result := ir.convertExpression(expression)
        ir.context.captures.pop()
        ir.context.currentMethod := old
        if result != null
            return result
        return null
    }

    @override
    @unsafeFunction
    function implicitCastCost(context:Context, t:Type):Int? {
        if t.isMethod {
            def m := t.convert()->MethodType
            def types := Array<Type>()
            for (i, p) in parameterTypes.enumeration {
                if p != null & p != m.methodParameters[i]
                    return null
                types.add(m.methodParameters[i])
            }
            def returnValue := determineReturnValue(context, types)
            if returnValue != null
                return returnValue.implicitCastCost(context, m.returnType)
            return null
        }
        if value = null
            return null
        return value->Value.implicitCastCost(context, t)
    }

    @override
    method implicitCast(position:Position, context:Context, t:Type):Value {
        if value != null & value.type = t
            return value
        if t.isMethod {
            def m := t.convert()->MethodType
            def parameters := Array<ASTParameter>()
            for (i, name) in parameterNames.enumeration {
                parameters.add(ASTParameter(position, name, 
                        IRGenerator.toASTType(position, m.methodParameters[i]), 
                        false, false))
            }
            def statements := Array<ASTStatement>()
            statements.add(ASTReturn(position, expression))
            def body := ASTBlock(position, statements)
            def methodValue := ASTMethodValue(position, 
                    MethodNodeType.FUNCTION, parameters, 
                    IRGenerator.toASTType(position, m.returnType), body)
            def result := context.irGenerator.convertMethodValue(methodValue)
            if result = null
                return Dummy(position, t)
            return result.implicitCast(position, context, t)
        }
        else
            return super.implicitCast(position, context, t)
    }

    @override
    function canExplicitCastTo(context:Context, t:Type):Bit {
        return implicitCastCost(context, t) != null
    }

    @override
    method reportError(context:Context) {
    	context.errors.error("lambda parameter type" +
                "\{parameterNames.count = 1: is|s are} not specified, and " +
                "cannot be determined from context", position)
    }

    @override
    function convert():String {
        def result := MutableString()
        for (i, name) in parameterNames.enumeration {
            if i > 0
                result.append(", ")
            result.append(name)
            def type := parameterTypes[i]
            if type != null
                result.append(":\{type}")
        }
        result.append(" => ")
        result.append(expression)
        return result.convert()
    }
}