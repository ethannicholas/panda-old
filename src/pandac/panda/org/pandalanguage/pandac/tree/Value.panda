package org.pandalanguage.pandac.tree

uses org.pandalanguage.pandac.ast.ASTBlock
uses org.pandalanguage.pandac.ast.ASTCallExpression
uses org.pandalanguage.pandac.ast.ASTExpression
uses org.pandalanguage.pandac.ast.ASTExpressionStatement
uses org.pandalanguage.pandac.ast.ASTIdentifier
uses org.pandalanguage.pandac.ast.ASTLambdaExpression
uses org.pandalanguage.pandac.ast.ASTMethodValue
uses org.pandalanguage.pandac.ast.ASTParameter
uses org.pandalanguage.pandac.ast.ASTReturn
uses org.pandalanguage.pandac.ast.ASTStatement
uses org.pandalanguage.pandac.ast.ASTTypedIdentifier
uses org.pandalanguage.pandac.ast.ASTValueWrapper
uses org.pandalanguage.pandac.compiler.Context
uses org.pandalanguage.pandac.compiler.Dummy
uses org.pandalanguage.pandac.compiler.IRGenerator
uses org.pandalanguage.pandac.compiler.ErrorReporter
uses org.pandalanguage.pandac.stubs.MethodStub
uses org.pandalanguage.pandac.types.ClassType
uses org.pandalanguage.pandac.types.MethodType
uses org.pandalanguage.pandac.types.NullableType
uses org.pandalanguage.pandac.types.NullType
uses org.pandalanguage.pandac.types.PrimitiveType
uses org.pandalanguage.pandac.types.Type
uses org.pandalanguage.pandac.types.UnresolvedType
uses org.pandalanguage.pandac.types.WrapperType
uses org.pandalanguage.pandac.types.VoidType

================================================================================
Represents a value in an expression, such as `5` or `foo() * 6`.
================================================================================
@abstract
class Value : Node {
    def type:Type

    init(position:Position, type:Type) {
        super.init(position)
        self.type := type
    }
    
    @final
    method preferredType(context:Context):Type {
        return preferredType(context, false)
    }

    method preferredType(context:Context, preferImmutable:Bit):Type {
        assert type-!>UnresolvedType : 
                "'\{self}':\{class.name} has unresolved type at \{position}"
        return type
    }
    @post(@return-!>UnresolvedType)

    @final
    method preferredVariableType(context:Context):Type {
        return preferredVariableType(context, false)
    }

    method preferredVariableType(context:Context, preferImmutable:Bit):Type {
        return preferredType(context, preferImmutable).preferredVariableType
    }

    property isValid:Bit

    @protected
    function get_isValid():Bit {
        return true
    }

    ============================================================================
    If this value is potentially usable, returns `null`. If this value is not
    and never will be valid, returns an error message.

    For instance, `value[5]` when `value` does not implement the `[]` operator
    will never be valid, because it is an invalid reference. We still
    need to be able to represent it as a value, because `value` might implement
    the `[]:=` operator and `value[5]` might be on the left-hand-side of a `:=`
    operator. So when processing `value[5] := 10`, we temporarily represent
    `value[5]` as a non-`valid()` value before replacing it with the final
    call to `[]:=()`.
    ============================================================================
    method checkValid(context:Context):Bit {
        return true
    }

    @final
    function canImplicitCastTo(context:Context, t:Type):Bit {
        return implicitCastCost(context, t) != null
    }

    @pre(t-!>UnresolvedType)
    function implicitCastCost(context:Context, t:Type):Int? {
        return type.implicitCastCost(context, t)
    }

    @final
    @pre(t-!>UnresolvedType)
    method implicitCast(context:Context, t:Type):Value {
        return implicitCast(position, context, t)
    }

    @protected
    method reportCastError(context:Context, target:Type) {
        context.errors.error("expected '\{target.displayName}', but found " +
                "'\{type.displayName}'", position)
    }

    @private
    @pre(type-?>MethodType)
    method shim(context:Context, t:MethodType):Value {
        def shimParams := Array<ASTParameter>()
        def callParams := Array<ASTExpression>()
        for (i, p) in t.methodParameters.enumeration {
            def name := "$p\{i}"
            shimParams.add(ASTParameter(position, name, 
                    IRGenerator.toASTType(position, p), false, false))
            callParams.add(ASTIdentifier(position, name))
        }
        -- seriously hacky. We need to reference the current value from within
        -- the closure, but it's a Value and not an ASTExpression. Even if we
        -- wrap it using ASTValueWrapper, it's too late to figure out what the
        -- captures are. So we create a dummy value, let that get captured, and
        -- then replace the dummy value in the Closure constructor with the
        -- actual value.
        def captureName := "$capture\{IRGenerator.nameCount}"
        IRGenerator.nameCount += 1
        def captureDummy := LocalVariable(position, captureName, type,
                Variable.Kind.DEF, context.currentMethod)
        context.pushSymbolTable()
        context.symbolTable.add(captureDummy)
        def call := ASTCallExpression(ASTIdentifier(position, captureName), 
                callParams)
        def methodNodeType:MethodNodeType
        if t.isFunction
            methodNodeType := MethodNodeType.FUNCTION
        else
            methodNodeType := MethodNodeType.METHOD
        def statement:ASTStatement
        if t.returnType != VoidType.VOID
            statement := ASTReturn(position, call)
        else
            statement := ASTExpressionStatement(call)
        def closure := ASTMethodValue(position, methodNodeType, shimParams, 
                IRGenerator.toASTType(position, t.returnType), 
                ASTBlock(position, [statement]))
        def result := context.irGenerator.convertMethodValue(closure)
        if result = null {
            context.popSymbolTable()
            return Dummy(position, t)
        }
        def closure := IRGenerator.unwrapCast(result.implicitCast(
                position, context, t))->Closure
        context.popSymbolTable()
        def construct := closure.instance.initCall
        return Closure(position, Construct(MethodCall(position, 
                construct.target, construct.methodStub, [self])), t)
    }

    method implicitCast(position:Position, context:Context, t:Type):Value {
        assert t != VoidType.VOID : "casting \{self} to void in \{context.currentMethod.owner}:\{context.currentMethod} at \{position}"
        if !checkValid(context) {
            return Dummy(position, t)
        }
        if t = type
            return self
        if type.isPrimitive & !t.isPrimitive
            return wrapped(context, t, false)
        if type.isNullable & !t.isNullable {
            def base := type->NullableType.base
            if base != t {
                def nonNull := implicitCast(position, context, base)
                return nonNull.implicitCast(position, context, t)
            }
            return Cast(position, self, t, CastType.IMPLICIT)
        }
        if !type.isNullable & t.isNullable {
            def first := implicitCast(position, context, t->NullableType.base)
            def result := Cast(position, first, t, CastType.IMPLICIT)
            result.safe := true
            return result
        }
        if type.isWrapper & (t.isPrimitive | t.isWrapper)
            return unwrap(context).implicitCast(position, context, t)
        if type.isMethod & t.isMethod {
            def m1 := type.convert()->MethodType
            def m2 := t.convert()->MethodType
            if m1.methodParameters != m2.methodParameters | 
                    m1.returnType != m2.returnType
                return shim(context, m2)
        }
        def result := Cast(position, self, t, CastType.IMPLICIT)
        result.safe := true
        if implicitCastCost(context, t) != null
            return result
        else {
            reportCastError(context, t)
            return result
        }
    }
    @post(@return.type = t)

    function canExplicitCastTo(context:Context, t:Type):Bit {
        return type.canExplicitCastTo(context, t)
    }

    @final
    method explicitCast(context:Context, t:Type):Value {
        return explicitCast(position, context, t)
    }

    method explicitCast(position:Position, context:Context, var t:Type):Value {
        if t = type
            return self
        if canImplicitCastTo(context, t) {
            def cast := implicitCast(position, context, t)
            return IRGenerator.makeExplicit(cast)
        }
        if type.isPrimitive & !t.isPrimitive
            return wrapped(context, t, true)
        if type.isWrapper & (t.isPrimitive | t.isWrapper)
            return unwrap(context).explicitCast(position, context, t)
        if !type.isPrimitive & t.isPrimitive
            t := t.convert()->WrapperType
        def result := Cast(position, self, t, CastType.EXPLICIT)
        if !canExplicitCastTo(context, t) {
            context.errors.error("'\{type.displayName}' cannot possibly be " +
                    "instance of '\{t.displayName}'", position)
            
        }
        return result
    }
    @post(@return.type = t)

    @private
    @pre(type.isPrimitive)
    method wrapped(context:Context, t:Type, explicit:Bit):Value {
        def wrapper:WrapperType
        if t.isWrapper
            wrapper := t.convert()->WrapperType
        else
            wrapper := type.convert()->WrapperType
        def params := Array<Value>()
        def cast:Value
        if explicit
            cast := explicitCast(context, wrapper.convert()->PrimitiveType)
        else
            cast := implicitCast(context, wrapper.convert()->PrimitiveType)
        params.add(cast)
        def initStub := context.getMethod(ClassLiteral(position, 
                wrapper), MethodNode.INIT_NAME, params, null)
        assert initStub != null : "could not find \{wrapper} " +
                "init for \{type}"
        context.liveMethods.add(initStub)
        def wrapperObject := Construct(MethodCall(position, 
                ClassLiteral(position, wrapper), initStub, params))
        if explicit
            return wrapperObject.explicitCast(position, context, t)
        else
            return wrapperObject.implicitCast(position, context, t)
    }

    @pre(type.isWrapper)
    method unwrap(context:Context):Value {
        def wrapper := implicitCast(position, context, type.convert()->WrapperType)
        def wrapperStub := context.getStub(wrapper.type->ClassType)
        def fields := wrapperStub.fields.filter(f => f.name = 'value')
        assert fields.count = 1 : 
                "expected exactly one field named 'value' in \{wrapperStub}"
        return FieldReference(position, wrapper, fields.iterator.next())
    }

    ============================================================================
    Returns `true` if this value is in its final form and has a known type. Some
    expressions depend upon context for their interpretation; these are 
    represented by unresolved values until we have more information. For 
    example, when parsing the expression `array[5]`, we can't simply represent 
    this as a call of the `[]` method on `array` - what if the next token is 
    `:=`? In that case we should actually be calling the `[]:=` method instead.
    So we store this value as an `UnresolvedArray` until we are sure how it 
    needs to be handled.
    ============================================================================
    function isResolved():Bit {
        return true
    }
}