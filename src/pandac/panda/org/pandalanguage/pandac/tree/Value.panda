package org.pandalanguage.pandac.tree

uses org.pandalanguage.pandac.compiler.Message
uses org.pandalanguage.pandac.types.Type

@abstract
class Value : Node {
    def type:Type

    constructor(position:Position, type:Type) {
        super.constructor(position)
        self.type := type
    }
    
    constructor(position:Position, type:Type, child:Node) {
        super.constructor(position, child)
        self.type := type
    }

    constructor(position:Position, type:Type, children:ListView<Node>) {
        super.constructor(position, children)
        self.type := type
    }
    
    @final
    function preferredVariableType():Type {
        return preferredVariableType(false)
    }

    function preferredVariableType(preferImmutable:Bit):Type {
        return type
    }

    @final
    function canImplicitCastTo(t:Type):Bit {
        return implicitCastCost(t) != null
    }

    function implicitCastCost(t:Type):Int? {
        return type.implicitCastCost(t)
    }

    function implicitCast(t:Type):(Value, ListView<Message>?) {
        return implicitCast(position, t)
    }

    function implicitCast(position:Position, t:Type):
            (Value, ListView<Message>?) {
        if t = type
            return (self, null)
        def result := new Cast(self, t, CastType.IMPLICIT)
        if implicitCastCost(t) != null
            return (result, null)
        else {
            def messages := new Array<Message>()
            messages.add(new Message("expected '\{t.displayName}', but " +
                    "found '\{type.displayName}'", position))
            return (result, messages)
        }
    }
    @post(@return[0].type = t)

    function canExplicitCastTo(t:Type):Bit {
        return type.canExplicitCastTo(t)
    }

    function explicitCast(t:Type):(Value, ListView<Message>?) {
        return explicitCast(position, t)
    }

    function explicitCast(position:Position, t:Type):
            (Value, ListView<Message>?) {
        if t = type
            return (self, null)
        def result := new Cast(self, t, CastType.EXPLICIT)
        if canExplicitCastTo(t)
            return (result, null)
        else {
            def messages := new Array<Message>()
            messages.add(new Message("'\{t.displayName}' cannot possibly be " +
                    "an instance of '\{type.displayName}'", position))
            return (result, messages)
        }
    }
    @post(@return[0].type = t)
}