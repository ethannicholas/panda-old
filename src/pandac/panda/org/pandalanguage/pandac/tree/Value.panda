package org.pandalanguage.pandac.tree

uses org.pandalanguage.pandac.compiler.Context
uses org.pandalanguage.pandac.compiler.Dummy
uses org.pandalanguage.pandac.compiler.IRGenerator
uses org.pandalanguage.pandac.compiler.ErrorReporter
uses org.pandalanguage.pandac.stubs.MethodStub
uses org.pandalanguage.pandac.types.ClassType
uses org.pandalanguage.pandac.types.NullableType
uses org.pandalanguage.pandac.types.NullType
uses org.pandalanguage.pandac.types.PrimitiveType
uses org.pandalanguage.pandac.types.Type
uses org.pandalanguage.pandac.types.UnresolvedType
uses org.pandalanguage.pandac.types.WrapperType
uses org.pandalanguage.pandac.types.VoidType

================================================================================
Represents a value in an expression, such as `5` or `foo() * 6`.
================================================================================
@abstract
class Value : Node {
    def type:Type

    constructor(position:Position, type:Type) {
        super.constructor(position)
        self.type := type
    }
    
    @final
    method preferredType(context:Context):Type {
        return preferredType(context, false)
    }

    method preferredType(context:Context, preferImmutable:Bit):Type {
        assert type-!>(UnresolvedType) : 
                "'\{self}':\{class.name} has unresolved type at \{position}"
        return type
    }
    @post(@return-!>(UnresolvedType))

    @final
    method preferredVariableType(context:Context):Type {
        return preferredVariableType(context, false)
    }

    method preferredVariableType(context:Context, preferImmutable:Bit):Type {
        return preferredType(context, preferImmutable).preferredVariableType()
    }

    ============================================================================
    If this value is potentially usable, returns `null`. If this value is not
    and never will be valid, returns an error message.

    For instance, `value[5]` when `value` does not implement the `[]` operator
    will never be valid, because it is an invalid reference. We still
    need to be able to represent it as a value, because `value` might implement
    the `[]:=` operator and `value[5]` might be on the left-hand-side of a `:=`
    operator. So when processing `value[5] := 10`, we temporarily represent
    `value[5]` as a non-`valid()` value before replacing it with the final
    call to `[]:=()`.
    ============================================================================
    method checkValid(context:Context):Bit {
        return true
    }

    @final
    function canImplicitCastTo(context:Context, t:Type):Bit {
        return implicitCastCost(context, t) != null
    }

    @pre(t-!>(UnresolvedType))
    function implicitCastCost(context:Context, t:Type):Int? {
        return type.implicitCastCost(context, t)
    }

    @final
    @pre(t-!>(UnresolvedType))
    method implicitCast(context:Context, t:Type):Value {
        return implicitCast(position, context, t)
    }

    method implicitCast(position:Position, context:Context, t:Type):Value {
        if !checkValid(context) {
            return new Dummy(position, t)
        }
        if t = type
            return self
        if type.isPrimitive & !t.isPrimitive
            return wrapped(context, t, false)
        if type.isNullable & !t.isNullable {
            def base := type->(NullableType).base
            if base != t {
                def nonNull := implicitCast(position, context, base)
                return nonNull.implicitCast(position, context, t)
            }
            return new Cast(position, self, t, CastType.IMPLICIT)
        }
        if !type.isNullable & t.isNullable {
            def first := implicitCast(position, context, t->(NullableType).base)
            return new Cast(position, first, t, CastType.IMPLICIT)
        }
        if type.isWrapper & (t.isPrimitive | t.isWrapper)
            return unwrap(context).implicitCast(position, context, t)
        def result := new Cast(position, self, t, CastType.IMPLICIT)
        if implicitCastCost(context, t) != null
            return result
        else {
            context.errors.error("expected '\{t.displayName}', but found " +
                    "'\{type.displayName}'", position)
            return result
        }
    }
    @post(@return.type = t)

    function canExplicitCastTo(context:Context, t:Type):Bit {
        return type.canExplicitCastTo(context, t)
    }

    method explicitCast(context:Context, t:Type):Value {
        return explicitCast(position, context, t)
    }

    method explicitCast(position:Position, context:Context, var t:Type):Value {
        if t = type
            return self
        if canImplicitCastTo(context, t) {
            def cast := implicitCast(position, context, t)
            return IRGenerator.makeExplicit(cast)
        }
        if type.isPrimitive & !t.isPrimitive
            return wrapped(context, t, true)
        if type.isWrapper & (t.isPrimitive | t.isWrapper)
            return unwrap(context).explicitCast(position, context, t)
        if !type.isPrimitive & t.isPrimitive
            t := t->>(WrapperType)
        def result := new Cast(position, self, t, CastType.EXPLICIT)
        if !canExplicitCastTo(context, t) {
            context.errors.error("'\{type.displayName}' cannot possibly be " +
                    "instance of '\{t.displayName}'", position)
            
        }
        return result
    }
    @post(@return.type = t)

    @protected
    function findConverter(context:Context, t:Type):MethodStub? {
        var best := Int.MAX
        var bestMatch:MethodStub? := null
        def stub := context.getStub(type->>(ClassType))
        for m in stub.instanceMethods(context) {
            if m.name = MethodNode.CONVERT_NAME & m.returnType = t {
                if type.isPrimitive
                    best := 4
                else
                    return m
                bestMatch := m
            }
        }
        def targetStub := context.getStub(t->>(ClassType))
        def params := new Array<Value>()
        params.add(self)
        for m in targetStub.methods {
            if m.name = MethodNode.CONVERT_NAME & m.annotations.isClass & 
                    canImplicitCastTo(context, m.parameters[0].type) {
                def score := context.matchCost(self, m, params)
                if score != null & score < best {
                    best := score
                    bestMatch := m
                }
            }
        }
        return bestMatch
    }
    @post(@return = null | @return.returnType = t)

    function canConvertTo(context:Context, t:Type):Bit {
        if type.isPrimitive & t.isPrimitive {
            return canExplicitCastTo(context, t) |
                    t.canExplicitCastTo(context, type)
        }
        return findConverter(context, t) != null
    }

    method convert(context:Context, t:Type):Value {
        if type = VoidType.VOID {
            context.errors.error("expression does not have a value", position)
            return new Dummy(position, t)
        }
        if type = NullType.NULL {
            context.errors.error("'->>' operator cannot operate on null", 
                    position)
            return new Dummy(position, t)
        }
        if type.isNumeric & t.isNumeric {
            def initial := implicitCast(context, type->>(PrimitiveType))
            def target := t->>(PrimitiveType)
            if initial.type = target
                return initial
            return new Cast(position, initial, target, 
                    CastType.CONVERT).implicitCast(context, t)
        }
        def converter := findConverter(context, t)
        if converter != null {
            if converter.annotations.isClass {
                def params := new Array<Value>()
                def cast := implicitCast(context, 
                        converter.parameters[0].type)
                params.add(cast)
                return new MethodCall(position, new ClassLiteral(position,
                        converter.owner), converter, params)
            }
            else {
                def cast := implicitCast(context, converter.owner)
                return new MethodCall(position, cast, converter, 
                        new Array<Value>())
            }
        }
        context.errors.error("cannot convert '\{type.displayName}' to " +
                "'\{t.displayName}'", position)
        return new Dummy(position, t)
    }

    @private
    @pre(type.isPrimitive)
    method wrapped(context:Context, t:Type, explicit:Bit):Value {
        def wrapper:WrapperType
        if t.isWrapper
            wrapper := t->>(WrapperType)
        else
            wrapper := type->>(WrapperType)
        def params := new Array<Value>()
        def cast:Value
        if explicit
            cast := explicitCast(context, wrapper->>(PrimitiveType))
        else
            cast := implicitCast(context, wrapper->>(PrimitiveType))
        params.add(cast)
        def constructorStub := context.getMethod(new ClassLiteral(position, 
                wrapper), MethodNode.CONSTRUCTOR_NAME, params)
        assert constructorStub != null : "could not find \{wrapper} " +
                "constructor for \{type}"
        def wrapperObject := new Construct(new MethodCall(position, 
                new ClassLiteral(position, wrapper), constructorStub, params))
        if explicit
            return wrapperObject.explicitCast(position, context, t)
        else
            return wrapperObject.implicitCast(position, context, t)
    }

    @private
    @pre(type.isWrapper)
    method unwrap(context:Context):Value {
        def wrapper := implicitCast(position, context, type->>(WrapperType))
        def wrapperStub := context.getStub(wrapper.type->(ClassType))
        def fields := wrapperStub.fields.filter(f => f.name = 'value')
        assert fields.length = 1 : 
                "expected exactly one field named 'value' in \{wrapperStub}"
        return new FieldReference(position, wrapper, fields.iterator.next())
    }

    ============================================================================
    Returns `true` if this value is in its final form and has a known type. Some
    expressions depend upon context for their interpretation; these are 
    represented by unresolved values until we have more information. For 
    example, when parsing the expression `array[5]`, we can't simply represent 
    this as a call of the `[]` method on `array` - what if the next token is 
    `:=`? In that case we should actually be calling the `[]:=` method instead.
    So we store this value as an `UnresolvedArray` until we are sure how it 
    needs to be handled.
    ============================================================================
    function isResolved():Bit {
        return true
    }
}