package org.pandalanguage.pandac.tree

uses org.pandalanguage.pandac.compiler.Context
uses org.pandalanguage.pandac.types.IntType
uses org.pandalanguage.pandac.types.Type

class UnaryOperation : Value {
    choice Kind {
        MINUS,
        NOT,
        BITWISE_NOT,
        FORCE_NON_NULLABLE
    }

    def kind:Kind

    def operand:Value

    init(position:Position, kind:Kind, operand:Value) {
        super.init(position, operand.type)
        self.kind := kind
        self.operand := operand
    }

    @override
    method implicitCast(position:Position, context:Context, t:Type):Value {
        if type = t {
            return self
        }
        if kind = Kind.MINUS & (t.unwrapNullable.isPrimitive | 
                t.unwrapNullable.isWrapper) {
            def prim := t.convert()->PrimitiveType
            if operand.canImplicitCastTo(context, prim) {
                var result:Value := UnaryOperation(position, kind, 
                        operand.implicitCast(position, context, prim))
                if t.isWrapper {
                    result := result.wrapped(context, t, false)
                }
                return result
            }
        }
        return super.implicitCast(position, context, t)
    }

    @override
    method preferredVariableType(context:Context, preferImmutable:Bit):Type {
        if operand-?>IntegerLiteral {
            def value := operand->IntegerLiteral.value
            if value <= Int.MAX->UInt64 + 1 {
                return IntType.INT32
            }
            return IntType.INT64
        }
        return super.preferredVariableType(context, preferImmutable)
    }    

    @override
    function convert():String {
        switch kind {
            case Kind.MINUS:              return "-\{operand}"
            case Kind.NOT:                return "!\{operand}"
            case Kind.BITWISE_NOT:        return "!!\{operand}"
            case Kind.FORCE_NON_NULLABLE: return "\{operand}!"
            default: unreachable
        }
    }
}