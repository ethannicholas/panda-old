package org.pandalanguage.pandac.tree

uses org.pandalanguage.pandac.compiler.Context
uses org.pandalanguage.pandac.tree.UnaryOperationType
uses org.pandalanguage.pandac.types.Type

enum UnaryOperationType {
    MINUS,
    NOT,
    BITWISE_NOT
}

class UnaryOperation : Value {
    def operation:UnaryOperationType

    def operand:Value

    init(position:Position, operation:UnaryOperationType, 
            operand:Value) {
        super.init(position, operand.type)
        self.operation := operation
        self.operand := operand
    }

    @override
    method implicitCast(position:Position, context:Context, t:Type):Value {
        if type = t
            return self
        if operation = UnaryOperationType.MINUS & 
                (t.unwrapNullable.isPrimitive | t.unwrapNullable.isWrapper) {
            def prim := t.convert()->PrimitiveType
            if operand.canImplicitCastTo(context, prim) {
                var result:Value := UnaryOperation(position, operation, 
                        operand.implicitCast(position, context, prim))
                if t.isWrapper
                    result := result.wrapped(context, t, false)
                return result
            }
        }
        return super.implicitCast(position, context, t)
    }

    @override
    function convert():String {
        switch operation {
            case UnaryOperationType.MINUS:       return "-\{operand}"
            case UnaryOperationType.NOT:         return "!\{operand}"
            case UnaryOperationType.BITWISE_NOT: return "!!\{operand}"
            default: unreachable
        }
    }
}