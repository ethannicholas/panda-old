package org.pandalanguage.pandac.tree

uses org.pandalanguage.pandac.stubs.MethodStub

================================================================================
Represents a method call.
================================================================================
class MethodCall : Value {
    ============================================================================
    The object on which the method is being called (a `ClassLiteral` for a 
    `@class` method).
    ============================================================================
    def target:Value

    ============================================================================
    The method being called.
    ============================================================================
    def methodStub:MethodStub

    ============================================================================
    The method parameters.
    ============================================================================
    def parameters:ListView<Value>

    ============================================================================
    Creates a new `MethodCall`.

    @param position the call's position
    @param target the object on which the method is being called (a 
            `ClassLiteral` for a `@class` method)
    @param methodStub the method being called
    @param params the parameters to the method (including 'self', if applicable)
    ============================================================================
    @pre(target-!>InstanceContext)
    @pre(parameters.length = methodStub.parameters.length)
    init(position:Position, target:Value, methodStub:MethodStub,
            parameters:ListView<Value>) {
        super.init(position, methodStub.returnType)
        self.target := target
        self.methodStub := methodStub
        self.parameters := Array<Value>(parameters)
    }

    @private
    @class
    function valid(m:MethodStub, parameters:ListView<Value>):Bit {
        for (i, p) in m.parameters.enumeration() {
            if p.type != parameters[i].type
                return false
        }
        return true
    }

    @override
    function convert():String {
        def result := MutableString()
        result.append(target)
        result.append(".")
        result.append(methodStub.name)
        result.add("(")
        for (i, p) in parameters.enumeration() {
            if i > 0
                result.append(", ")
            result.append(p)
        }
        result.add(")")        
        return result.convert()
    }
}