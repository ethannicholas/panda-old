package org.pandalanguage.pandac.tree

uses org.pandalanguage.pandac.compiler.Context
uses org.pandalanguage.pandac.compiler.Dummy
uses org.pandalanguage.pandac.stubs.MethodStub
uses org.pandalanguage.pandac.types.UnresolvedType
uses org.pandalanguage.pandac.types.Type

================================================================================
Represents a method call which has not yet been resolved to a specific method
implementation. For instance, `"1234".convert()` might be a call to any of
`String`'s `convert` methods and we require more context to decide which.
================================================================================
class UnresolvedMethodCall : UnresolvedValue {
    def target:Value?

    def methods:ListView<MethodStub>

    def parameters:ListView<Value>

    @pre(methods.count > 1)
    init(context:Context, position:Position, target:Value, 
            methods:ListView<MethodStub>, parameters:ListView<Value>) {
        super.init(position, "ambiguous call to '\{methods[0].name}'", 
                getValue(context, position, target, methods, parameters))
        self.target := target
        self.methods := methods
        self.parameters := parameters
    }

    @private
    function getValue(context:Context, position:Position, target:Value, 
            methods:ListView<MethodStub>, parameters:ListView<Value>):Value? {
        return context.call(position, target, methods, parameters, null, false)
    }

    @override
    method implicitCastCost(context:Context, t:Type):Int? {
        def best := Int.MAX
        for m in methods {
            def cost := context.matchCost(target, m, parameters, t)
            if cost != null & cost < best
                best := cost
        }
        if best != Int.MAX
            return best
        return null
    }

    @override
    method canExplicitCastTo(context:Context, t:Type):Bit {
        for m in methods {
            if m.returnType.canExplicitCastTo(context, t)
                return true
        }
        return false
    }

    @override
    method explicitCast(position:Position, context:Context, t:Type):Value {
        def bestCost := Int.MAX
        def best := Array<MethodStub>()
        for m in methods {
            var cost := context.matchCost(target, m, parameters, null)
            if cost != null {
                def castCost := t.implicitCastCost(context, m.returnType)
                if castCost = null
                    continue
                cost += castCost
                if cost < bestCost {
                    bestCost := cost
                    best := [m]
                }
                else if cost = bestCost
                    best.add(m)
            }
        }
        if best.count = 1 {
            def result := context.call(position, target, best[0], parameters)
            assert result != null
            return result.explicitCast(position, context, t)
        }
        def error := context.call(position, target, methods, parameters, t, 
                true)
        assert error = null
        return Dummy(position, t)
    }

    @override
    method implicitCast(position:Position, context:Context, t:Type):Value {
        def result := context.call(position, target, methods, parameters, t,
                true)
        if result != null {
            if t = VoidType.VOID {
                assert result.type = VoidType.VOID
                return result
            }
            return result.implicitCast(position, context, t)
        }
        return Dummy(position, t)
    }

    @override
    method reportError(context:Context) {
        def result := context.call(position, target, methods, parameters, null, 
                true)
        assert result = null : "somehow was able to actually call ambiguous " +
                "methods \{methods}"
    }

    @override
    function convert():String {
        return "\{methods[0].name}"
    }
}