package org.pandalanguage.pandac.tree

uses org.pandalanguage.pandac.types.IntType
uses org.pandalanguage.pandac.types.Type

class IntDivide : NumericBinaryOperation {
    constructor() {
        super.constructor()
    }
    
    constructor(position:Position) {
        super.constructor(position)
    }
    
    @override
    function operator():String {
        return "//"
    }

    @class
    method getOperandType(leftValue:Value, rightValue:Value, strict:Bit):Type? {
        var left := leftValue.type
        if left.isWrapper
            left := left.unwrapWrapper
        var right := rightValue.type
        if right.isWrapper
            right := right.unwrapWrapper
        if left.isInteger & right.isInteger {
            -- IntegerLiterals could be resolved as either signed or unsigned,
            -- depending on context
            if leftValue-?>(IntegerLiteral) {
                if right->(IntType).signed {
                    var newLeft := leftValue->(IntegerLiteral).getType(true)
                    if newLeft != null 
                        left := newLeft
                }
                else {
                    var newLeft := leftValue->(IntegerLiteral).getType(false)
                    if newLeft != null 
                        left := newLeft
                }
            }
            else if rightValue-?>(IntegerLiteral) {
                if left->(IntType).signed {
                    var newRight := rightValue->(IntegerLiteral).getType(true)
                    if newRight != null 
                        right := newRight
                }
                else {
                    var newRight := rightValue->(IntegerLiteral).getType(false)
                    if newRight != null
                        right := newRight
                }
            }
            if left.size < 4 & right.size < 4
                return IntType.INT32
            if left->(IntType).signed != right->(IntType).signed {
                if left.size = 8 | right.size = 8
                    return null -- can't mix signed & unsigned on 64 bit
                if left.size = 4 | right.size = 4
                    return IntType.INT64 -- bump size up to 64 bit
            }
            -- else signed-ness is the same, at least one is 32 or 64 bit
            if left.size > right.size
                return left
            return right
        }
        return null
    }

    @override
    method getOperandType(leftValue:Value, rightValue:Value, strict:Bit):Type? {
        return IntDivide.getOperandType(leftValue, rightValue, strict)
    }
}