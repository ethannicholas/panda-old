package org.pandalanguage.pandac.tree

uses org.pandalanguage.pandac.compiler.Context
uses org.pandalanguage.pandac.stubs.MethodStub
uses org.pandalanguage.pandac.types.Type
uses org.pandalanguage.pandac.types.UnresolvedType

================================================================================
Represents a method value.
================================================================================
class MethodReference : Value {
    ============================================================================
    The object in which the method was referenced (a `ClassLiteral` for `@class`
    methods).
    ============================================================================
    def target:Value

    ============================================================================
    The method being referenced.
    ============================================================================
    def methodStub:MethodStub

    ============================================================================
    Creates a new `MethodReference`.

    @param position the value's position
    @param target the object in which the method was referenced
    @param methodStub the method being called
    ============================================================================
    init(context:Context, position:Position, target:Value, 
            methodStub:MethodStub) {
        super.init(position, UnresolvedType("<method reference>",
                position))
        self.target := target
        self.methodStub := methodStub
    }

    @override
    method preferredType(context:Context, preferImmutable:Bit):Type {
        return methodStub.type(context)
    }    

    @override
    function implicitCastCost(context:Context, t:Type):Int? {
        return methodStub.type(context).implicitCastCost(context, t)
    }

    @override
    method implicitCast(position:Position, context:Context, t:Type):Value {
        return context.irGenerator.makeClosure(self).implicitCast(position, 
                context, t)
    }

    @override
    function convert():String {
        return target + "." + methodStub.name
    }
}