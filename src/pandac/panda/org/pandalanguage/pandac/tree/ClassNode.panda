package org.pandalanguage.pandac.tree

uses org.pandalanguage.pandac.compiler.PandaCompiler
uses org.pandalanguage.pandac.compiler.LookupContext
uses org.pandalanguage.pandac.parser.ParseNode
uses org.pandalanguage.pandac.types.ClassType
uses org.pandalanguage.pandac.types.GenericParameterType
uses org.pandalanguage.pandac.types.GenericType
uses org.pandalanguage.pandac.types.Type
uses org.pandalanguage.pandac.types.UnresolvedType

================================================================================
Represents a parsed class. `ClassNode` should always be the child of a 
`CompilationUnit`. There is a guaranteed one-to-one correspondence between 
`ClassNode` and `ClassType`; one will never exist without the other.
================================================================================
class ClassNode : Node {
    ============================================================================
    The fully-qualified name of this class.
    ============================================================================
    def name:String := "undefined"

    ============================================================================
    The parent class. Object (and only Object) has a null superclass.
    ============================================================================
    def superclass:ClassType?

    ============================================================================
    Interfaces implemented by this class.
    ============================================================================
    def interfaces:ImmutableArray<ClassType>
    
    ============================================================================
    The annotations attached to this class.
    ============================================================================
    def annotations:Annotations
    
    ============================================================================
    `true` if this is an interface, as opposed to a normal class.
    ============================================================================
    def isInterface:Bit

    ============================================================================
    The contents of the doccomment attached to the class, or `null` if none.
    ============================================================================
    def doccomment:String?

    def fields:ImmutableArray<FieldNode>

    def methods:ImmutableArray<MethodNode>

    ============================================================================
    Type lookup context.
    ============================================================================
    def lookupContext:LookupContext

    ============================================================================
    The class' unprocessed invariants.
    ============================================================================
    def invariants:ImmutableArray<ParseNode>

    ============================================================================
    The class' formal generic parameters. The class HashMap<K, V> has two formal
    generic parameters, whereas the class HashMap<String, String> has none.
    ============================================================================
    def genericParameters:ImmutableArray<GenericParameterType>?

    @invariant(genericParameters = null | genericParameters.length > 0)

    ============================================================================
    Creates a new `ClassNode`.
    
    @param name the fully-qualified name of the class
    @param parentSymbolTable the symbol table of the `CompilationUnit` to which
           this class belongs
    ============================================================================
    @pre(!name.contains(" ") & !name.endsWith("?"))
    @pre(genericParameters = null | genericParameters.length > 0)
    constructor(position:Position, name:String, isInterface:Bit, 
            annotations:Annotations, lookupContext:LookupContext, 
            superclass:ClassType?, interfaces:ListView<ClassType>, 
            methods:CollectionView<MethodNode>,
            fields:CollectionView<FieldNode>, 
            invariants:CollectionView<ParseNode>,
            genericParameters:ListView<GenericParameterType>?) {
        super.constructor(position, collectChildren(methods, fields))
        self.name := name
        self.isInterface := isInterface
        self.annotations := annotations
        self.lookupContext := lookupContext
        self.superclass := superclass
        self.interfaces := new ImmutableArray<ClassType>(interfaces)
        self.methods := new ImmutableArray<MethodNode>(methods)
        self.fields := new ImmutableArray<FieldNode>(fields)
        self.invariants := new ImmutableArray<ParseNode>(invariants)
        if genericParameters != null {
            self.genericParameters := 
                    new ImmutableArray<GenericParameterType>(genericParameters)
        }
    }

    @private
    @class
    function collectChildren(methods:CollectionView<MethodNode>,
            fields:CollectionView<FieldNode>):ListView<Node> {
        def result := new Array<Node>()
        -- FIXME use addAll when that is genericized
        for m in methods
            result.add(m)
        for f in fields
            result.add(f)
        return result
    }

    @override
    function format(fmt:String):String {
        if isInterface
            return "interface \{name}"
        else
            return "class \{name} { \{fields} \{methods} }"
    }
}