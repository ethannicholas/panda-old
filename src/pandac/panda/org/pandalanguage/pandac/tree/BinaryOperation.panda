package org.pandalanguage.pandac.tree

uses org.pandalanguage.pandac.compiler.Context
uses org.pandalanguage.pandac.compiler.InternalCompilerException
uses org.pandalanguage.pandac.types.BitType
uses org.pandalanguage.pandac.types.CharType
uses org.pandalanguage.pandac.types.IntType
uses org.pandalanguage.pandac.types.NativePointerType
uses org.pandalanguage.pandac.types.NullType
uses org.pandalanguage.pandac.types.PrimitiveType
uses org.pandalanguage.pandac.types.RealLiteralType
uses org.pandalanguage.pandac.types.RealType
uses org.pandalanguage.pandac.types.StringOrCharType
uses org.pandalanguage.pandac.types.Type

class BinaryOperation : Value {
    choice Kind {
        ADD,
        SUBTRACT,
        MULTIPLY,
        DIVIDE,
        INT_DIVIDE,
        REMAINDER,
        POWER,
        AND,
        OR,
        XOR,
        BITWISE_AND,
        BITWISE_OR,
        BITWISE_XOR,
        SHIFT_LEFT,
        SHIFT_RIGHT,
        EQUAL,
        NOT_EQUAL,
        IDENTITY,
        NOT_IDENTITY,
        GREATER_THAN,
        GREATER_THAN_OR_EQUAL,
        LESS_THAN,
        LESS_THAN_OR_EQUAL
    }

    def kind:Kind

    def left:Value

    def right:Value

    def permitOverflow:Bit

    @pre(left.type = right.type)
    init(position:Position, kind:Kind, left:Value, right:Value) {
        super.init(position, getType(kind, left.type))
        self.kind := kind
        self.left := left
        self.right := right
    }

    @override
    method implicitCast(position:Position, context:Context, t:Type):Value {
        if type = t
            return self
        if (kind = Kind.ADD | kind = Kind.SUBTRACT | kind = Kind.MULTIPLY |
                kind = Kind.DIVIDE) &
                (t.unwrapNullable.isPrimitive | t.unwrapNullable.isWrapper) {
            def prim := t.convert()->PrimitiveType
            if left.canImplicitCastTo(context, prim) & 
                    right.canImplicitCastTo(context, prim) {
                var result:Value := BinaryOperation(position, kind, 
                        left.implicitCast(position, context, prim),
                        right.implicitCast(position, context, prim))
                if t.isWrapper
                    result := result.wrapped(context, t, false)
                assert result.type = t
                return result
            }
        }
        return super.implicitCast(position, context, t)
    }

    @private
    @class
    function getType(kind:Kind, operandType:Type):Type {
        switch kind {
            case Kind.EQUAL, Kind.NOT_EQUAL, Kind.IDENTITY, Kind.NOT_IDENTITY,
                    Kind.GREATER_THAN, Kind.GREATER_THAN_OR_EQUAL,
                    Kind.LESS_THAN, Kind.LESS_THAN_OR_EQUAL:
                return BitType.BIT
            default:
                return operandType
        }
    }

    @class
    function mathOperandType(context:Context, leftValue:Value, rightValue:Value, 
            signMatters:Bit):Type? {
        var left := leftValue.type
        var right := rightValue.type
        if left.isWrapper
            left := left.convert()->PrimitiveType
        if right.isWrapper
            right := right.convert()->PrimitiveType
        -- deal with autosizing of real literals
        if left = RealLiteralType.REAL_LITERAL & right.isReal
            return right
        if right = RealLiteralType.REAL_LITERAL & left.isReal
            return left

        -- if both operands are ints, use Int32, UInt32, Int64, or UInt64
        if left.isInteger & right.isInteger {
            -- IntegerLiterals could be resolved as either signed or unsigned,
            -- depending on context
            if leftValue-?>IntegerLiteral {
                if right->IntType.signed {
                    var newLeft := leftValue->IntegerLiteral.getType(true)
                    if newLeft != null 
                        left := newLeft
                }
                else {
                    var newLeft := leftValue->IntegerLiteral.getType(false)
                    if newLeft != null 
                        left := newLeft
                }
            }
            else if rightValue-?>IntegerLiteral {
                if left->IntType.signed {
                    var newRight := rightValue->IntegerLiteral.getType(true)
                    if newRight != null 
                        right := newRight
                }
                else {
                    var newRight := rightValue->IntegerLiteral.getType(false)
                    if newRight != null
                        right := newRight
                }
            }
            def leftSize := left->IntType.size
            def rightSize := right->IntType.size
            if leftSize < 4 & rightSize < 4
                return IntType.INT32
            if left = right
                return left
            if leftSize = 8 & rightSize = 8 {
                if signMatters
                    return null -- can't operate on Int64 & UInt64
                else
                    return IntType.INT64
            }
            if leftSize = 8 {
                assert rightSize < 8
                return left
            }
            if rightSize = 8 {
                assert leftSize < 8
                return right
            }
            if leftSize = 4 & rightSize < 4 {
                if !left->IntType.signed {
                    if right->IntType.signed
                        return IntType.INT64
                    else
                        return IntType.UINT32
                }
                else
                    return IntType.INT32
            }
            if rightSize = 4 & leftSize < 4 {
                if !right->IntType.signed {
                    if left->IntType.signed
                        return IntType.INT64
                    else
                        return IntType.UINT32
                }
                else
                    return IntType.INT32
            }
            assert leftSize = 4 & rightSize = 4
            assert left->IntType.signed != right->IntType.signed
            if signMatters
                return IntType.INT64
            else
                return IntType.INT32
        }
        
        -- if both operands are numbers, use a 32 or 64 bit real
        if left.isNumber & right.isNumber {
            if left.convert()->PrimitiveType.size <= 4 & 
                    right.convert()->PrimitiveType.size <= 4
                return RealType.REAL32
            else
                return RealType.REAL64
        }
        return null
    }

    @class
    function divideOperandType(context:Context, leftValue:Value, 
            rightValue:Value):Type? {
        if !leftValue.type.isPrimitive & !leftValue.type.isWrapper
            return null
        def left := leftValue.type.convert()->PrimitiveType
        if !left.isNumber
            return null
        if !rightValue.type.isPrimitive & !rightValue.type.isWrapper
            return null
        def right := rightValue.type.convert()->PrimitiveType
        if !right.isNumber
            return null
        if left.convert()->PrimitiveType.size = 8 | right.convert()->PrimitiveType.size = 8
            return RealType.REAL64
        return RealType.REAL32
    }

    @class
    method logicalOperandType(context:Context, leftValue:Value, 
            rightValue:Value):Type? {
        var left := leftValue.type
        var right := rightValue.type
        if left = NativePointerType.NATIVE_POINTER | 
                right = NativePointerType.NATIVE_POINTER
            return NativePointerType.NATIVE_POINTER
        if left = NullType.NULL
            return right.nullableVersion(context)
        if right = NullType.NULL
            return left.nullableVersion(context)
        if left.isWrapper
            left := left.convert()->PrimitiveType
        if right.isWrapper
            right := right.convert()->PrimitiveType
        if left = BitType.BIT & right = BitType.BIT
            return BitType.BIT
        if (left = CharType.CHAR | left = StringOrCharType.STRING_OR_CHAR) &
                    (right = CharType.CHAR | 
                        right = StringOrCharType.STRING_OR_CHAR)
            return CharType.CHAR
        var result := mathOperandType(context, leftValue, rightValue, true)
        if result = RealLiteralType.REAL_LITERAL
            result := RealType.REAL64
        return result
    }

    @class
    method shiftOperandType(context:Context, leftValue:Value, 
            rightValue:Value):Type? {
        var left := leftValue.type
        var right := rightValue.type
        if left.isWrapper
            left := left.convert()->PrimitiveType
        if right.isWrapper
            right := right.convert()->PrimitiveType
        if !left.isInteger | !right.isInteger
            return null
        def signed := left->IntType.signed
        def size := left->PrimitiveType.size.max(right->PrimitiveType.size)
        switch (signed, size) {
            case (true, 1): return IntType.INT32
            case (true, 2): return IntType.INT32
            case (true, 4): return IntType.INT32
            case (true, 8): return IntType.INT64
            case (false, 1): return IntType.UINT32
            case (false, 2): return IntType.UINT32
            case (false, 4): return IntType.UINT32
            case (false, 8): return IntType.UINT64
        }
        unreachable
    }

    @class
    method operandType(context:Context, kind:Kind, 
            left:Value, right:Value):Type? {
        switch kind {
            case Kind.ADD, Kind.SUBTRACT, 
                    Kind.MULTIPLY,
                    Kind.INT_DIVIDE, 
                    Kind.REMAINDER,
                    Kind.POWER:
                return mathOperandType(context, left, right, true)
            case Kind.DIVIDE:
                return divideOperandType(context, left, right)
            case Kind.SHIFT_LEFT,
                    Kind.SHIFT_RIGHT:
                return shiftOperandType(context, left, right)
            case Kind.BITWISE_AND,
                    Kind.BITWISE_OR,
                    Kind.BITWISE_XOR:
                return mathOperandType(context, left, right, false)
            case Kind.AND, Kind.OR,
                    Kind.XOR:
                return BitType.BIT
            case Kind.EQUAL, Kind.NOT_EQUAL,
                    Kind.GREATER_THAN,
                    Kind.GREATER_THAN_OR_EQUAL,
                    Kind.LESS_THAN,
                    Kind.LESS_THAN_OR_EQUAL:
                return logicalOperandType(context, left, right)
            case Kind.IDENTITY, 
                    Kind.NOT_IDENTITY:
                return Type.union(context, left.type, right.type)
            default: {
                Console.writeLine("unsupported binary operation: \{kind}")
                unreachable
            }
        }
    }

    @class
    function operatorSymbol(kind:Kind):String {
        switch kind {
            case Kind.ADD:                   return "+"
            case Kind.SUBTRACT:              return "-"
            case Kind.MULTIPLY:              return "*"
            case Kind.DIVIDE:                return "/"
            case Kind.INT_DIVIDE:            return "//"
            case Kind.REMAINDER:             return "%"
            case Kind.POWER:                 return "^"
            case Kind.AND:                   return "&"
            case Kind.OR:                    return "|"
            case Kind.XOR:                   return "~"
            case Kind.BITWISE_AND:           return "&&"
            case Kind.BITWISE_OR:            return "||"
            case Kind.BITWISE_XOR:           return "~~"
            case Kind.SHIFT_LEFT:            return "<<"
            case Kind.SHIFT_RIGHT:           return ">>"
            case Kind.EQUAL:                 return "="
            case Kind.NOT_EQUAL:             return "!="
            case Kind.IDENTITY:              return "=="
            case Kind.NOT_IDENTITY:          return "!=="
            case Kind.GREATER_THAN:          return ">"
            case Kind.GREATER_THAN_OR_EQUAL: return ">="
            case Kind.LESS_THAN:             return "<"
            case Kind.LESS_THAN_OR_EQUAL:    return "<="
            default: throw InternalCompilerException(
                    "unsupported binary operator")
        }
    }

    @class
    function signMatters(kind:Kind):Bit {
        return kind != Kind.SHIFT_LEFT & kind != Kind.SHIFT_RIGHT &
                kind != Kind.BITWISE_AND & kind != Kind.BITWISE_OR &
                kind != Kind.BITWISE_XOR
    }

    @override
    function convert():String {
        return "(\{left} \{operatorSymbol(kind)} \{right})"
    }
}