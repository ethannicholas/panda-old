package org.pandalanguage.pandac.tree

================================================================================
Represents an implicit instance context. For instance, when compiling:

	function foo() {
		bar()
	}

the `bar()` invocation does not have an explicit "target" (object or class on 
which) it is being called. Is it an instance method? A class method? A field of
method type? We have no idea at this point. So we create an `InstanceContext` to
serve as the call's target, which will later be replaced with either a 
`ClassLiteral` or reference to the `self` parameter.
================================================================================
class InstanceContext : Value {
	def selfParam:Value

	constructor(position:Position, selfParam:Value) {
		super.constructor(position, selfParam.type)
		self.selfParam := selfParam
	}

	function classLiteral():Value {
		return new ClassLiteral(position, selfParam.type)
	}
}