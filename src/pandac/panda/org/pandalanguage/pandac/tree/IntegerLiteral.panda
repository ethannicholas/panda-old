package org.pandalanguage.pandac.tree

uses org.pandalanguage.pandac.compiler.Context
uses org.pandalanguage.pandac.types.CharType
uses org.pandalanguage.pandac.types.IntType
uses org.pandalanguage.pandac.types.PrimitiveType
uses org.pandalanguage.pandac.types.Type

================================================================================
Represents a literal integer appearing in the source code. Note that a leading
minus sign is *not* considered to be part of the literal itself; that is a
`UnaryMinus` operator acting on an `IntegerLiteral`. Thus all `IntegerLiterals`
are naturally unsigned, but given Panda's bias towards signed types they will
prefer to be treated as signed types when possible.
================================================================================
class IntegerLiteral : Value {
    choice TypeForce {
        -- do not force the sign to match (that is, it is legal to assign this
        -- integer to a value even if it is too big to represent without a sign
        -- flip). This is used for hex and binary literals.
        NONE,
        -- do not permit a sign flip during assignments. This is the default.
        SIGN,
        -- force the type to match, so we can specify that this is, say, a 
        -- 32 bit zero, and it is not legal to assign it to an Int8 even though
        -- it would fit
        TYPE
    }

    def value:UInt64
    def force:TypeForce

    init(position:Position, value:UInt64) {
        init(position, value, TypeForce.SIGN)
    }
    
    init(position:Position, value:UInt64, force:TypeForce) {
        super.init(position, getType(value))
        self.value := value
        self.force := force
    }

    init(position:Position, value:UInt64, type:Type) {
        super.init(position, type)
        self.value := value
        self.force := TypeForce.TYPE
    }

    @class
    function getType(value:UInt64):IntType {
        if value <= Int8.MAX->UInt64 {
            return IntType.INT8
        }
        if value <= Int16.MAX->UInt64 {
            return IntType.INT16
        }
        if value <= Int32.MAX->UInt64 {
            return IntType.INT32
        }
        if value <= Int64.MAX->UInt64 {
            return IntType.INT64
        }
        return IntType.UINT64
    }

    ============================================================================
    Returns the preferred type for this literal in a signed / unsigned context.
    ============================================================================
    function getType(signed:Bit):Type? {
        if force = TypeForce.TYPE {
            if type->IntType.signed = signed {
                return type
            }
            return null
        }
        if signed {
            if value <= Int8.MAX->UInt64  {
                return IntType.INT8
            }
            if value <= Int16.MAX->UInt64 {
                return IntType.INT16
            }
            if value <= Int32.MAX->UInt64 {
                return IntType.INT32
            }
            if value <= Int64.MAX->UInt64 {
                return IntType.INT64
            }
            return null
        }
        else {
            if value <= UInt8.MAX {
                return IntType.UINT8
            }
            if value <= UInt16.MAX {
                return IntType.UINT16
            }
            if value <= UInt32.MAX {
                return IntType.UINT32
            }
            return IntType.UINT64
        }
    }

    @override
    method preferredType(context:Context, preferImmutable:Bit):Type {
        switch type {
            case IntType.INT8: return IntType.INT32
            case IntType.INT16: return IntType.INT32
            case IntType.INT32: return IntType.INT32
            case IntType.INT64: return IntType.INT64
            case IntType.UINT8: return IntType.INT32
            case IntType.UINT16: return IntType.INT32
            case IntType.UINT32: return IntType.INT64
            case IntType.UINT64: return IntType.UINT64
            default: unreachable
        }
    }    

    @override
    function implicitCastCost(context:Context, t:Type):Int? {
        if force = TypeForce.TYPE {
            return type.implicitCastCost(context, t)
        }
        def unwrapped:Type
        if t.isWrapper {
            unwrapped := t.convert()->PrimitiveType
        }
        else {
            unwrapped := t
        }
        if unwrapped.isInteger {
            if force = TypeForce.SIGN {
                def srcType := getType(unwrapped->IntType.signed)
                if srcType = null {
                    return null
                }
                def result := srcType.implicitCastCost(context, t)
                if result != null & !unwrapped->IntType.signed {
                    return result + 1
                }
                return result
            }
            else {
                def targetSize := unwrapped->PrimitiveType.size
                def size := getType(false)->PrimitiveType.size
                var cost := 0
                while size < targetSize {
                    cost += 1
                    size *= 2
                }
                if !unwrapped->IntType.signed {
                    cost += 1
                }
                return cost
            }
        }
        return super.implicitCastCost(context, t)
    }

    @override
    method implicitCast(position:Position, context:Context, t:Type):Value {
        if t.isInteger & implicitCastCost(context, t) != null {
            return IntegerLiteral(position, value, t)
        }
        return super.implicitCast(position, context, t)
    }

    @override
    function convert():String {
        return value.convert()
    }
}