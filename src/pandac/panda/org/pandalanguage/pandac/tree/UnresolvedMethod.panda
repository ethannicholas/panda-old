package org.pandalanguage.pandac.tree

uses org.pandalanguage.pandac.compiler.Context
uses org.pandalanguage.pandac.compiler.Dummy
uses org.pandalanguage.pandac.stubs.MethodStub
uses org.pandalanguage.pandac.types.UnresolvedType
uses org.pandalanguage.pandac.types.Type

================================================================================
Represents a method name which has not yet been resolved to a specific overload.
================================================================================
class UnresolvedMethod : UnresolvedValue {
    def target:Value?

    def methods:ListView<MethodStub>

    @pre(methods.length > 1)
    init(position:Position, target:Value, 
            methods:ListView<MethodStub>) {
        super.init(position, "ambiguous reference to method '\{methods[0].name}'", 
                getValue(position, target, methods))
        self.target := target
        self.methods := methods
    }

    @private
    function getValue(position:Position, target:Value, 
            methods:ListView<MethodStub>):Value? {
        for m in methods {
            if m.methodType = MethodNodeType.FUNCTION & !m.annotations.isClass &
                    m.parameters.length = 0 {
                def effectiveTarget:Value
                if target-?>InstanceContext
                    effectiveTarget := target->InstanceContext.selfParam
                else
                    effectiveTarget := target
                return MethodCall(position, effectiveTarget, m, 
                        Array<Value>())
            }
        }
        return null
    }

    @override
    method reportError(context:Context) {
        def text := MutableString("ambiguous reference to method " +
                "'\{methods[0].name}', the following methods are all equally " +
                "good matches:\n")
        for m in methods
            text.append("    \{m} (\{m.position})\n")
        context.errors.error(text.convert(), position)
    }

    @override
    function convert():String {
        return "\{methods[0].name}"
    }
}