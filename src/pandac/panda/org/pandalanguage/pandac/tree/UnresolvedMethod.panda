package org.pandalanguage.pandac.tree

uses org.pandalanguage.pandac.compiler.Context
uses org.pandalanguage.pandac.compiler.Dummy
uses org.pandalanguage.pandac.stubs.Methods
uses org.pandalanguage.pandac.stubs.MethodStub
uses org.pandalanguage.pandac.types.MethodType
uses org.pandalanguage.pandac.types.UnresolvedType
uses org.pandalanguage.pandac.types.Type

================================================================================
Represents a method name which has not yet been resolved to a specific overload.
================================================================================
class UnresolvedMethod : UnresolvedValue {
    def target:Value?

    def methods:Methods

    @pre(methods.entries.count > 1)
    init(position:Position, target:Value, 
            methods:Methods) {
        super.init(position, "ambiguous reference to method '\{methods.name}'", 
                null)
        self.target := target
        self.methods := methods
    }

    @override
    method implicitCastCost(context:Context, t:Type):Int? {
        var best := Array<MethodStub>()
        var bestCost := Int.MAX
        for m in methods.entries {
            def cost := m.type.implicitCastCost(context, t)
            if cost = null {
                continue
            }
            if cost < bestCost {
                bestCost := cost
            }
        }
        if bestCost = Int.MAX {
            return null
        }
        return bestCost
    }

    @override
    method implicitCast(position:Position, context:Context, t:Type):Value {
        var best := Array<MethodStub>()
        var bestCost := Int.MAX
        for m in methods.entries {
            def cost := m.type.implicitCastCost(context, t)
            if cost = null {
                continue
            }
            if cost < bestCost {
                best := [m]
                bestCost := cost
            }
            else if cost = best {
                best.add(m)
            }
        }
        if best.count = 0 {
            context.errors.error("expected '\{t.displayName}', but none of " +
                    "the overloads of '\{methods.name}' match", position)
            return Dummy(position, t)
        }
        else if best.count = 1 {
            def finalTarget := context.irGenerator.getMethodTarget(best[0],
                    target)
            return MethodReference(position, finalTarget, 
                    best[0]).implicitCast(position, context, t)
        }
        else {
            reportError(context, best)
            return Dummy(position, t)
        }
    }    

    @override
    method canExplicitCastTo(context:Context, t:Type):Bit {
        for m in methods.entries {
            if m.type.canExplicitCastTo(context, t) {
                return true
            }
        }
        return false
    }

    @override
    method explicitCast(position:Position, context:Context, t:Type, 
            force:Bit):Value {
        def matches := Array<MethodStub>()
        for m in methods.entries {
            if m.type.canExplicitCastTo(context, t) {
                matches.add(m)
            }
        }
        if matches.count = 0 {
            context.errors.error("expected '\{t.displayName}', but none of " +
                    "the overloads of '\{methods.name}' match", position)
            return Dummy(position, t)
        }
        if matches.count = 1 {
            return MethodReference(position, target, 
                    matches[0]).explicitCast(position, context, t)
        }
        else {
            reportError(context, matches)
            return Dummy(position, t)
        }
    }    

    @override
    method reportError(context:Context, matches:ListView<MethodStub>) {
        def text := MutableString("ambiguous reference to method " +
                "'\{methods.name}', the following methods are all equally " +
                "good matches:\n")
        for m in matches {
            text.append("    \{m} (\{m.position})\n")
        }
        context.errors.error(text.convert(), position)
    }

    @override
    method reportError(context:Context) {
        reportError(context, methods.entries)
    }

   @override
    function convert():String {
        return "\{methods.name}"
    }
}