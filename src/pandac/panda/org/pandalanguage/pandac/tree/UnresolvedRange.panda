package org.pandalanguage.pandac.tree

uses org.pandalanguage.pandac.compiler.Context
uses org.pandalanguage.pandac.compiler.CompilerException
uses org.pandalanguage.pandac.compiler.Dummy
uses org.pandalanguage.pandac.types.CharType
uses org.pandalanguage.pandac.types.ClassType
uses org.pandalanguage.pandac.types.GenericType
uses org.pandalanguage.pandac.types.IntType
uses org.pandalanguage.pandac.types.PrimitiveArrayType
uses org.pandalanguage.pandac.types.StringOrCharType
uses org.pandalanguage.pandac.types.Type
uses org.pandalanguage.pandac.types.UnresolvedType
uses org.pandalanguage.pandac.types.WrapperType

class UnresolvedRange : UnresolvedValue {
    def left:Value?

    def right:Value?

    def step:Value?

    def endInclusive:Bit
    
    init(context:Context, position:Position, left:Value?, right:Value?,
            step:Value?, endInclusive:Bit) {
        super.init(position, description(left, right, step, 
                endInclusive), getValue(context, position, left, right, step, 
                endInclusive))
        self.left  := left
        self.right := right
        self.step  := step
        self.endInclusive := endInclusive
    }

    @override
    method reportError(context:Context) {
        context.errors.error("range operator cannot operate on these types",
                position)
    }

    @class
    function description(left:Value?, right:Value?, step:Value?, 
            endInclusive:Bit):String {
        def name := MutableString("<range: ")
        if left != null {
            name.append(left.type.displayName + " ")
        }
        if endInclusive {
            name.append("...")
        }
        else {
            name.append("..")
        }
        if right != null {
            name.append(" " + right.type.displayName)
        }
        if step != null {
            name.append(" by " + step.type.displayName)
        }
        name.append(">")
        return name.convert()
    }

    @class
    method getValue(context:Context, position:Position, left:Value?, 
            right:Value?, step:Value?, endInclusive:Bit):Value? {
        def params := Array<Value>()
        if left != null {
            params.add(left)
        }
        else {
            params.add(NullLiteral(position))
        }
        if right != null {
            params.add(right)
        }
        else {
            params.add(NullLiteral(position))
        }
        if step != null {
            params.add(step)
        }
        else {
            params.add(NullLiteral(position))
        }
        while params.count > 0 & params[params.count - 1]-?>NullLiteral {
            params.removeIndex(params.count - 1)
        }
        def name:String
        if endInclusive {
            name := "[...]"
        }
        else {
            name := "[..]"
        }
        var result := context.testCall(position, ClassLiteral(position, 
                WrapperType.INT_WRAPPER), name, params)
        if result = null {
            result := context.testCall(position, ClassLiteral(position, 
                WrapperType.CHAR_WRAPPER), name, params)
        }
        if result = null {
            result := context.testCall(position, ClassLiteral(position, 
                WrapperType.REAL32_WRAPPER), name, params)
        }
        if result = null {
            result := context.testCall(position, ClassLiteral(position, 
                WrapperType.REAL64_WRAPPER), name, params)
        }
        return result
    }

    @override
    function implicitCastCost(context:Context, t:Type):Int? {
        if t.isPrimitiveArray {
            def elementType := t->PrimitiveArrayType.elementType
            var cost:Int? := 0
            if left != null {
                if !left.type.isPrimitive & !left.type.isWrapper {
                    return null
                }
                cost := left.implicitCastCost(context, elementType)
                if cost = null {
                    return null
                }
            }
            if right != null {
                if !right.type.isPrimitive & !right.type.isWrapper {
                    return null
                }
                def rightCost := right.implicitCastCost(context, elementType)
                if rightCost = null {
                    return null
                }
                cost += rightCost
            }
            if step != null & !step.type.isNumber {
                return null
            }
            return cost
        }
        if value = null {
            return null
        }
        return preferredVariableType(context, false).implicitCastCost(context, 
                t)
    }

    @override
    function canExplicitCastTo(context:Context, t:Type):Bit {
        return implicitCastCost(context, t) != null
    }

    @override
    @unsafeFunction
    method preferredVariableType(context:Context, preferImmutable:Bit):Type {
        if value = null {
            throw CompilerException("range operator cannot operate " +
                    "on these types", position)
        }
        return value->Value.preferredVariableType(context, preferImmutable)
    }
}