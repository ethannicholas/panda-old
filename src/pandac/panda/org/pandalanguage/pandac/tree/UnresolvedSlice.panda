package org.pandalanguage.pandac.tree

uses org.pandalanguage.pandac.compiler.Context
uses org.pandalanguage.pandac.compiler.Dummy
uses org.pandalanguage.pandac.compiler.ErrorReporter
uses org.pandalanguage.pandac.compiler.IRGenerator
uses org.pandalanguage.pandac.stubs.MethodStub
uses org.pandalanguage.pandac.types.PrimitiveArrayType
uses org.pandalanguage.pandac.types.ClassType
uses org.pandalanguage.pandac.types.StringOrCharType
uses org.pandalanguage.pandac.types.Type
uses org.pandalanguage.pandac.types.UnresolvedType

================================================================================
Represents a slice which has not yet been fully resolved.
================================================================================
class UnresolvedSlice : UnresolvedValue {
    def contextValue:Value
    def left:Value?
    def right:Value?
    def step:Value?
    def endInclusive:Bit

    init(context:Context, position:Position, contextValue:Value, 
            left:Value?, right:Value?, step:Value?, endInclusive:Bit) {
        super.init(position, "<unresolved slice>", getCall(context,
                position, contextValue, left, right, step, endInclusive))
        self.contextValue := contextValue
        self.left := left
        self.right := right
        self.step := step
        self.endInclusive := endInclusive
    }

    @private
    @class
    method getCall(context:Context, position:Position, contextValue:Value,
            params:Array<Value>, endInclusive:Bit):Value? {
        def name:String
        if endInclusive
            name := "[...]"
        else
            name := "[..]"
        return context.testCall(position, contextValue, name, params)
    }

    @private
    @class
    method getCall(context:Context, position:Position, contextValue:Value, 
            left:Value?, right:Value?, step:Value?, endInclusive:Bit):Value? {
        if left = null & right = null & step = null {
            def test := getCall(context, position, contextValue, 
                    Array<Value>(), endInclusive)
            if test != null
                return test
        }
        if right = null & step = null {
            def params := Array<Value>()
            if left != null
                params.add(left)
            else
                params.add(NullLiteral(position))
            def test := getCall(context, position, contextValue, params, 
                    endInclusive)
            if test != null
                return test
        }
        if step = null {
            def params := Array<Value>()
            if left != null
                params.add(left)
            else
                params.add(NullLiteral(position))
            if right != null
                params.add(right)
            else
                params.add(NullLiteral(position))
            def test := getCall(context, position, contextValue, params, 
                    endInclusive)
            if test != null
                return test
        }
        def params := Array<Value>()
        if left != null
            params.add(left)
        else
            params.add(NullLiteral(position))
        if right != null
            params.add(right)
        else
            params.add(NullLiteral(position))
        if step != null
            params.add(step)
        else
            params.add(IntegerLiteral(position, 1))
        return getCall(context, position, contextValue, params, endInclusive)
    }

    @override
    method reportError(context:Context) {
        def name:String
        if endInclusive
            name := "[...]"
        else
            name := "[..]"
        def parameters := MutableString("[")
        if left != null
            parameters.append("'\{left.type.displayName}'")
        else
            parameters.append("'null'")
        parameters.append(", ")
        if right != null
            parameters.append("'\{right.type.displayName}'")
        else
            parameters.append("'null'")
        parameters.append(", ")
        if step != null
            parameters.append("'\{step.type.displayName}'")
        else
            parameters.append("'panda.core.Int32'")
        parameters.append("]")
        context.errors.error("'\{contextValue.type.displayName}' does not " +
                "implement the '\{name}' operator for \{parameters}", 
                position)
    }
}