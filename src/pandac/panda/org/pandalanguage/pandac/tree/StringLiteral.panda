package org.pandalanguage.pandac.tree

uses org.pandalanguage.pandac.compiler.Context
uses org.pandalanguage.pandac.types.CharType
uses org.pandalanguage.pandac.types.ClassType
uses org.pandalanguage.pandac.types.StringOrCharType
uses org.pandalanguage.pandac.types.Type

class StringLiteral : Value {
    def value:String
    
    init(position:Position, value:String) {
        init(position, value, getType(value))
    }
    
    init(position:Position, value:String, type:Type) {
        super.init(position, type)
        self.value := value
    }
    
    method getType(value:String):Type {
        if value.length = 1
            return StringOrCharType.STRING_OR_CHAR
        else
            return ClassType.STRING
    }

    @override
    method implicitCast(position:Position, context:Context, t:Type):Value {
        if type = StringOrCharType.STRING_OR_CHAR {
            if t.implicitCastCost(context, CharType.CHAR) != null {
                assert value.length = 1
                return IntegerLiteral(position, value[0]->UInt, 
                        CharType.CHAR, true).implicitCast(position, context, t)
            }
            else if t.implicitCastCost(context, ClassType.STRING) != null {
                return StringLiteral(position, value, 
                        ClassType.STRING).implicitCast(position, context, t)
            }
        }
        return super.implicitCast(position, context, t)
    }

    @override
    method explicitCast(position:Position, context:Context, t:Type):Value {
        if type = StringOrCharType.STRING_OR_CHAR & 
                (t.isPrimitive | t.isWrapper) {
            return implicitCast(position, context, 
                    CharType.CHAR).explicitCast(position, context, t)
        }
        return super.explicitCast(position, context, t)
    }

    @override
    method convert(context:Context, t:Type):Value {
        if type = StringOrCharType.STRING_OR_CHAR & 
                (t.isPrimitive | t.isWrapper) {
            return implicitCast(position, context, 
                    CharType.CHAR).convert(context, t)
        }
        return super.convert(context, t)
    }

    @class
    function escape(s:String):String {
        return s.replace("\\", "\\\\").replace("\n", "\\n").replace("\r", "\\r")
                .replace("\t", "\\t").replace('"', '\\"')
    }
    
    @override
    function ->>():String {
        return '"' + escape(value) + '"'
    }
}