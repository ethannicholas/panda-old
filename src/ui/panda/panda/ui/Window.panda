package panda.ui

uses panda.gl.GL
uses panda.ui.events.Event

@private
class UIMessageQueue : MessageQueue<Event> {
    @override
    method pendingMessages():Int {
        pumpEvents()
        return super.pendingMessages()
    }
    
    @override
    method hasMessage():Bit {
        pumpEvents()
        return super.hasMessage()
    }
    
    @override
    method getMessage():Object? {
        waitForEvent()
        return super.getMessage()
    }
    
    @override
    method getMessage(timeout:Int):Object? {
        waitForEvent(timeout)
        return super.getMessage(0)
    }

    @private
    @external
    method pumpEvents()

    @private
    @external
    method waitForEvent()

    @private
    @external
    method waitForEvent(timeout:Int)
}

class Window {
    @readonly
    var x:Int

    @readonly
    var y:Int

    @readonly
    var width:Int

    @readonly
    var height:Int

    def glContext:GL

    ============================================================================
    `MessageQueue` to which `Events` such as key presses and mouse clicks are 
    sent.
    ============================================================================
    @readonly
    var eventQueue:MessageQueue<Event> := UIMessageQueue()

    @private
	var native:$NativePointer

	init(title:String, x:Int, y:Int, width:Int, height:Int) {
        self.x := x
        self.y := y
        self.width := width
        self.height := height
		initialize(title, x, y, width, height)
	}

	@private
    @external
    method initialize(title:String, x:Int32, y:Int32, width:Int32, height:Int32)

    @external
    method close() 
}