package panda.gl

class Util {
	@private
	init() { }
	
	@class
	@pre(type = GL.VERTEX_SHADER | type = GL.FRAGMENT_SHADER)
	method compileShader(gl:GL, type:UInt32, source:String):UInt32 {
		def shader := gl.createShader(type)
		gl.shaderSource(shader, source)
		gl.compileShader(shader)
		def compiled := gl.getShaderiv(shader, GL.COMPILE_STATUS)
		if compiled = 0 {
			throw AssertionError("shader compilation failed: " + 
					gl.getShaderInfoLog(shader))
		}
		return shader
	}

	@class
	method createProgram(gl:GL, vertexShader:UInt32, 
			fragmentShader:UInt32):UInt32 {
		def program := gl.createProgram()
		gl.attachShader(program, vertexShader)
		gl.attachShader(program, fragmentShader)
		gl.linkProgram(program)
		def linked := gl.getProgramiv(program, GL.LINK_STATUS)
		if linked = 0 {
			throw AssertionError("program linkage failed: " +
					gl.getProgramInfoLog(program))
		}
		return program
	}

	@class
	method createProgram(gl:GL, vertexSource:String, 
			fragmentSource:String):UInt32 {
		return createProgram(gl, 
				compileShader(gl, GL.VERTEX_SHADER, vertexSource),
				compileShader(gl, GL.FRAGMENT_SHADER, fragmentSource))
	}
}