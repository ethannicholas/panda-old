package panda.gl

uses panda.ui.Window

class GL {
    constant POINTS:UInt32                 := 0x0000
    constant LINES:UInt32                  := 0x0001
    constant LINE_LOOP:UInt32              := 0x0002
    constant LINE_STRIP:UInt32             := 0x0003
    constant TRIANGLES:UInt32              := 0x0004
    constant TRIANGLE_STRIP:UInt32         := 0x0005
    constant TRIANGLE_FAN:UInt32           := 0x0006
  
    constant TEXTURE_2D:UInt32             := 0x0DE1
    constant CULL_FACE:UInt32              := 0x0B44
    constant BLEND:UInt32                  := 0x0BE2
    constant DITHER:UInt32                 := 0x0BD0
    constant STENCIL_TEST:UInt32           := 0x0B90
    constant DEPTH_TEST:UInt32             := 0x0B71
    constant SCISSOR_TEST:UInt32           := 0x0C11

	constant ZERO:UInt32                   := 0
	constant ONE:UInt32                    := 1
	constant SRC_COLOR:UInt32              := 0x0300
	constant ONE_MINUS_SRC_COLOR:UInt32    := 0x0301
	constant SRC_ALPHA:UInt32              := 0x0302
	constant ONE_MINUS_SRC_ALPHA:UInt32    := 0x0303
	constant DST_ALPHA:UInt32              := 0x0304
	constant ONE_MINUS_DST_ALPHA:UInt32    := 0x0305
	constant DST_COLOR:UInt32              := 0x0306
	constant ONE_MINUS_DST_COLOR:UInt32    := 0x0307
	constant SRC_ALPHA_SATURATE:UInt32     := 0x0308

    constant DEPTH_COMPONENT:UInt32        := 0x1902
    constant ALPHA:UInt32                  := 0x1906
    constant RGB:UInt32                    := 0x1907
    constant RGBA:UInt32                   := 0x1908
    constant BGR:UInt32                    := 0x80E0
    constant BGRA:UInt32                   := 0x80E1
    constant LUMINANCE:UInt32              := 0x1909
    constant LUMINANCE_ALPHA:UInt32        := 0x190A

    constant BYTE:UInt32                   := 0x1400
    constant UNSIGNED_BYTE:UInt32          := 0x1401
    constant SHORT:UInt32                  := 0x1402
    constant UNSIGNED_SHORT:UInt32         := 0x1403
    constant INT:UInt32                    := 0x1404
    constant UNSIGNED_INT:UInt32           := 0x1405
    constant FLOAT:UInt32                  := 0x1406
    constant FIXED:UInt32                  := 0x140C
    constant UNSIGNED_SHORT_4_4_4_4:UInt32 := 0x8033
    constant UNSIGNED_SHORT_5_5_5_1:UInt32 := 0x8034
    constant UNSIGNED_SHORT_5_6_5:UInt32   := 0x8363

    constant DEPTH_BUFFER_BIT:UInt32       := 0x00000100
    constant STENCIL_BUFFER_BIT:UInt32     := 0x00000400
    constant COLOR_BUFFER_BIT:UInt32       := 0x00004000
  
    constant FRAGMENT_SHADER:UInt32        := 0x8B30
    constant VERTEX_SHADER:UInt32          := 0x8B31
  
    constant COMPILE_STATUS:UInt32         := 0x8B81
    constant INFO_LOG_LENGTH:UInt32        := 0x8B84
    constant SHADER_SOURCE_LENGTH:UInt32   := 0x8B88
  
    constant SHADER_TYPE:UInt32            := 0x8B4F
    constant DELETE_STATUS:UInt32          := 0x8B80
    constant LINK_STATUS:UInt32            := 0x8B82
    constant VALIDATE_STATUS:UInt32        := 0x8B83

    constant TEXTURE0:UInt32               := 0x84C0
    constant TEXTURE1:UInt32               := 0x84C1
    constant TEXTURE2:UInt32               := 0x84C2
    constant TEXTURE3:UInt32               := 0x84C3
    constant TEXTURE4:UInt32               := 0x84C4
    constant TEXTURE5:UInt32               := 0x84C5
    constant TEXTURE6:UInt32               := 0x84C6
    constant TEXTURE7:UInt32               := 0x84C7
    constant TEXTURE8:UInt32               := 0x84C8
    constant TEXTURE9:UInt32               := 0x84C9
    constant TEXTURE10:UInt32              := 0x84CA
    constant TEXTURE11:UInt32              := 0x84CB
    constant TEXTURE12:UInt32              := 0x84CC
    constant TEXTURE13:UInt32              := 0x84CD
    constant TEXTURE14:UInt32              := 0x84CE
    constant TEXTURE15:UInt32              := 0x84CF
    constant TEXTURE16:UInt32              := 0x84D0
    constant TEXTURE17:UInt32              := 0x84D1
    constant TEXTURE18:UInt32              := 0x84D2
    constant TEXTURE19:UInt32              := 0x84D3
    constant TEXTURE20:UInt32              := 0x84D4
    constant TEXTURE21:UInt32              := 0x84D5
    constant TEXTURE22:UInt32              := 0x84D6
    constant TEXTURE23:UInt32              := 0x84D7
    constant TEXTURE24:UInt32              := 0x84D8
    constant TEXTURE25:UInt32              := 0x84D9
    constant TEXTURE26:UInt32              := 0x84DA
    constant TEXTURE27:UInt32              := 0x84DB
    constant TEXTURE28:UInt32              := 0x84DC
    constant TEXTURE29:UInt32              := 0x84DD
    constant TEXTURE30:UInt32              := 0x84DE
    constant TEXTURE31:UInt32              := 0x84DF

    constant TEXTURE_MAG_FILTER:UInt32     := 0x2800
    constant TEXTURE_MIN_FILTER:UInt32     := 0x2801
    constant NEAREST:UInt32                := 0x2600
    constant LINEAR:UInt32                 := 0x2601
    constant NEAREST_MIPMAP_NEAREST:UInt32 := 0x2700
    constant LINEAR_MIPMAP_NEAREST:UInt32  := 0x2701
    constant NEAREST_MIPMAP_LINEAR:UInt32  := 0x2702
    constant LINEAR_MIPMAP_LINEAR:UInt32   := 0x2703

    @private
    def native:$NativePointer

    @private
    def window:Window

    ============================================================================
    @hidden
    ============================================================================
    def simpleSpriteProgram:UInt32

    ============================================================================
    @hidden
    ============================================================================
    def simpleSpritePosition:UInt32

    ============================================================================
    @hidden
    ============================================================================
    def simpleSpriteUV:UInt32

    ============================================================================
    @hidden
    ============================================================================
    def simpleSpriteScreenSize:UInt32

    ============================================================================
    @hidden
    ============================================================================
    def simpleSpriteSampler:UInt32

    ============================================================================
    @hidden
    ============================================================================
    def matrixSpriteProgram:UInt32

    ============================================================================
    @hidden
    ============================================================================
    def matrixSpriteMatrix:UInt32

    ============================================================================
    @hidden
    ============================================================================
    def matrixSpriteSampler:UInt32

    ============================================================================
    @hidden
    ============================================================================
    method enableSprites() {
        if simpleSpriteProgram = 0 {
            def fs := Util.compileShader(self, GL.FRAGMENT_SHADER,
                    "varying vec2 uv;\n" +
                    "uniform sampler2D sampler;\n" +
                    "void main() {\n" +
                    "    gl_FragColor = texture2D(sampler, uv);\n" +
                    "}")
            simpleSpriteProgram := Util.createProgram(self,
                    Util.compileShader(self, GL.VERTEX_SHADER,
                        "uniform vec2 screenSize;\n" +
                        "attribute vec2 inPosition;\n" +
                        "attribute vec2 inUV;\n" +
                        "varying vec2 uv;\n" +
                        "void main() {\n" +
                        "    gl_Position = vec4(inPosition.x / screenSize.x * 2.0 - 1.0, -(inPosition.y / screenSize.y * 2.0 - 1.0), 0.0, 1.0);\n" +
                        "    uv = inUV;\n" +
                        "}"),
                    fs)
            simpleSpritePosition := getAttribLocation(simpleSpriteProgram, 
                    "inPosition")
            simpleSpriteUV := getAttribLocation(simpleSpriteProgram, 
                    "inUV")
            Console.writeLine("positions: \{simpleSpritePosition}, \{simpleSpriteUV}")
            simpleSpriteScreenSize := getUniformLocation(simpleSpriteProgram, 
                    "screenSize")
            simpleSpriteSampler := getUniformLocation(simpleSpriteProgram, 
                    "sampler")

            matrixSpriteProgram := Util.createProgram(self,
                    Util.compileShader(self, GL.VERTEX_SHADER,
                        "uniform mat3 matrix;\n" +
                        "attribute vec2 position;\n" +
                        "varying vec2 uv;\n" +
                        "void main() {\n" +
                        "    gl_Position = vec4(matrix * vec3(position, 1.0), 1.0);\n" +
                        "    uv = position;\n" +
                        "}"),
                    fs)
        }
    }

    @private
    init() { }

    @external
    method enable(cap:UInt32)

    @external
    method disable(cap:UInt32)

    @external
    method clearColor(r:Real32, g:Real32, b:Real32, a:Real32)

    @external
    method clear(mask:UInt32)

    @external
    method swapBuffers()

    @external
    method createProgram():UInt32

    @external
    method createShader(type:UInt32):UInt32

    @external
    method shaderSource(shader:UInt32, source:String)

    @external
    method compileShader(shader:UInt32)

    @external
    method getShaderiv(shader:UInt32, pname:UInt32):Int32

    @external
    method getShaderInfoLog(shader:UInt32):String

    @external
    method attachShader(program:UInt32, shader:UInt32)

    @external
    method bindAttribLocation(program:UInt32, index:UInt32, name:String)

    @external
    method linkProgram(program:UInt32)

    @external
    method getProgramiv(program:UInt32, pname:UInt32):Int32

    @external
    method getProgramInfoLog(program:UInt32):String

    @external
    method useProgram(program:UInt32)

    @external
    method viewport(x:Int32, y:Int32, width:UInt32, height:UInt32)

    @external
    method getAttribLocation(program:UInt32, name:String):UInt32

    @external
    method vertexAttribPointer(index:UInt32, size:Int32, type:UInt32,
             normalized:Bit, stride:UInt32, array:Object, byteOffset:UInt32)

    @external
    method enableVertexAttribArray(index:UInt32)

    @external
    method createTexture():UInt32

    @external
    method activeTexture(target:UInt32)

    @external
    method bindTexture(target:UInt32, texture:UInt32)

    @external
    method texImage2D(target:UInt32, level:Int32, format:UInt32, width:Int32, 
            height:Int32, internalFormat:UInt32, type:UInt32, data:Array<UInt8>)

    @external
    method texImage2D(target:UInt32, level:Int32, format:UInt32, width:Int32, 
            height:Int32, internalFormat:UInt32, type:UInt32, 
            data:ImmutableArray<UInt8>)

    @external
    method texImage2D(target:UInt32, level:Int32, format:UInt32, width:Int32, 
            height:Int32, internalFormat:UInt32, type:UInt32, data:Array<Int8>)

    @external
    method texImage2D(target:UInt32, level:Int32, format:UInt32, width:Int32, 
            height:Int32, internalFormat:UInt32, type:UInt32, 
            data:ImmutableArray<Int8>)

    @external
    method texParameter(target:UInt32, name:UInt32, value:Int32)

    @external
    method texParameter(target:UInt32, name:UInt32, value:Real32)

    @external
    method getUniformLocation(program:UInt32, name:String):UInt32

    @external
    method uniform(index:UInt32, r:Real32)

    @external
    method uniform(index:UInt32, i:Int32)

    @external
    method uniform(index:UInt32, v:Vector2)

    @external
    method uniform(index:UInt32, v:Vector3)

    @external
    method uniform(index:UInt32, v:Vector4)

    @external
    method uniform(index:UInt32, m:Matrix3)

    @external
    method uniform(index:UInt32, m:Matrix4)

    @external
    method drawArrays(mode:UInt32, first:Int32, count:UInt32)

    @external
    method blendFunc(src:UInt32, dst:UInt32)

    @external
    method getError():UInt32
}