package panda.gl

class Matrix3 : Value {
    constant IDENTITY := Matrix3(1, 0, 0,
                                 0, 1, 0,
                                 0, 0, 1)

    @private
    def contents:ImmutablePrimitiveArray<Real32>

    init(m11:Real32, m12:Real32, m13:Real32, m21:Real32, m22:Real32, m23:Real32, 
            m31:Real32, m32:Real32, m33:Real32) {
        def contents := PrimitiveArray<Real32>(9)
        contents[0] := m11
        contents[1] := m12
        contents[2] := m13
        contents[3] := m21
        contents[4] := m22
        contents[5] := m23
        contents[6] := m31
        contents[7] := m32
        contents[8] := m33
        self.contents := ImmutablePrimitiveArray<Real32>(contents)
    }

    @private
    init(contents:PrimitiveArray<Real32>) {
        self.contents := ImmutablePrimitiveArray<Real32>(contents)
    }

    function convert():String {
        return "[\{contents[0]}, \{contents[1]}, \{contents[2]}]\n" +
               "[\{contents[3]}, \{contents[4]}, \{contents[5]}]\n" +
               "[\{contents[6]}, \{contents[7]}, \{contents[8]}]"
    }

    @private
    function get(row:Int, column:Int):Real32 {
        return contents[row * 3 + column]
    }

    function *(m:Matrix3):Matrix3 {
        def results := PrimitiveArray<Real32>(9)
        for column in 0 .. 3 {
            for row in 0 .. 3 {
                var sum:Real32 := 0
                for i in 0 .. 3
                    sum += get(i, row) * m.get(column, i)
                results[column * 3 + row] := sum
            }
        }
        return Matrix3(results)
    }

    function *(v:Vector2):Vector2 {
        def v3 := self * Vector3(v.x, v.y, 1)
        return Vector2(v3.x / v3.z, v3.y / v3.z)
    }

    function *(v:Vector3):Vector3 {
        def x := get(0, 0) * v.x + get(0, 1) * v.y + get(0, 2) * v.z
        def y := get(1, 0) * v.x + get(1, 1) * v.y + get(1, 2) * v.z
        def z := get(2, 0) * v.x + get(2, 1) * v.y + get(2, 2) * v.z
        return Vector3(x, y, z)
    }

    @class
    function translation(x:Real32, y:Real32):Matrix3 {
        return Matrix3(1, 0, 0,
                       0, 1, 0,
                       x, y, 1)
    }

    @class
    function scale(s:Real32):Matrix3 {
        return Matrix3(s, 0, 0,
                       0, s, 0,
                       0, 0, 1)
    }

    @class
    function rotation(angle:Real32):Matrix3 {
        def cos := angle.cos
        def sin := angle.sin

        return Matrix3(cos, sin, 0,
                       -sin, cos, 0,
                        0, 0, 1)
    }
}