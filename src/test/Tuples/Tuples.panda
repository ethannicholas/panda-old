class Tuples {
    var a, b := sumAndProduct(10, 20)
    def c, d, e := noisy()
    def _, f, _ := noisy()

    @class
    function sumAndProduct(x:Real, y:Real):(Real, Real) {
        return (x + y, x * y)
    }

    @class
    method noisy():(String, String, String) {
        Console.writeLine("calling noisy!")
        return ("a", "b", "c")
    }

    @class
    method testIgnoringValues() {
        def test := ("I", "Don't", "Care", "About", "All", "Of", "These")
        def a, _, b, _, _, _, _ := test
        assert "\{a} \{b}" = "I Care"
        for (c, _, d, _, _, _, _) in [test]
            assert "\{c} \{d}" = "I Care"
    }

    @class
    method main() {
        def t := new Tuples()
        assert t.a = 30
        assert t.b = 200
        assert t.c = "a"
        assert t.d = "b"
        assert t.e = "c"
        assert t.f = "b"

        def sum, product := sumAndProduct(2, 5)
        assert sum = 7
        assert product = 10

        var realSum:Real, realProduct:Real := sumAndProduct(2, 5)
        assert realSum = 7
        assert realProduct = 10

        def type1, type2, type3 := ("a", 5, 10.0)
        assert type1.class = Char
        assert type2.class = Int32
        assert type3.class = Real64

        def type4:String, type5:Int8, type6:Real32 := ("a", 5, 10.0)
        assert type4.class = String
        assert type5.class = Int8
        assert type6.class = Real32

        def noisy1, noisy2, noisy3 := noisy()
        assert noisy1 = "a"
        assert noisy2 = "b"
        assert noisy3 = "c"

        var tuple := ("String", 12, 15.6, new MutableString())
        var e1:String := tuple[0]
        var e2:Int := tuple[1]
        var e3:Real := tuple[2]
        var e4:MutableString := tuple[3]

        for i in 0 ... 3 {
            def e := tuple[i]
            switch i {
                case 0: assert e.class = String
                case 1: assert e.class = Int
                case 2: assert e.class = Real
                case 3: assert e.class = MutableString
            }
        }

        assert ("Hello", "Goodbye")->>String = "(Hello, Goodbye)"
        assert (null, null, 15)->>String = "(null, null, 15)"

        def x := "Not"
        def y := "a"
        def z := "lambda"

        -- imporant test: the (x, y, z) sequence could be a tuple, or it could
        -- be the start of a lambda because they're all just simple identifiers,
        -- so we need to make sure the parser handles this correctly
        var almostLambda := (x, y, z)
        assert almostLambda->>String = "(Not, a, lambda)"

        testIgnoringValues()

        Console.writeLine("success")
    }
}