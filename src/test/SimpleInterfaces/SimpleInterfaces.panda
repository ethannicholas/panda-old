interface Iterator {
    function hasNext():Bit

    @pre(hasNext)
    method next():Object
}

class Test {
}

class PrimitiveArrayIterator : Test (Iterator) {
    @private
    def array:ImmutablePrimitiveArray<Immutable>

    @private
    var index := 0

    constructor(array:ImmutablePrimitiveArray<Immutable>) {
        self.array := array
    }

    @override
    function hasNext():Bit {
        return index < array.length
    }

    @override
    method next():Object {
        var result := array[index]
        index += 1
        return result
    }
}

class LineIterator (Iterator) {
    @private
    var inStream:InputStream

    @private
    var nextLine:String?

    constructor(inStream:InputStream) {
        self.inStream := inStream
        nextLine := inStream.readLine()
    }

    @override
    function hasNext():Bit {
        return nextLine != null
    }

    @override
    method next():Object {
        var result := nextLine
        assert result != null
        nextLine := inStream.readLine()
        if nextLine = null
            inStream.close()
        return result
    }
}

class Test {
    @class
    method writeEntries(i:Iterator) {
        while i.hasNext
            Console.writeLine(i.next())
    }

    @class
    method main() {
        def array:Test := PrimitiveArrayIterator([1, 8, 9, 12, 45])
        writeEntries(array->Iterator)
        writeEntries(LineIterator(MemoryInputStream("Line 1\nLine 2\nLine 3")))
    }
}