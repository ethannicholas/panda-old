-- Basic Sanity Tests --

def inclusive := 1 ... 3
assert inclusive->>(String) = "[1, 2, 3]"

def exclusive := 1 .. 3
assert exclusive->>(String) = "[1, 2]"

def inclusiveEmpty := 3 ... 1
assert inclusiveEmpty.length = 0

def exclusiveEmpty := 3 ... 1
assert exclusiveEmpty.length = 0

def inclusiveBackwards := 3 ... 1 by -1
assert inclusiveBackwards->>(String) = "[3, 2, 1]"

def exclusiveBackwards := 3 .. 1 by -1
assert exclusiveBackwards->>(String) = "[3, 2]"

assert (1 .. 3)-?>(ListView<Int32>)
assert (1.1 .. 3.3 by 0.1)-?>(ListView<Real64>)
assert (1 .. 3.3)-?>(ListView<Real64>)
assert (1.1 .. 3)-?>(ListView<Real64>)
assert (1 .. 3 by 0.1)-?>(ListView<Real64>)
assert ("A" .. "Z")-?>(ListView<Char>)
assert ("A" .. "Z" by 2)-?>(ListView<Char>)

-- Int8 --

def exclusiveInt8:ListView<Int8> := 1 .. 100
assert exclusiveInt8[77] = 78
assert exclusiveInt8-?>(ListView<Int8>)
assert exclusiveInt8.length = 99

def inclusiveInt8:ListView<Int8> := 1 ... 100
assert inclusiveInt8[40] = 41
assert inclusiveInt8.class-?>(ListView<Int8>)
assert inclusiveInt8.length = 100

def exclusiveInt8Step:ListView<Int8> := 100 .. 0 by -2
assert exclusiveInt8Step[1] = 98
assert exclusiveInt8Step.class-?>(ListView<Int8>)
assert exclusiveInt8Step.length = 50

def inclusiveInt8Step:ListView<Int8> := 100 ... 0 by -2
assert exclusiveInt8Step[4] = 92
assert inclusiveInt8Step.class-?>(ListView<Int8>)
assert inclusiveInt8Step.length = 51

def immutableInt8:ImmutablePrimitiveArray<Int8> := 1 ... 100
assert immutableInt8[97] = 98
assert immutableInt8.class = class(ImmutablePrimitiveArray<Int8>)
assert immutableInt8.length = 100

-- Int16 --

def exclusiveInt16:ListView<Int16> := 1 .. 100
assert exclusiveInt16[52] = 53
assert exclusiveInt16.class-?>(ListView<Int16>)
assert exclusiveInt16.length = 99

def inclusiveInt16:ListView<Int16> := 1 ... 100
assert inclusiveInt16[49] = 50
assert inclusiveInt16.class-?>(ListView<Int16>)
assert inclusiveInt16.length = 100

def exclusiveInt16Step:ListView<Int16> := 100 .. 0 by -2
assert exclusiveInt16Step[10] = 80
assert exclusiveInt16Step.class-?>(ListView<Int16>)
assert exclusiveInt16Step.length = 50

def inclusiveInt16Step:ListView<Int16> := 100 ... 0 by -2
assert inclusiveInt16Step[40] = 20
assert inclusiveInt16Step.class-?>(ListView<Int16>)
assert inclusiveInt16Step.length = 51

def immutableInt16:ImmutablePrimitiveArray<Int16> := 1 ... 100
assert immutableInt16[0] = 1
assert immutableInt16.class = class(ImmutablePrimitiveArray<Int16>)
assert immutableInt16.length = 100

-- Int32 --

def exclusiveInt32:ListView<Int32> := 1 .. 100
assert exclusiveInt32[98] = 99
assert exclusiveInt32.class-?>(ListView<Int32>)
assert exclusiveInt32.length = 99

def inclusiveInt32:ListView<Int32> := 1 ... 100
assert inclusiveInt32[15] = 16
assert inclusiveInt32.class-?>(ListView<Int32>)
assert inclusiveInt32.length = 100

def exclusiveInt32Step:ListView<Int32> := 100 .. 0 by -2
assert exclusiveInt32Step[39] = 22
assert exclusiveInt32Step.class-?>(ListView<Int32>)
assert exclusiveInt32Step.length = 50

def inclusiveInt32Step:ListView<Int32> := 100 ... 0 by -2
assert inclusiveInt32Step[8] = 84
assert inclusiveInt32Step.class-?>(ListView<Int32>)
assert inclusiveInt32Step.length = 51

def immutableInt32:ImmutablePrimitiveArray<Int32> := 1 ... 100
assert immutableInt32[41] = 42
assert immutableInt32.class = class(ImmutablePrimitiveArray<Int32>)
assert immutableInt32.length = 100

-- Int64 --

def exclusiveInt64:ListView<Int64> := 1 .. 100
assert exclusiveInt64[90] = 91
assert exclusiveInt64.class-?>(ListView<Int64>)
assert exclusiveInt64.length = 99

def inclusiveInt64:ListView<Int64> := 1 ... 100
assert inclusiveInt64[31] = 32
assert inclusiveInt64.class-?>(ListView<Int64>)
assert inclusiveInt64.length = 100

def exclusiveInt64Step:ListView<Int64> := 100 .. 0 by -2
assert exclusiveInt64Step[16] = 68
assert exclusiveInt64Step.class-?>(ListView<Int64>)
assert exclusiveInt64Step.length = 50

def inclusiveInt64Step:ListView<Int64> := 100 ... 0 by -2
assert inclusiveInt64Step[17] = 66
assert inclusiveInt64Step.class-?>(ListView<Int64>)
assert inclusiveInt64Step.length = 51

def immutableInt64:ImmutablePrimitiveArray<Int64> := 1 ... 100
assert immutableInt64[88] = 89
assert immutableInt64.class = class(ImmutablePrimitiveArray<Int64>)
assert immutableInt64.length = 100

-- UInt8 --

def exclusiveUInt8:ListView<UInt8> := 1 .. 100
assert exclusiveUInt8[9] = 10
assert exclusiveUInt8.class-?>(ListView<UInt8>)
assert exclusiveUInt8.length = 99

def inclusiveUInt8:ListView<UInt8> := 1 ... 100
assert inclusiveUInt8[46] = 47
assert inclusiveUInt8.class-?>(ListView<UInt8>)
assert inclusiveUInt8.length = 100

def exclusiveUInt8Step:ListView<UInt8> := 100 .. 0 by -2
assert exclusiveUInt8Step[15] = 70
assert exclusiveUInt8Step.class-?>(ListView<UInt8>)
assert exclusiveUInt8Step.length = 50

def inclusiveUInt8Step:ListView<UInt8> := 100 ... 0 by -2
assert inclusiveUInt8Step[13] = 74
assert inclusiveUInt8Step.class-?>(ListView<UInt8>)
assert inclusiveUInt8Step.length = 51

def immutableUInt8:ImmutablePrimitiveArray<UInt8> := 1 ... 100
assert immutableUInt8[15] = 16
assert immutableUInt8.class = class(ImmutablePrimitiveArray<UInt8>)
assert immutableUInt8.length = 100

-- UInt16 --

def exclusiveUInt16:ListView<UInt16> := 1 .. 100
assert exclusiveUInt16[92] = 93
assert exclusiveUInt16.class-?>(ListView<UInt16>)
assert exclusiveUInt16.length = 99

def inclusiveUInt16:ListView<UInt16> := 1 ... 100
assert inclusiveUInt16[18] = 19
assert inclusiveUInt16.class-?>(ListView<UInt16>)
assert inclusiveUInt16.length = 100

def exclusiveUInt16Step:ListView<UInt16> := 100 .. 0 by -2
assert exclusiveUInt16Step[12] = 76
assert exclusiveUInt16Step.class-?>(ListView<UInt16>)
assert exclusiveUInt16Step.length = 50

def inclusiveUInt16Step:ListView<UInt16> := 100 ... 0 by -2
assert inclusiveUInt16Step[22] = 56
assert inclusiveUInt16Step.class-?>(ListView<UInt16>)
assert inclusiveUInt16Step.length = 51

def immutableUInt16:ImmutablePrimitiveArray<UInt16> := 1 ... 100
assert immutableUInt16[89] = 90
assert immutableUInt16.class = class(ImmutablePrimitiveArray<UInt16>)
assert immutableUInt16.length = 100

-- UInt32 --

def exclusiveUInt32:ListView<UInt32> := 1 .. 100
assert exclusiveUInt32[98] = 99
assert exclusiveUInt32.class-?>(ListView<UInt32>)
assert exclusiveUInt32.length = 99

def inclusiveUInt32:ListView<UInt32> := 1 ... 100
assert inclusiveUInt32[26] = 27
assert inclusiveUInt32.class-?>(ListView<UInt32>)
assert inclusiveUInt32.length = 100

def exclusiveUInt32Step:ListView<UInt32> := 100 .. 0 by -2
assert exclusiveUInt32Step[31] = 38
assert exclusiveUInt32Step.class-?>(ListView<UInt32>)
assert exclusiveUInt32Step.length = 50

def inclusiveUInt32Step:ListView<UInt32> := 100 ... 0 by -2
assert inclusiveUInt32Step[18] = 64
assert inclusiveUInt32Step.class-?>(ListView<UInt32>)
assert inclusiveUInt32Step.length = 51

def immutableUInt32:ImmutablePrimitiveArray<UInt32> := 1 ... 100
assert immutableUInt32[72] = 73
assert immutableUInt32.class = class(ImmutablePrimitiveArray<UInt32>)
assert immutableUInt32.length = 100

-- UInt64 --

def exclusiveUInt64:ListView<UInt64> := 1 .. 100
assert exclusiveUInt64[17] = 18
assert exclusiveUInt64.class-?>(ListView<UInt64>)
assert exclusiveUInt64.length = 99

def inclusiveUInt64:ListView<UInt64> := 1 ... 100
assert inclusiveUInt64[25] = 26
assert inclusiveUInt64.class-?>(ListView<UInt64>)
assert inclusiveUInt64.length = 100

def exclusiveUInt64Step:ListView<UInt64> := 100 .. 0 by -2
assert exclusiveUInt64Step[19] = 62
assert exclusiveUInt64Step.class-?>(ListView<UInt64>)
assert exclusiveUInt64Step.length = 50

def inclusiveUInt64Step:ListView<UInt64> := 100 ... 0 by -2
assert inclusiveUInt64Step[14] = 72
assert inclusiveUInt64Step.class-?>(ListView<UInt64>)
assert inclusiveUInt64Step.length = 51

def immutableUInt64:ImmutablePrimitiveArray<UInt64> := 1 ... 100
assert immutableUInt64[42] = 43
assert immutableUInt64.class = class(ImmutablePrimitiveArray<UInt64>)
assert immutableUInt64.length = 100

-- Real32 --

def exclusiveReal32:ListView<Real32> := 0.5 .. 100
assert exclusiveReal32[17] = 17.5
assert exclusiveReal32.class-?>(ListView<Real32>)
assert exclusiveReal32.length = 100

def inclusiveReal32:ListView<Real32> := 0.5 ... 100
assert inclusiveReal32[28] = 28.5
assert inclusiveReal32.class-?>(ListView<Real32>)
assert inclusiveReal32.length = 100

def exclusiveReal32Step:ListView<Real32> := 100 .. 0 by -2.5
assert exclusiveReal32Step[6] = 85
assert exclusiveReal32Step.class-?>(ListView<Real32>)
assert exclusiveReal32Step.length = 40

def inclusiveReal32Step:ListView<Real32> := 100 ... 0 by -2.5
assert inclusiveReal32Step[1] = 97.5
assert inclusiveReal32Step.class-?>(ListView<Real32>)
assert inclusiveReal32Step.length = 41

def immutableReal32:ImmutablePrimitiveArray<Real32> := 0.5 ... 100
assert immutableReal32[42] = 42.5
assert immutableReal32.class = class(ImmutablePrimitiveArray<Real32>)
assert immutableReal32.length = 100

-- Real64 --

def exclusiveReal64:ListView<Real64> := 0.5 .. 100
assert exclusiveReal64[12] = 12.5
assert exclusiveReal64.class-?>(ListView<Real64>)
assert exclusiveReal64.length = 100

def inclusiveReal64:ListView<Real64> := 0.5 ... 100
assert inclusiveReal64[87] = 87.5
assert inclusiveReal64.class-?>(ListView<Real64>)
assert inclusiveReal64.length = 100

def exclusiveReal64Step:ListView<Real64> := 100 .. 0 by -2.5
assert exclusiveReal64Step[15] = 62.5
assert exclusiveReal64Step.class-?>(ListView<Real64>)
assert exclusiveReal64Step.length = 40

def inclusiveReal64Step:ListView<Real64> := 100 ... 0 by -2.5
assert inclusiveReal64Step[18] = 55
assert inclusiveReal64Step.class-?>(ListView<Real64>)
assert inclusiveReal64Step.length = 41

def immutableReal64:ImmutablePrimitiveArray<Real64> := 0.5 ... 100
assert immutableReal64[97] = 97.5
assert immutableReal64.class = class(ImmutablePrimitiveArray<Real64>)
assert immutableReal64.length = 100

-- Char --

def exclusiveChar:ListView<Char> := "A" .. "E"
assert exclusiveChar[3] = "D"
assert exclusiveChar.class-?>(ListView<Char>)
assert exclusiveChar.length = 4

def inclusiveChar:ListView<Char> := "A" ... "E"
assert inclusiveChar[4] = "E"
assert inclusiveChar.class-?>(ListView<Char>)
assert inclusiveChar.length = 5

def exclusiveCharStep:ListView<Char> := "E" .. "A" by -1
assert exclusiveCharStep[2] = "C"
assert exclusiveCharStep.class-?>(ListView<Char>)
assert exclusiveCharStep.length = 4

def inclusiveCharStep:ListView<Char> := "E" ... "A" by -1
assert inclusiveCharStep[1] = "D"
assert inclusiveCharStep.class-?>(ListView<Char>)
assert inclusiveCharStep.length = 5

def immutableChar:ImmutablePrimitiveArray<Char> := "A" ... "E"
assert immutableChar[1] = "B"
assert immutableChar.class = class(ImmutablePrimitiveArray<Char>)
assert immutableChar.length = 5

Console.writeLine("success")