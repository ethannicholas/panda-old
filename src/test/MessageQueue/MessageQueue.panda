-- Simple simulation of a lengthy computation. We have a Producer produce data
-- for each Consumer to operate on. Each Consumer takes a long time to calculate
-- its result, and then posts the results to a Destination which aggregates and
-- sorts the data.

class Producer : Immutable {
    constant MAX := 1000
    def queue:MessageQueue<Int>
    
    init(queue:MessageQueue<Int>) {
        self.queue := queue
    }
    
    method start() {
        Thread.start(method() {
            for i in 1 ... MAX
                self.queue.post(i)
        })
    }
}

class Consumer : Immutable {
    @private
    def sourceQueue:MessageQueue<Int>
    
    @private
    def destQueue:MessageQueue<Int>
    
    init(sourceQueue:MessageQueue<Int>, destQueue:MessageQueue<Int>) {
        self.sourceQueue := sourceQueue
        self.destQueue := destQueue
    }

    method start() {
        Thread.start(method() {
            loop {
                def msg := self.sourceQueue.getMessage()
                Thread.sleep(1000)
                self.destQueue.post(msg ^ 2)
            }
        })
    }
}

class Destination : Immutable {
    @private
    def destQueue:MessageQueue<Int>
    
    init(destQueue:MessageQueue<Int>) {
        self.destQueue := destQueue
    }
    
    -- quick-and-extremely-dirty QuickSort, until I have time to do proper
    -- sorting in the core libraries
    -- FIXME replace this with a real sort implementation
    @private
    @class
    method sort(a:Array<Int>) {
        if a.length <= 1
            return
        def pivotIndex := a.length // 2
        def pivot := a[pivotIndex]
        def pre := Array<Int>()
        def post := Array<Int>()
        for i in 0 .. a.length {
            if i = pivotIndex
                continue
            var v := a[i]
            if v < pivot
                pre.add(v)
            else
                post.add(v)
        }
        sort(pre)
        sort(post)
        for i in 0 .. pre.length
            a[i] := pre[i]
        a[pre.length] := pivot
        for i in 0 .. post.length
            a[i + pre.length + 1] := post[i]
    }
    
    method start() {
        Thread.start(method() {
            def results := Array<Int>()
            while results.length < Producer.MAX {
                def msg := self.destQueue.getMessage()
                results.add(msg)
            }
            sort(results)
            for i in 0 .. results.length
                Console.writeLine(results[i])
            System.exit()
        })
    }
}

class Test {
    constant THREADS := 500

    @class
    method main() {
        def sourceQueue := MessageQueue<Int>()
        def destQueue := MessageQueue<Int>()
        def p := Producer(sourceQueue)
        def d := Destination(destQueue)
        for i in 1 ... THREADS
            Consumer(sourceQueue, destQueue).start()
        p.start()
        d.start()
    }
}