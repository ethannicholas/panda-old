function type(x:Int8):String {
    return "Int8"
}

function type(x:Int16):String {
    return "Int16"
}

function type(x:Int32):String {
    return "Int32"
}

for x in 0 ... 11
    Console.write("Hello World\n"[x])

def step:Int8 := (Random.int(0) + 1)->(Int8)

for x in 11 ... 0 by -step
    Console.write("\ndlrow olleH"[x])

for x in 0 .. -1
    Console.writeLine("Failure!")
    
for x in 0 .. 1
    Console.writeLine(type(x))
    
for x:Int32 in 0 .. 1
    Console.writeLine(type(x))
    
-- test various combinations of compile-time constants / values that cannot be
-- determined at compile time, from Int8.MIN to Int8.MAX. Test should be valid
-- for any numeric type, but of course Int8 is the narrowest and thus fastest to
-- test the whole range.

var boundsTest := 0
for x:Int8 in -128 ... 127
    boundsTest += x

for x:Int8 in 127 ... -128 by -1
    boundsTest += x

for x:Int8 in -128 ... 127 by step
    boundsTest += x

for x:Int8 in 127 ... -128 by -step
    boundsTest += x

for x:Int8 in -128 ... 127 by -1
    unreachable

for x:Int8 in 127 ... -128
    unreachable

for x:Int8 in -128 ... 127 by -step
    unreachable

for x:Int8 in 127 ... -128 by step
    unreachable

def min:Int8 := (Random.int(0) - 128)->(Int8)
def max:Int8 := (Random.int(0) + 127)->(Int8)

for x:Int8 in min ... max
    boundsTest += x

for x:Int8 in max ... min by -1
    boundsTest += x

for x:Int8 in min ... max by step
    boundsTest += x

for x:Int8 in max ... min by -step
    boundsTest += x

for x:Int8 in min ... max by -1
    unreachable

for x:Int8 in max ... min
    unreachable

for x:Int8 in min ... max by -step
    unreachable

for x:Int8 in max ... min by step
    unreachable

Console.writeLine(boundsTest)

for c in "A" .. "C"
    Console.writeLine(c)

for c in "A" ... "E" by 2
    Console.writeLine(c)

for c in "E" ... "A" by -2
    Console.writeLine(c)

var total := 0.0
for x in 0.0 ... 50.0 by 0.25
    total += x
Console.writeLine(total)

var test := ["Test12", "Test23", "Test34"]
outer: for i in 0 .. test.length
    for j in 0 .. test[i].length
        if test[i][j] = "3" {
            Console.writeLine("First 3 found at \{i}:\{j}")
            break outer
        }