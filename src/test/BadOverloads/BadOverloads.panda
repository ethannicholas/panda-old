class BadOverloads {
    function +():Int {
        return 12    
    }

    method +(i:Int):Int {
        return 12
    }

    @class
    function +(i:Int, i:Int):Int {
        return 12
    }

    @class
    function +(b:BadOverloads, i:Int, o:Object):Int {
    }

    @class
    function =(o:Object, o:Object):Bit {
    }

    @override
    function =(b:BadOverloads):Bit {
    }

    function []():Int {
    }

    method [](i:Int):Int {
    }

    @class
    function []():Int {
    }

    @class
    method [](i:Int):Int {
    }

    function []:=(i:Int, o:Object):Int {
        return 12
    }

    method []:=(i:Int, o:Object):Int {
        return 12
    }

    method []:=(i:Int) {
    }

    @class
    method []:=(i:Int, v:Int) {
    }

    function [..](i:Int, r:Real, o:Object, s:String):Int {
        return 12
    }

    function [..](i:Int, r:Real, o:Object?):Int {
        return 12
    }

    method [..](i:Int):Int {
        return 12
    }

    method [..]:=(i:Int, o:Object):Int {
        return 12
    }

    method [..]:=(i:Int, o:Object, r:Real?) {
    }

    @class
    method [..]:=(i:Int, o:Object, r:Real?) {
    }

    method test:=(i:Int):Int {
    }

    method test:=(i:Int, o:Object) {
    }

    method ->>(s:String):MutableString {
        return s->>MutableString
    }

    @class
    method ->>(s:String):MutableString {
        return s->>MutableString
    }

    @class
    method ->>(b:BadOverloads, s:String):MutableString {
        return s->>MutableString
    }

    method convert():String {
        return "broken"
    }
}