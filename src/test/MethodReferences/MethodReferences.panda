class Test {
    @class
    function a():String {
        return "I'm 'a'!"
    }

    method b():(String, String) {
        return ("I'm", "'b'!")
    }

    function c(a:()=>(String)):String {
        return a() + "... as interpreted by 'c1'!"
    }

    @class
    function c(s:String):String {
        return "And another variant of 'c' says '\{s}'!"
    }

    function d(s:String):String {
        return "d" * s.length
    }

    function e(s:String):String {
        def a := d
        return d(s)
    }

    function e(i:Int):Int {
        return i * 42
    }

    function f(i:Int):Int {
        def e1:(Int)=>(Int) := e
        def e2:(String)=>(String) := e
        return e2(e1(i).convert()).length
    }
}

def context := Test()
def a := Test.a
def b := Test.b
def c1:(Test, ()=>(String))=>(String) := Test.c
def c2:(String)=>(String) := Test.c

Console.writeLine(a())
Console.writeLine(Test().f(1273))
def t := b(context)
Console.writeLine("\{t[0]} \{t[1]}")
Console.writeLine(c1(context, a))
assert (Int.+)(12, 6) = 18
def sqrt := Real.get_sqrt
assert sqrt(64) = 8

def filter := [1, 2, 3, 4, 5, 6, 7, 8, 9, 10].filter
Console.writeLine(filter(n => n % 3 = 0))

interface Test2 {
    function d():Int
}

class Test3 (Test2) {
    @override
    function d():Int {
        return 42
    }
}

def d := Test2.d
assert d(Test3()) = 42

Console.writeLine(c2("success"))