class TestHarness {
    var passed:Int
    var pandac:String
    var src:File
    var target:File
    var java:String?
    
    init(pandac:String, src:File, target:File) {
        self.pandac := pandac
        self.src := src
        self.target := target
    }
    
    method runTest(name:String):Bit {
        Console.writeLine("### compiling test " + name + "...")
        def panda := src.resolve("test/" + name + "/" + name + ".panda")
        def exe := target.resolve("test/" + name + "/" + name)
        if exe.exists()
            exe.delete()
        def parent := exe.parent()
        if parent != null
            parent.createDirectories()
        def output := target.resolve("test/" + name + "/" + name + ".out")
        if output.exists()
            output.delete()
        def outputStream := output.openOutputStream()
        def pandacParsed := pandac.parse(/([^ ]+)\s+(.+)/)
        def pandacExe:String
        def params:Array<String>
        if pandacParsed != null {
            pandacExe := pandacParsed[0]
            params := Array<String>(pandacParsed[1].split(/\s+/))
        }
        else {
            pandacExe := pandac
            params := Array<String>()
        }
        params.add("-o")
        params.add(exe.path)
        if java != null {
            params.add("-f")
            params.add("jar")
        }
        params.add(panda.path)
        System.exec(File(pandacExe), null, outputStream, null, params...)
        outputStream.close()
        if output.readAsString().length = 0 {
            var inputStream:InputStream? := null
            var input := src.resolve("test/" + name + "/" + name + ".in")
            if input.exists()
                inputStream := input.openInputStream()
            if output.exists()
                output.delete()
            outputStream := output.openOutputStream()
            Console.writeLine("### running test " + name + "...")
            if java = null
                System.exec(exe, inputStream, outputStream, null)
            else
                System.exec(File(java), inputStream, outputStream, null, "-jar", exe.path)
            outputStream.close()
        }
        var expected := src.resolve("test/" + name + "/" + name + ".expected")
        var expectedData := expected.readAsString()
        var actualData := output.readAsString()
        if expectedData = actualData {
            Console.writeLine("passed")
            return true
        }
        else {
            Console.writeLine("failed with output: '\{actualData}'")
            Console.writeLine("expected output: '\{expectedData}'")
            return false
        }
    }
    
    method runAllTests() {
        passed := 0
        var total := 0
        def files := src.resolve("test").list()
        for f in files {
            if f.isDirectory() {
                total += 1
                if runTest(f.name)
                    passed += 1
            }
        }
        Console.writeLine("\{passed} of \{total} tests passed.")
    }
    
    @class
    method main(arg:PrimitiveArray<String>) {
        var start := 0
        var java:String? := null
        if arg[start] = "--java" {
            java := arg[start + 1]
            start += 2
        }
        var test := TestHarness(arg[start], File(arg[start + 1]),
                File(arg[start + 2]))
        test.java := java
        test.runAllTests()
    }
}