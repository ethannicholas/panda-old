-- Signed Integer Math --

assert 8 + 15 = 23
assert 20000 - 30000 = -10000
assert 48 * 16 = 768
assert -800 // 40 = -20
assert 2000000 // 4 = 500000
assert 7 % 2 = 1
assert -7 % 2 = -1
assert 2^20 = 1048576
assert 4120^0 = 1
assert -6^2 = -36
assert 2->Int64^60 = 1152921504606846976

-- Unsigned Integer Math --

assert 128->UInt8 + 15 = 143
assert 30000->UInt16 - 20000->UInt16 = 10000
assert 48->Int64 * 16->UInt32 = 768
assert 800->UInt16 // 40->UInt16 = 20
assert 2000000->UInt64 // 4->UInt32 = 500000
assert 247->UInt8 % 2 = 1
assert -7 % 2->UInt32 = -1
assert 2->UInt32^20 = 1048576
assert 4120->UInt16^0 = 1
assert 2->UInt64^60 = 1152921504606846976

-- Integer Comparison --

assert 0 < 1
assert !(0 < 0)
assert !(0 < -5)
assert -50 <= 5
assert 5 <= 5
assert !(5 <= 4)
assert 8 > -10
assert !(8 > 8)
assert !(8 > 9)
assert 7 >= 6
assert 7 >= 7
assert !(7 >= 8)
assert 50 = 50
assert !(-5 = 5)
assert 49 != 50
assert !(256 != 256)

-- Integer Bitwise Operations --

assert (0b11000011001001 && 0b10100101001000) = 0b10000001001000
assert (0b11000011001001 || 0b10100101001000) = 0b11100111001001
assert (0b11000011001001 ~~ 0b10100101001000) = 0b01100110000001
assert 51 << 3 = 408
assert 51 >> 2 = 12
assert -2 << 5 = -64
assert -8000 >> 3 = -1000
assert 3000000000 >> 1 = 1500000000
assert !!1234 = -1235

-- Integer Compound Assignment --

var i := 8
i += 1
assert i = 9
i -= 5
assert i = 4
i *= 7
assert i = 28
i //= 4
assert i = 7
i <<= 4
assert i = 112
i >>= 2
assert i = 28
i ^= 3
assert i = 21952
i &&= 255
assert i = 192
i ||= 106
assert i = 234
i ~~= 46
assert i = 196

-- Verify Single LValue Evaluation --

class Test {
    var i:Int64
    
    constructor() {
        Console.writeLine("creating Test")
    }
}

new Test().i += 54

-- Real Math --

assert 1.25 + 3.75 = 5
assert 57.2 - 57.2 = 0
assert 4 * 1.5 = 6
assert 6 / 12 = 0.5
assert -12000 / 0.25 = -48000
assert 100 ^ 0.5 = 10

-- Real Comparisons --

assert 98.1 = 98.1
assert !(5.6 = 5.7)
assert 7 != 14.2
assert !(14.2 != 14.2)
assert 7.01 > 7
assert !(0 > 0.005)
assert -53.2 >= -53.4
assert -53.2 >= -53.2
assert !(-53.2 >= -53.1)
assert 0 < 0.2
assert !(900 < 50)
assert 5.5 <= 6.5
assert 5.5 <= 5.5
assert !(5.5 <= 4.5)

-- Real Compound Assignment --

var f := 7.25
f += 1.5
assert f = 8.75
f -= 5
assert f = 3.75
f *= 4.0
assert f = 15
f /= 30
assert f = 0.5
f ^= 2.0
assert f = 0.25

-- Bit Logic --

assert (true & true) = true
assert (true & false) = false
assert (false & true) = false
assert (false & false) = false
assert (true | true) = true
assert (true | false) = true
assert (false | true) = true
assert (false | false) = false
assert (true ~ true) = false
assert (true ~ false) = true
assert (false ~ true) = true
assert (false ~ false) = false

-- Bit Comparison --

assert true = true
assert false = false
assert !(true = false)
assert true != false
assert !(true != true)
assert !(false != false)

-- Bit Compound Assignment --

var b := false
assert !b
b |= true
assert b
b &= false
assert !b
b ~= true
assert b

-- Object Comparison --

var s1 := "Hello, World!"
var s2 := "Hello, World!"
var s3 := "Goodbye, World!"
assert s1 = s2
assert !(s1 != s2)
assert s1.hash = s2.hash
assert !(s2 = s3)
assert s2 != s3
assert s2.hash != s3.hash

var m1 := s1->>MutableString
var m2 := s2->>MutableString
assert m1 == m1
assert m1 !== m2
assert !(m1 !== m1)
assert !(m1 == m2)

Console.writeLine("Success")