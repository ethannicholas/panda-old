-- the presence of the slice (as opposed to slice assignment) function causes a
-- different code path to be taken, need to make sure we test both

class WithGetter {
    function [...](start:Int?, end:Int?, step:Int):Int {
        return 0
    }

    method [...]:=(v:Int) {
        Console.writeLine("no args: \{v}")
    }

    method [...]:=(start:Int, v:Int) {
        Console.writeLine("one arg: \{v}")
    }

    method [...]:=(start:Int, end:Int, v:Int) {
        Console.writeLine("two args: \{v}")
    }

    method [...]:=(start:Int?, end:Int, v:Int) {
        Console.writeLine("two args, nullable start: \{v}")
    }

    method [...]:=(start:Int, end:Int, step:Int, v:Int) {
        Console.writeLine("three args: \{v}")
    }

    method [...]:=(start:Int?, end:Int, step:Int, v:Int) {
        Console.writeLine("three args, nullable start: \{v}")
    }

    method [...]:=(start:Int, end:Int?, step:Int, v:Int) {
        Console.writeLine("three args, nullable end: \{v}")
    }

    method [...]:=(start:Int?, end:Int?, step:Int, v:Int) {
        Console.writeLine("three args, nullable start and end: \{v}")
    }

    method test() {
        self[...] := 0
        self[... by 2] := 1
        self[...1] := 2
        self[...1 by 2] := 3
        self[1...] := 4
        self[1... by 2] := 5
        self[1...1] := 6
        self[1...1 by 2] := 7
        self[1...1 by 1] := 6
    }
}

class WithoutGetter {
    method [...]:=(v:Int) {
        Console.writeLine("no args: \{v}")
    }

    method [...]:=(start:Int, v:Int) {
        Console.writeLine("one arg: \{v}")
    }

    method [...]:=(start:Int, end:Int, v:Int) {
        Console.writeLine("two args: \{v}")
    }

    method [...]:=(start:Int?, end:Int, v:Int) {
        Console.writeLine("two args, nullable start: \{v}")
    }

    method [...]:=(start:Int, end:Int, step:Int, v:Int) {
        Console.writeLine("three args: \{v}")
    }

    method [...]:=(start:Int?, end:Int, step:Int, v:Int) {
        Console.writeLine("three args, nullable start: \{v}")
    }

    method [...]:=(start:Int, end:Int?, step:Int, v:Int) {
        Console.writeLine("three args, nullable end: \{v}")
    }

    method [...]:=(start:Int?, end:Int?, step:Int, v:Int) {
        Console.writeLine("three args, nullable start and end: \{v}")
    }

    method test() {
        self[...] := 0
        self[... by 2] := 1
        self[...1] := 2
        self[...1 by 2] := 3
        self[1...] := 4
        self[1... by 2] := 5
        self[1...1] := 6
        self[1...1 by 2] := 7
        self[1...1 by 1] := 6
    }
}

class MultipleGetters {
    function [...](start:Int, end:Int?):Int {
        return 0
    }

    function [...](start:Int?):Int {
        return 0
    }

    method [...]:=(start:Int?, end:Int?, step:Int, v:Int) {
        Console.writeLine("three args, nullable start and end: \{v}")
    }

    method test() {
        self[...] := 0
        self[... by 2] := 1
        self[...1] := 2
        self[...1 by 2] := 3
        self[1...] := 4
        self[1... by 2] := 5
        self[1...1] := 6
        self[1...1 by 2] := 7
        self[1...1 by 1] := 6
    }
}

Console.writeLine("## With Getter ##")
new WithGetter().test()
Console.writeLine()
Console.writeLine("## Without Getter ##")
new WithoutGetter().test()
Console.writeLine()
Console.writeLine("## Multiple Getters ##")
new MultipleGetters().test()
