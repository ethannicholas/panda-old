class Promotion {
    @class 
    function type(x:Int8):String {
        return "Int8"
    }

    @class 
    function type(x:Int32):String {
        return "Int32"
    }

    @class 
    function type(x:Int64):String {
        return "Int64"
    }

    @class
    function type(x:Real32):String {
        return "Real32"
    }

    @class 
    function type(x:Real64):String {
        return "Real64"
    }

    @class 
    method main() {
        var a := 32
        assert type(a) = "Int32"
        
        var b:Int8 := 30
        assert type(b) = "Int8"
        
        var c := a * b
        assert type(c) = "Int32"
        assert c = 960
        
        var d := a * 5000000000
        assert type(d) = "Int64"

        -- test both constant and variable promotions for all int sizes
        
        -- Int8 --
        
        assert type(8->(Int8) * 40) = "Int32"
        assert 8->(Int8) * 40 = 320
        assert type(8->(Int8) * 50->(Int64)) = "Int64"
        assert 8->(Int8) * 50 = 400
        
        assert type(8->(Int8) * 0.25->(Real32) ) = "Real32"
        assert 8->(Int8) * 0.25->(Real32)  = 2
        assert type(8->(Int8) * 0.25->(Real64)) = "Real64"
        assert 8->(Int8) * 0.25->(Real64) = 2
        
        var i8:Int8 := 8
        assert type(i8 * 0.25->(Real32) ) = "Real32"
        assert i8 * 0.25->(Real32)  = 2
        assert type(i8 * 0.25->(Real64)) = "Real64"
        assert i8 * 0.25->(Real64) = 2
        
        -- Int16 --
        
        assert type(16->(Int16) * 40) = "Int32"
        assert 16->(Int16) * 40 = 640
        assert type(16->(Int16) * 50->(Int64)) = "Int64"
        assert 16->(Int16) * 50 = 800
        
        assert type(16->(Int16) * 0.25->(Real32) ) = "Real32"
        assert 16->(Int16) * 0.25->(Real32)  = 4
        assert type(16->(Int16) * 0.25->(Real64)) = "Real64"
        assert 16->(Int16) * 0.25->(Real64) = 4
        
        var i16:Int16 := 16
        assert type(i16 * 0.25->(Real32) ) = "Real32"
        assert i16 * 0.25->(Real32)  = 4
        assert type(i16 * 0.25->(Real64)) = "Real64"
        assert i16 * 0.25->(Real64) = 4
        
        -- Int32 --
        
        assert type(32->(Int32) * 40) = "Int32"
        assert 32->(Int32) * 40 = 1280
        assert type(32->(Int32) * 50->(Int64)) = "Int64"
        assert 32->(Int32) * 50 = 1600
        
        assert type(32->(Int32) * 0.25->(Real32) ) = "Real32"
        assert 32->(Int32) * 0.25->(Real32)  = 8
        assert type(32->(Int32) * 0.25->(Real64)) = "Real64"
        assert 32->(Int32) * 0.25->(Real64) = 8
        
        var i32:Int32 := 32
        assert type(i32 * 0.25->(Real32) ) = "Real32"
        assert i32 * 0.25->(Real32)  = 8
        assert type(i32 * 0.25->(Real64)) = "Real64"
        assert i32 * 0.25->(Real64) = 8

        -- Int64 --

        assert type(64->(Int64) * 40) = "Int64"
        assert 64->(Int64) * 40 = 2560
        assert type(64->(Int64) * 50->(Int64)) = "Int64"
        assert 64->(Int64) * 50 = 3200

        assert type(64->(Int64) * 0.25->(Real32) ) = "Real64"
        assert 64->(Int64) * 0.25->(Real32)  = 16
        assert type(64->(Int64) * 0.25->(Real64)) = "Real64"
        assert 64->(Int64) * 0.25->(Real64) = 16
        
        var i64:Int64 := 64
        assert type(i64 * 0.25->(Real32) ) = "Real64"
        assert i64 * 0.25->(Real32)  = 16
        assert type(i64 * 0.25->(Real64)) = "Real64"
        assert i64 * 0.25->(Real64) = 16
        
        Console.writeLine("Success")
    }
}