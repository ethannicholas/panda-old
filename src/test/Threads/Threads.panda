class Thread1 : Thread {
	@override
	method run() {
		var queue := context["queue"]->(MessageQueue)
		-- wait for Thread2 to signal that it's ready
		queue.getMessage()
		-- ensure that our context is independent of the change made by Thread2
		queue := context["queue"]->(MessageQueue)
		Console.writeLine(queue.getMessage()->(String))
	}
}

class Thread2 : Thread {
	@override
	method run() {
		var queue := context["queue"]->(MessageQueue)
		-- modify our context
		context["queue"] := new MessageQueue()
		-- cause Thread1 to re-fetch its queue, ensuring that it doesn't see the
		-- change we made to our context
		queue.post("ready")
		-- post a message to the original queue
		queue.post("Hello, World!")
	}
}

var queue := new MessageQueue()
Thread.context["queue"] := queue
new Thread1().start()
new Thread2().start()
