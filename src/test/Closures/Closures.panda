class Closures {
    def field1 := "Field1"
    var field2 := 0
    constant field3 := "Field3"

    function test1():()=&>(Int) {
        return method():Int {
            self.field2 += 1
            return self.field2
        }
    }

    function test2(x:Int):(Int)=>*(Int) {
        return y => x * y 
    }

    function test3():(String)=>(String) {
        def local1 := "Local1"
        def local2 := "Local2"
        return function(s:String):String {
            return local1 + s + local2 + self.field1 + field3
        }
    }

    @class
    method main() {
        def test := Closures()
        def counter := test.test1()
        assert counter() = 1
        assert counter() = 2
        assert counter() = 3

        def times5 := test.test2(5)
        assert times5(5) = 25
        assert times5(9) = 45
        assert times5(12) = 60

        def string := test.test3()
        assert string("Parameter") = "Local1ParameterLocal2Field1Field3"
        Console.writeLine("success")
    }
}