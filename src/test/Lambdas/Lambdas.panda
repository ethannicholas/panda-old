method test1(a:PrimitiveArray<Int>, fn:(Int)=>(Int)):PrimitiveArray<Int> {
    var result := PrimitiveArray<Int>(a.length)
    for (i, v) in a.enumeration()
        result[i] := fn(v)
    return result
}

Console.writeLine(test1([1, 2, 3, 4, 5], x => x ^ 2))
Console.writeLine(test1([1, 2, 3, 4, 5], x:Int => x ^ 2))
Console.writeLine(test1([1, 2, 3, 4, 5], (x:Int) => x ^ 2))

method test2(a:PrimitiveArray<Int>, fn:(Int, Int)=>(Int)):Int {
    var result := a[0]
    for i in 1 .. a.length
        result := fn(result, a[i])
    return result
}

Console.writeLine(test2([1, 2, 3, 4, 5], (x, y) => x + y))
Console.writeLine(test2([1, 2, 3, 4, 5], (x, y) => x * y))

var sentence := "I am going to multiply by 2 all 3 numbers in this sentence " +
        "of 16 words"
Console.writeLine(sentence.replace(/\d+/, number => number.convert()->Int * 2))

def mul1:(Int)=>(Int) := x => x * 2
def mul2:(Int)=>(Real) := x => x * 2
def mul3 := x:Int => x * 2

Console.writeLine("\{mul1(5)}: \{mul1(5).class}")
Console.writeLine("\{mul2(5)}: \{mul2(5).class}")
Console.writeLine("\{mul3(5)}: \{mul3(5).class}")
