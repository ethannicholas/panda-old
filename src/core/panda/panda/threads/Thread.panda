package panda.threads

================================================================================
Represents a thread of execution within a program. Each program begins with a
single thread, and may create more. By default, any living threads prevent a 
program from exiting, even if its `main()` method ends. The [preventsExit] flag
may be toggled to change this behavior.

As Panda has neither global nor class-level variables, threads do not (usually)
have any access to each other's data. Eliminating memory sharing means that 
there is no need for mutexes, semaphores, or other common thread synchronization 
constructs; mutable objects are only accessible from a single thread and there
is therefore no contention. 

Threads communicate with each other using [MessageQueue] objects, which normally
only permit [Immutable] objects to be sent. Mutable objects may be sent, but at
the cost of terminating the calling thread.

In situations where it really is necessary to have multiple threads access
potentially-shared mutable objects, the [postUnsafe](MessageQueue::postUnsafe)
method exists. This allows you to pass mutable objects between threads without
terminating the calling thread. If the object (including any other mutable 
objects it directly or indirectly points to) is truly 'handed off' and no longer 
accessed by the sending thread, no danger exists. If the sending thread 
continues to access the sent object, [Lock] must be used to synchronize access 
to the shared object.
================================================================================
class Thread : Immutable {
    @private
    def id:Int

    ============================================================================
    A per-thread MessageQueue which may be used for any purpose.
    ============================================================================
    def queue := new MessageQueue()

    ============================================================================
    `true` if this thread will prevent the program from exiting. The program 
    exits when there are zero `preventsExit` threads remaining.
    ============================================================================
    def preventsExit := true
    
    @private
    def threadLocals:$NativePointer
    
    ============================================================================
    A collection of immutable objects which may be accessed from anywhere in the
    current thread, and which may be inherited by newly-created child threads. 
    The default thread context is empty.
    ============================================================================
    @thread
    def context:HashMap := new HashMap()

    @private
    def threadEntry:()=&>*()

    ============================================================================
    Creates a new thread which will execute its [run()] method when [start()] is
    called. As the default `run()` method does not do anything, this is only
    useful for subclasses of `Thread` which override the `run()` method.
    ============================================================================
    @protected
    constructor() {
        constructor(method() {
        })
    }

    @private
    constructor(threadEntry:()=&>*()) {
        self.threadEntry := threadEntry
    }

    ============================================================================
    The thread entry method that is called when the thread starts up. This 
    method is called automatically by [start()]; you should not call it 
    manually.

    The default implementation does nothing.

    @see start()
    ============================================================================
    @protected
    method run() {
        threadEntry()
    }
    
    ============================================================================
    Sets whether this program should prevent the program from exiting. The
    program exits when there are zero `preventsExit` threads remaining.
    
    @param preventsExit whether this thread should prevent the program from
            exiting
    ============================================================================
    @self
    method preventsExit:=(preventsExit:Bit) {
        -- need to update in native code since the field is marked static
        setThreadPreventsExit(preventsExit)
    }
    
    ============================================================================
    Starts the thread, calling its [run()] method. The new thread's context will 
    contain all [Immutable] objects from the current thread's context.

    @see run()
    ============================================================================
    @static
    method start() {
        var newContext := new HashMap()
        for (key, value) in context.entries {
            if key-?>(Immutable?) & value-?>(Immutable?)
                newContext[key] := value
        }
        startThread(newContext)
    }

    ============================================================================
    Starts the thread with a new context, calling its [run()] method. The new
    thread's context (available from the [context] field) will be a union of the
    current thread's context and the specified `newContext` map.
    
    @param newContext the new thread's context
    ============================================================================
    @static
    -- FIXME take a Map instead
    method start(newContext:HashMap) {
        var merged := new HashMap()
        for (key, value) in context.entries
            merged[key] := value
        for (key, value) in newContext.entries
            merged[key] := value
        startThread(merged)
    }
    
    ============================================================================
    Returns the `Thread` that is currently executing.
    
    @returns the current `Thread`
    ============================================================================
    @class
    @external
    function currentThread():Thread

    ============================================================================
    Creates and starts a new thread which executes the specified method. For
    example, to create a new thread which continually displays a message to the 
    console:

        Thread.start(method() {
            loop {
                Console.writeLine("Hi, I'm a thread!")
            }
        })

    @param run the run method to execute
    @returns the newly created thread
    ============================================================================
    @class
    method start(run:()=&>*()):Thread {
        var result := new Thread(run)
        result.start()
        return result
    }

    ============================================================================
    Returns the number of threads that generally leads to best performance on
    the current system. This will generally be (but is not necessarily) the
    number of available processor cores.

    **IMPLEMENTATION NOTE:** this is not currently implemented and is just 
    hardcoded to return 4.

    @returns the preferred number of executing threads
    ============================================================================
    @class
    function preferredThreadCount():Int {
        return 4
    }
    
    ============================================================================
    Pauses execution of the current thread for a length of time.
    
    @param millis the number of milliseconds to sleep
    ============================================================================
    @class 
    @external
    method sleep(millis:Int)
        
    @private
    @external
    method startThread(context:HashMap)

    @private
    @external
    method setThreadPreventsExit(preventsExit:Bit)
    
    @private
    @class
    @external
    method threadExit()
}