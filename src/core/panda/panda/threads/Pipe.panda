package panda.threads

================================================================================
A communications channel which can be used to communicate between different 
threads. A pipe provides an `InputStream` and an `OutputStream`; data written to
the `OutputStream` becomes available for reading from the `InputStream`. Pipes
are meant to have only a single `InputStream` and `OutputStream` created from
them. It is possible to create multiple input and output streams for the same
pipe, but this will cause unpredictable interleaving and fragmenting of data.
================================================================================
class Pipe : Immutable {
    @private
    def queue := MessageQueue<ImmutableArray<UInt8>?>()

    ============================================================================
    Returns an `InputStream` for reading from this pipe. This method should be
    called only once per pipe.

    @returns an input stream for reading from this pipe
    ============================================================================
    method openInputStream():InputStream {
        return PipeInputStream(queue)
    }

    ============================================================================
    Returns an `OutputStream` for writing to this pipe. This method should be
    called only once per pipe.

    @returns an output stream for writing to this pipe
    ============================================================================
    method openOutputStream():OutputStream {
        return PipeOutputStream(queue)
    }
}

-- FIXME PERFORMANCE slow implementation for now, just to get it working. Need
-- to implement the bulk read methods.
@private
class PipeInputStream : InputStream {
    var queue:MessageQueue<ImmutableArray<UInt8>?>
    var bufferIndex:Int
    var buffer := ImmutableArray<UInt8>()

    init(queue:MessageQueue<ImmutableArray<UInt8>?>) {
        self.queue := queue
    }

    @override
    method read():UInt8? {
        if bufferIndex >= buffer.length {
            def msg := queue.getMessage()
            if msg = null {
                close()
                return null
            }
            buffer := msg
            bufferIndex := 0
        }
        def result:UInt8 := buffer[bufferIndex]
        bufferIndex += 1
        return result
    }
}

@private
class PipeOutputStream : OutputStream {
    var queue:MessageQueue<ImmutableArray<UInt8>?>

    init(queue:MessageQueue<ImmutableArray<UInt8>?>) {
        self.queue := queue
    }

    @override
    method write(i:UInt8) {
        queue.post([i])
    }

    @override
    method write(a:ListView<UInt8>) {
        queue.post(a.convert())
    }

    @override
    method close() {
        super.close()
        queue.post(null)
    }
}