package panda.threads

================================================================================
A queue which can be shared between multiple [threads](Thread), allowing any of 
them to submit messages to or pull messages out of it.
================================================================================
class MessageQueue<T:Immutable> : Immutable {
    @private
    def internalQueue := InternalMessageQueue()
    
    ============================================================================
    Posts an object to the queue.
    
    @param data the object to post
    @see postAndExit
    ============================================================================
    method post(data:T) {
        internalQueue.post(data)
    }

    ============================================================================
    Posts an object to the queue, then immediately terminates the current 
    [thread](Thread).
    
    @param data the object to post
    @see post
    ============================================================================
    method postAndExit(data:T) {
        post(data)
        InternalMessageQueue.threadExit()
    }

    ============================================================================
    Returns the number of messages currently in the queue.
    
    @returns the number of messages in this `MessageQueue`
    @see hasMessage()
    @see getMessage()
    @see getMessage(Int)
    ============================================================================
    method pendingMessages():Int {
        return internalQueue.pendingMessages()
    }
    
    ============================================================================
    Returns `true` if there are one or more messages in the queue.
    
    @returns whether this queue has pending messages
    @see pendingMessages()
    @see getMessage()
    @see getMessage(Int)
    ============================================================================
    method hasMessage():Bit {
        return pendingMessages() > 0
    }
    
    ============================================================================
    Returns the next message from the queue, blocking until one is available.
    
    @see getMessage(Int)
    @returns the next message from the queue
    ============================================================================
    method getMessage():T {
        return internalQueue.getMessage()->T
    }
    
    ============================================================================
    Returns the next message from the current thread's message queue, blocking 
    for the specified timeout period. If a message is available before the 
    timeout expires, returns the message, otherwise returns `null`.

    **IMPLEMENTATION NOTE:** the timeout is not currently implemented; this 
    method just calls [getMessage()].
    
    @param timeout the number of milliseconds to wait for a message to arrive
    @returns the next message received by the thread, or `null` if none
    @see getMessage()
    ============================================================================
    method getMessage(timeout:Int):T {
        return internalQueue.getMessage(timeout)->T
    }
}