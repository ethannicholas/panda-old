package panda.threads

================================================================================
A lock (also known as a 'mutex') which may be used to synchronize access to
mutable data. `Lock` is not normally necessary, as mutable data is generally 
only accessible from a single thread at a time. `Lock` becomes necessary only
when the @link(MessageQueue.postUnsafe(Object?)) method has been used to share
mutable data between multiple threads.
================================================================================
class Lock : Immutable {
    @private
    def nativeLock:$NativePointer
    
    ============================================================================
    Creates a new, unlocked `Lock`.
    ============================================================================
    constructor() {
        init()
    }
    
    ============================================================================
    Blocks the current thread until the lock is available, and then locks it.
    While the lock is held, any other threads which attempt to lock the `Lock`
    will block until the current thread releases the `Lock`. 
    
    It is legal for a thread to lock the same `Lock` multiple times; the same 
    number of @link(unlock) calls will be necessary to completely release the 
    `Lock`.
    ============================================================================
    @external
    method lock()

    ============================================================================
    Releases a held `lock`. Unlocking a `Lock` which has not actually been 
    locked by the current thread is undefined behavior.
    ============================================================================
    @external
    method unlock()
    
    @override
    @external
    method finalize()

    @private
    @external
    method init()
}