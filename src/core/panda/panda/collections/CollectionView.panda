package panda.collections

interface CollectionView<T> : Iterable<T> {
    function length():Int
    @post(@return >= 0)

    function contains(object:T):Bit {
        for v in self {
            if object = v
                return true
        }
        return false
    }

    function filter(f:(T)=>(Bit)):CollectionView<T> {
        def result := new Array<T>()
        for v in self {
            if f(v)
                result.add(v)
        }
        return result
    }

    @pre(length > 0)
    function fold(f:(T, T)=>(T)):T {
        def i := iterator
        var result:T := i.next()
        while !i.done
            result := f(result, i.next())
        return result
    }

    function fold(f:(T, T)=>(T), start:T):T {
        var result:T := start
        for v in self
            result := f(result, v)
        return result
    }

    method apply(m:(T)=&>()) {
        for v in self
            m(v)
    }

    function ->>():Array<T> {
        def result := new Array<T>()
        for v in self
            result.add(v)
        return result
    }
}