package panda.collections

@private
@specialize
class Enumerator<T> (Iterator<(Int, T)>) {
    def base:Iterator<T>
    var index:Int := 0

    init(collection:CollectionView<T>) {
        self.base := collection.iterator
    }

    @override
    function get_done():Bit {
        return base.done
    }

    @override
    @self
    method next():(Int, T) {
        def result:(Int, T) := (index, base.next())
        index += 1
        return result
    }
}

@specialize
interface CollectionView<T> : Iterable<T> {
    property count:Int

    @abstract
    function get_count():Int

    ============================================================================
    Returns an iterator which produces (index, element) pairs. For instance, 
    `["Hello", "Goodbye"].enumeration` returns an iterator which produces 
    `(0, "Hello")` followed by `(1, "Goodbye")`.
    ============================================================================
    property enumeration:Iterator<(Int, T)>

    @protected
    function get_enumeration():Iterator<(Int, T)> {
        return Enumerator<T>(self)
    }

    function contains(object:T):Bit {
        for v in self {
            if object = v
                return true
        }
        return false
    }

    function filter(f:(T)=>(Bit)):CollectionView<T> {
        def result := Array<T>()
        for v in self {
            if f(v)
                result.add(v)
        }
        return result
    }

    @pre(count > 0)
    function fold(f:(T, T)=>(T)):T {
        def i := iterator
        var result:T := i.next()
        while !i.done
            result := f(result, i.next())
        return result
    }

    function fold(f:(T, T)=>(T), start:T):T {
        var result:T := start
        for v in self
            result := f(result, v)
        return result
    }

    method apply(m:(T)=&>()) {
        for v in self
            m(v)
    }

    function convert():Array<T> {
        def result := Array<T>()
        for v in self
            result.add(v)
        return result
    }
}