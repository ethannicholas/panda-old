package panda.collections

@specialize
class HashSet<T> (Set<T>) {
    @private
    def contents:Map<T, T> := HashMap<T, T>()

    init() {
    }

    init(contents:CollectionView<T>) {
        for v in contents {
            self.add(v)
        }
    }

    @override
    function get_count():Int {
        return contents.count
    }

    @override
    function contains(object:T):Bit {
        return contents.contains(object)
    }

    @override
    @safeReturn
    function get_iterator():Iterator<T> {
        return contents.keys.iterator
    }

    @override
    @self
    method add(object:T) {
        contents[object] := object
    }

    @override
    @self
    method remove(object:T) {
        contents.remove(object)
    }

    @override
    @self
    method clear() {
        contents.clear()
    }

    @override
    function convert():String {
        def result := MutableString("[")
        for (i, v) in enumeration {
            if i > 0 {
                result.append(", ")
            }
            result.append(v)
        }
        return result + "]"
    }
}