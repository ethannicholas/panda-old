package panda.collections

class FilterIterator<T> (Iterator<T>) {
    def base:Iterator<T>
    
    def filter:(T)=>(Bit)
    
    var nextValue:T?

    init(base:Iterator<T>, filter:(T)=>(Bit)) {
        self.base := base
        self.filter := filter
        getNext()
    }

    method getNext() {
        do {
            if base.done {
                nextValue := null
                return
            }
            nextValue := base.next()
        }
        while !filter(nextValue)
    }

    @override
    function get_done():Bit {
        return nextValue = null
    }

    @override
    method next():T {
        def result := nextValue
        getNext()
        return result
    }
}

================================================================================
A forward iterator which returns each element of a collection, one at a time.
================================================================================
interface Iterator<T> {
    property done:Bit

	============================================================================
	Returns `true` if the iterator has finished generating elements.
	============================================================================
    @protected
    function get_done():Bit

	============================================================================
	Returns the next element from the collection.
	============================================================================
    @self
    @pre(!done)
    method next():T

-*
    @safeReturn
    function all():ListView<T> {
        def result := Array<T>()
      while !done
          result.add(next())
      return result
    }

    @safeReturn
    @pre(count >= 0)
    function take(count:Int):ListView<T> {
        def result := Array<T>(count)
        for i in 0 .. count
            result.add(next())
        return result
    }
    @post(result.count = count)
*-

    @safeReturn
    function filter(f:(T)=>(Bit)):Iterator<T> {
        return FilterIterator<T>(self, f)
    }

    function fold(f:(T, T)=>(T)):T {
        var result := next()
        while !done
            result := f(result, next())
        return result
    }

    function fold(f:(T, T)=>(T), start:T):T {
        var result := start
        while !done
            result := f(result, next())
        return result
    }
}