package panda.collections

class ImmutableArray<T:Immutable> : Immutable (ListView<T>) {
    @private
    def contents:PrimitiveArray<T>

    constructor() {
        constructor(new PrimitiveArray<T>(0))
    }

    constructor(contents:PrimitiveArray<T>) {
        self.contents := contents[..]
    }

    constructor(contents:CollectionView<T>) {
        self.contents := new PrimitiveArray<T>(contents.length)
        for i, v in contents
            self.contents[i] := v
    }

    @override
    function [](index:Int):T {
        return contents[index]
    }

    @override
    function length():Int {
        return contents.length
    }

    @override
    function =(o:Object):Bit {
        if o-!>(ListView<T>)
            return false
        def list := o->(ListView<T>)
        if length != list.length
            return false
        for i, v in self {
            if v != list[i]
                return false
        }
        return true
    }

    @override
    @math(overflow)
    function hash():Int {
        var result := 0
        constant MULTIPLIER := 53
        for v in self
            result := result * MULTIPLIER + v.hash
        return result
    }

    @override
    @preOr(true)
    function format(fmt:String):String {
        def result := new MutableString("[")
        for i, v in self {
            if i > 0
                result.append(", ")
            result.append(v.format(fmt))
        }

        result.append("]")
        return result->>(String)
    }

-*    @class
    function <T> ->>(a:Array<T>):ImmutableArray<T> {
        return new ImmutableArray<T>(a)
    }*-
}