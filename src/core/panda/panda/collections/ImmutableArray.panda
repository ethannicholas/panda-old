package panda.collections

@specialize
class ImmutableArray<T:Immutable> : Immutable (ListView<T>) {
    @private
    def contents:PrimitiveArray<T>

    init() {
        init(PrimitiveArray<T>(0))
    }

    init(contents:PrimitiveArray<T>) {
        self.contents := PrimitiveArray<T>(contents)
    }

    -- FIXME need to switch contents over to ImmutablePrimitiveArray
    init(contents:ImmutablePrimitiveArray<T>) {
        self.contents := PrimitiveArray<T>(contents.length)
        for i in 0 .. contents.length {
            self.contents[i] := contents[i]
        }
    }

    init(contents:CollectionView<T>) {
        self.contents := PrimitiveArray<T>(contents.count)
        var i := 0
        for v in contents {
            self.contents[i] := v
            i += 1
        }
    }

    @override
    function [](index:Int):T {
        return contents[index]
    }

    @override
    function get_count():Int {
        return contents.length
    }

    function convert():ImmutableArray<T> {
        return self
    }

    @override
    function =(o:Object):Bit {
        if o-!>ListView<T> {
            return false
        }
        def list := o->ListView<T>
        if count != list.count {
            return false
        }
        for (i, v) in enumeration {
            if v != list[i] {
                return false
            }
        }
        return true
    }

    @override
    @math(overflow)
    function get_hash():Int {
        var result := 0
        constant MULTIPLIER := 53
        for v in self {
            result := result * MULTIPLIER + v.hash
        }
        return result
    }

    @override
    function convert():String {
        def result := MutableString("[")
        for (i, v) in enumeration {
            if i > 0 {
                result.append(", ")
            }
            result.append(v)
        }

        result.append("]")
        return result.convert()
    }
}