package panda.collections

================================================================================
A single key/value pair from a `HashMap`.
================================================================================
@private
class ImmutableMapEntry<K:Immutable, V:Immutable> : Immutable {
    ============================================================================
    The entry's key.
    ============================================================================
    def key:K

    ============================================================================
    The entry's value.
    ============================================================================
    def value:V
    
    def next:ImmutableMapEntry<K, V>?
    
    @private
    init(key:K, value:V, next:ImmutableMapEntry<K, V>?) {
        self.key := key
        self.value := value
        self.next := next
    }
}

@private
@abstract
class ImmutableHashMapIterator<K:Immutable, V:Immutable, R:Immutable> 
        (Iterator<R>) {
    def map:ImmutableHashMap<K, V>
    var index := 0
    var entry:ImmutableMapEntry<K, V>?

    init(map:ImmutableHashMap<K, V>) {
        self.map := map
        entry := map.contents[0]
        while entry = null {
            index += 1
            if index >= map.contents.length()
                break
            entry := map.contents[index]
        }
    }

    @override
    function done():Bit {
        return index >= map.contents.length()
    }

    @abstract
    function result(e:ImmutableMapEntry<K, V>):R

    @override
    @self
    method next():R {
        assert entry != null
        def result := result(entry)
        entry := entry.next
        while entry = null {
            index += 1
            if index >= map.contents.length()
                break
            entry := map.contents[index]
        }
        return result
    }
}

@private
class ImmutableHashMapEntryIterator<K:Immutable, V:Immutable> : 
        ImmutableHashMapIterator<K, V, (K, V)> {
    init(map:ImmutableHashMap<K, V>) {
        super.init(map)
    }

    @override
    function result(e:ImmutableMapEntry<K, V>):(K, V) {
        return (e.key, e.value)
    }
}

@private
class ImmutableHashMapKeyIterator<K:Immutable, V:Immutable> : 
        ImmutableHashMapIterator<K, V, K> {
    init(map:ImmutableHashMap<K, V>) {
        super.init(map)
    }

    @override
    function result(e:ImmutableMapEntry<K, V>):K {
        return e.key
    }
}

@private
class ImmutableHashMapValueIterator<K:Immutable, V:Immutable> : 
        ImmutableHashMapIterator<K, V, V> {
    init(map:ImmutableHashMap<K, V>) {
        super.init(map)
    }

    @override
    function result(e:ImmutableMapEntry<K, V>):V {
        return e.value
    }
}

================================================================================
Immutable implementation of the [MapView] interface, which associates keys with 
values.
================================================================================
class ImmutableHashMap<K:Immutable, V:Immutable> : Immutable 
        (MapView<K, V>) {
    @private
    def _length:Int32
    
    @private 
    def contents:ImmutablePrimitiveArray<ImmutableMapEntry<K, V>?> 
    -- length must be a power of 2 (see indexFor)
    
    init() {
        init(HashMap<K, V>())
    }

    init(m:MapView<K, V>) {
        def h:HashMap<K, V>
        if m-?>HashMap<K, V>
            h := m->HashMap<K, V>
        else
            h := HashMap<K, V>(m)
        def contentsTemp := PrimitiveArray<ImmutableMapEntry<K, V>?>(
                h.contents.length())
        for i in 0 .. h.contents.length()
            contentsTemp[i] := copy(h.contents[i])
        contents := ImmutablePrimitiveArray<ImmutableMapEntry<K, V>?>(
                contentsTemp)
        _length := h.length
    }
    
    ============================================================================
    Creates a new `ImmutableHashMap` with a set of keys and values. The first
    entry in the `keys` array will be paired with the first entry in the 
    `values` array, and so on.

    @param keys the map keys
    @param values the map values
    ============================================================================
    init(keys:ListView<K>, values:ListView<V>) {
        init(HashMap<K, V>(keys, values))
    }

    init(keys:PrimitiveArray<K>, values:PrimitiveArray<V>) {
        init(HashMap<K, V>(keys, values))
    }

    @private
    function copy(m:MutableMapEntry<K, V>?):ImmutableMapEntry<K, V>? {
        if m = null
            return null
        return ImmutableMapEntry<K, V>(m.key, m.value, copy(m.next))
    }
    
    @private
    @math(overflow)
    function indexFor(key:K):Int32 {
        var h:Int32
        if key = null
            h := 0
        else
            h := key.hash
        -- supplemental hash function to defend against poor hash codes, 
        -- as we do not use a prime table length
        h ~~= (h >> 20) ~~ (h >> 12) ~~ (h >> 7) ~~ (h >> 4)
        -- the bitwise and below is equivalent to mod if length is a power 
        -- of 2, which is why we require that
        return h && (contents.length() - 1)
    }

    @override
    function [](key:K):V? {
        var index := indexFor(key)
        var e := contents[index]
        while e != null & e.key != key {
            e := e.next
        }
        if e != null
            return e.value
        else
            return null
    }

    @override
    function get_length():Int {
        return _length
    }
    
    @override
    function contains(key:K):Bit {
        def index := indexFor(key)
        var e := contents[index]
        while e != null & e.key != key
            e := e.next
        return e != null
    }
    
    @override
    @safeReturn
    function iterator():Iterator<(K, V)> {
        return ImmutableHashMapEntryIterator<K, V>(self)
    }

    ============================================================================
    Formats the map as a string.

    @param fmt the format string
    @returns a string representation of this object
    ============================================================================
    @override
    function convert():String {
        def result := MutableString()
        result.append("{")
        var first := true
        for e in contents {
            var current := e
            while current != null {
                if !first
                    result.append(", ")
                else
                    first := false
                def key := current.key
                if key != null
                    result.append(key)
                else
                    result.append("null")
                result.append(": ")
                def value := current.value
                if value != null
                    result.append(value)
                else
                    result.append("null")
                current := current.next
            }
        }
        result.append("}")
        return result.convert()
    }
}