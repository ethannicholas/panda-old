package panda.collections

@specialize
class Array<T> (List<T>) {
    @private
    constant DEFAULT_COUNT := 16

    @private
    var contents:PrimitiveArray<T>

    @private
    var _count := 0

    init() {
        contents := PrimitiveArray<T>(DEFAULT_COUNT)
    }

    init(count:Int) {
        contents := PrimitiveArray<T>(count)
    }

    init(count:Int, fill:T) {
        contents := PrimitiveArray<T>(count)
        _count := count
        for i in 0 .. count {
            contents[i] := fill
        }
    }

    ============================================================================
    @hidden
    ============================================================================
    init(contents:PrimitiveArray<T>) {
        self.contents := contents
        self._count := contents.length
    }

    init(contents:CollectionView<T>) {
        self.contents := PrimitiveArray<T>(contents.count)
        for (i, v) in contents.enumeration {
            self.contents[i] := v
        }
        _count := contents.count
    }

    @override
    @pre(index >= 0 & index < _count)
    function [](index:Int):T {

        -- FIXME kill this when @pre works again
        assert index >= 0 & index < _count : "index '\{index}' out of bounds," +
                " valid range is 0 ... \{_count}"

        return contents[index]
    }

    @override
    function get_count():Int {
        return _count
    }

    @self
    @override
    @preOr(index < _count)
    method []:=(index:Int, value:T) {
        contents[index] := value
    }

    @override
    @self
    method add(value:T) {
        ensureCapacity(_count + 1)
        _count += 1
        contents[_count - 1] := value
    }

    @self
    method add(a:Array<T>, offset:Int, count:Int) {
        ensureCapacity(_count + count)
        for i in 0 .. count {
            contents[_count + i] := a[offset + i]
        }
        _count += count
    }

    @self
    method add(list:ListView<T>, offset:Int, count:Int) {
        ensureCapacity(_count + count)
        for i in 0 .. count {
            contents[_count + i] := list[offset + i]
        }
        _count += count
    }

    @self
    method addAll(a:Array<T>) {
        ensureCapacity(_count + a.count)
        for v in a {
            contents[_count] := v
            _count += 1
        }
    }

    @self
    method addAll(c:CollectionView<T>) {
        ensureCapacity(_count + c.count)
        for v in c {
            contents[_count] := v
            _count += 1
        }
    }

    @override
    @self
    method remove(object:T) {
        for i in 0 .. count {
            if contents[i] = object {
                removeIndex(i)
                break
            }
        }
    }

    @override
    @self
    method removeIndex(index:Int) {
        for i in index .. count - 1 {
            contents[i] := contents[i + 1]
        }
        _count -= 1
    }

    @override
    @self
    method clear() {
        contents := PrimitiveArray<T>(DEFAULT_COUNT)
        _count := 0
    }

    @override
    function contains(object:T):Bit {
        for v in self {
            if object = v {
                return true
            }
        }
        return false
    }

    @private
    method swap(a:Int, b:Int) {
        def temp:T := contents[a]
        contents[a] := contents[b]
        contents[b] := temp
    }

    -- FIXME PERFORMANCE completely unoptimized naive QuickSort
    @private
    method sort(left:Int, right:Int, lessThan:(T, T)=>(Bit)) {
        if left >= right {
            return
        }
        def pivotIndex := left + (right - left) // 2
        def pivot:T := contents[pivotIndex]
        swap(right, pivotIndex)
        var storeIndex := left
        for i in left .. right {
            if lessThan(contents[i], pivot) {
                swap(i, storeIndex)
                storeIndex += 1
            }
        }
        swap(storeIndex, right)
        sort(left, storeIndex - 1, lessThan)
        sort(storeIndex + 1, right, lessThan)
    }

    -- FIXME this is supposed to be in List rather than Array, but the private
    -- methods will have to be generics in panda.core.Panda and generic methods 
    -- were not supported as of this writing
    method sort(lessThan:(T, T)=>(Bit)) {
        sort(0, count - 1, lessThan)
    }

    method sorted(lessThan:(T, T)=>(Bit)):Array<T> {
        def result := Array<T>(self)
        result.sort(lessThan)
        return result
    }

    @private
    @self
    method ensureCapacity(maxCount:Int) {
        if maxCount > contents.length {
            def newSize := (contents.length * 2).max(maxCount)
            def newContents := PrimitiveArray<T>(newSize)
            for i in 0 .. count {
                newContents[i] := contents[i]
            }
            contents := newContents
        }
    }

    @override
    function =(o:Object):Bit {
        if o-!>ListView<T> {
            return false
        }
        def list := o->ListView<T>
        if count != list.count {
            return false
        }
        for (i, v) in enumeration {
            if v != list[i] {
                return false
            }
        }
        return true
    }

    @override
    @math(overflow)
    function get_hash():Int {
        var result := 0
        constant MULTIPLIER := 53
        for v in self {
            result *= MULTIPLIER
            if v != null {
                result += v.hash
            }
        }
        return result
    }

    @override
    function convert():String {
        def result := MutableString("[")
        for (i, v) in enumeration {
            if i > 0 {
                result.append(", ")
            }
            if v != null {
                result.append(v)
            }
            else {
                result.append("<null>")
            }
        }
        result.append("]")
        return result.convert()
    }
}