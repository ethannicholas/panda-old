package panda.collections

class Array<T> (List<T>) {
    @private
    constant DEFAULT_LENGTH := 16

    @private
    var contents:PrimitiveArray<T>

    @private
    var _length := 0

    constructor() {
        contents := new PrimitiveArray<T>(DEFAULT_LENGTH)
    }

    ============================================================================
    @hidden
    ============================================================================
    constructor(contents:PrimitiveArray<T>) {
        self.contents := contents
    }

    constructor(contents:CollectionView<T>) {
        self.contents := new PrimitiveArray<T>(contents.length)
        addAll(contents)
    }

    @override
    @preOr(index < _length)
    function [](index:Int):T {
        return contents[index]
    }

    @override
    function length():Int {
        return _length
    }

    @self
    @override
    @preOr(index < _length)
    method []:=(index:Int, value:T) {
        contents[index] := value
    }

    @override
    @self
    method add(value:T) {
        ensureCapacity(_length + 1)
        _length += 1
        self[_length - 1] := value
    }

    @override
    @self
    method remove(object:T) {
        for i in 0 .. length {
            if self[i] = object {
                removeIndex(i)
                break
            }
        }
    }

    @override
    @self
    method removeIndex(index:Int) {
        for i in index .. length - 1
            self[i] := self[i + 1]
        _length -= 1
    }

    @override
    @self
    method clear() {
        contents := new PrimitiveArray<T>(DEFAULT_LENGTH)
        _length := 0
    }

    @override
    function contains(object:T):Bit {
        for v in self {
            if object = v
                return true
        }
        return false
    }

    @private
    @self
    method ensureCapacity(maxLength:Int) {
        if maxLength > contents.length {
            def newSize := (contents.length * 2).max(maxLength)
            def newContents := new PrimitiveArray<T>(newSize)
            for i in 0 .. length
                newContents[i] := contents[i]
            contents := newContents
        }
    }

    @override
    function =(o:Object):Bit {
        if o-!>(ListView<T>)
            return false
        def list := o->(ListView<T>)
        if length != list.length
            return false
        for i, v in self {
            if v != list[i]
                return false
        }
        return true
    }

    @override
    @math(overflow)
    function hash():Int {
        var result := 0
        constant MULTIPLIER := 53
        for v in self {
            result *= MULTIPLIER
            if v != null
                result += v.hash
        }
        return result
    }

    @override
    @preOr(true)
    function format(fmt:String):String {
        def result := new MutableString("[")
        for i, v in self {
            if i > 0
                result.append(", ")
            if v != null
                result.append(v.format(fmt))
            else
                result.append("<null>")
        }

        result.append("]")
        return result->>(String)
    }
}