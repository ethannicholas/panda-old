package panda.collections

@private
class ArrayIterator<T> (Iterator<T>) {
    def array:Array<T>
    var index := 0

    constructor(array:Array<T>) {
        self.array := array
    }

    @override
    function done():Bit {
        return index >= array.length
    }

    @override
    @self
    method next():T {
        def result := array[index]
        index += 1
        return result
    }
}

class Array<T> (List<T>) {
    @private
    constant DEFAULT_LENGTH := 16

    @private
    var contents := new PrimitiveArray<T>(DEFAULT_LENGTH)

    @private
    var _length := 0

    constructor() {
    }

    @override
    @preOr(index < _length)
    function [](index:Int):T {
        return contents[index]
    }

    @override
    function length():Int {
        return _length
    }

    @self
    @override
    @preOr(index < _length)
    method []:=(index:Int, value:T) {
        contents[index] := value
    }

    @override
    @self
    method add(value:T) {
        ensureCapacity(_length + 1)
        _length += 1
        self[_length - 1] := value
    }

    @override
    @self
    method remove(object:T) {
        for i in 0 .. length
            if self[i] = object
                removeIndex(i)
    }

    @override
    @self
    method removeIndex(index:Int) {
        for i in index .. length - 1
            self[i] := self[i + 1]
        _length -= 1
    }

    @override
    @self
    method clear() {
        contents := new PrimitiveArray<T>(DEFAULT_LENGTH)
        _length := 0
    }

    @override
    function contains(object:T):Bit {
        for v in self {
            if object = v
                return true
        }
        return false
    }

    @override
    @safeReturn
    function iterator():Iterator<T> {
        return new ArrayIterator<T>(self)
    }

    @private
    @self
    method ensureCapacity(maxLength:Int) {
        if maxLength > contents.length {
            def newContents := new PrimitiveArray<T>(contents.length * 2)
            for i in 0 .. length
                newContents[i] := contents[i]
            contents := newContents
        }
    }

    @override
    function =(o:Object):Bit {
        if o-!>(ListView<T>)
            return false
        def list := o->(ListView<T>)
        if length != list.length
            return false
        for i, v in self {
            if v != list[i]
                return false
        }
        return true
    }

    @override
    @math(overflow)
    function hash():Int {
        var result := 0
        constant MULTIPLIER := 53
        for v in self
            result := result * MULTIPLIER + v.hash
        return result
    }

    @override
    @preOr(true)
    function format(fmt:String):String {
        def result := new MutableString("[")
        for i, v in self {
            if i > 0
                result.append(", ")
            result.append(v.format(fmt))
        }

        result.append("]")
        return result->>(String)
    }
}