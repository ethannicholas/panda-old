package panda.collections

class Array<T> (List<T>) {
    @private
    constant DEFAULT_LENGTH := 16

    @private
    var contents:PrimitiveArray<T>

    @private
    var _length := 0

    init() {
        contents := PrimitiveArray<T>(DEFAULT_LENGTH)
    }

    init(length:Int) {
        contents := PrimitiveArray<T>(length)
    }

    init(length:Int, fill:T) {
        contents := PrimitiveArray<T>(length)
        _length := length
        for i in 0 .. length
            contents[i] := fill
    }

    ============================================================================
    @hidden
    ============================================================================
    init(contents:PrimitiveArray<T>) {
        self.contents := contents
        self._length := contents.length
    }

    init(contents:CollectionView<T>) {
        self.contents := PrimitiveArray<T>(contents.length)
        for (i, v) in contents.enumeration()
            self.contents[i] := v
        _length := contents.length
    }

    @override
    @preOr(index < _length)
    function [](index:Int):T {
        return contents[index]
    }

    @override
    function get_length():Int {
        return _length
    }

    @self
    @override
    @preOr(index < _length)
    method []:=(index:Int, value:T) {
        contents[index] := value
    }

    @override
    @self
    method add(value:T) {
        ensureCapacity(_length + 1)
        _length += 1
        self[_length - 1] := value
    }

    @override
    @self
    method remove(object:T) {
        for i in 0 .. length {
            if self[i] = object {
                removeIndex(i)
                break
            }
        }
    }

    @override
    @self
    method removeIndex(index:Int) {
        for i in index .. length - 1
            self[i] := self[i + 1]
        _length -= 1
    }

    @override
    @self
    method clear() {
        contents := PrimitiveArray<T>(DEFAULT_LENGTH)
        _length := 0
    }

    @override
    function contains(object:T):Bit {
        for v in self {
            if object = v
                return true
        }
        return false
    }

    @private
    method swap(a:Int, b:Int) {
        def temp:T := self[a]
        self[a] := self[b]
        self[b] := temp
    }

    -- FIXME PERFORMANCE completely unoptimized naive QuickSort
    @private
    method sort(left:Int, right:Int, lessThan:(T, T)=>(Bit)) {
        if left >= right
            return
        def pivotIndex := left + (right - left) // 2
        def pivot:T := self[pivotIndex]
        swap(right, pivotIndex)
        var storeIndex := left
        for i in left .. right {
            if lessThan(self[i], pivot) {
                swap(i, storeIndex)
                storeIndex += 1
            }
        }
        swap(storeIndex, right)
        sort(left, storeIndex - 1, lessThan)
        sort(storeIndex + 1, right, lessThan)
    }

    -- FIXME this is supposed to be in List rather than Array, but the private
    -- methods will have to be generics in panda.core.Panda and generic methods 
    -- were not supported as of this writing
    method sort(lessThan:(T, T)=>(Bit)) {
        sort(0, length, lessThan)
    }

    @private
    @self
    method ensureCapacity(maxLength:Int) {
        if maxLength > contents.length {
            def newSize := (contents.length * 2).max(maxLength)
            def newContents := PrimitiveArray<T>(newSize)
            for i in 0 .. length
                newContents[i] := contents[i]
            contents := newContents
        }
    }

    @override
    function =(o:Object):Bit {
        if o-!>ListView<T>
            return false
        def list := o->ListView<T>
        if length != list.length
            return false
        for (i, v) in enumeration() {
            if v != list[i]
                return false
        }
        return true
    }

    @override
    @math(overflow)
    function hash():Int {
        var result := 0
        constant MULTIPLIER := 53
        for v in self {
            result *= MULTIPLIER
            if v != null
                result += v.hash
        }
        return result
    }

    @override
    function convert():String {
        def result := MutableString("[")
        for (i, v) in enumeration() {
            if i > 0
                result.append(", ")
            if v != null
                result.append(v)
            else
                result.append("<null>")
        }
        result.append("]")
        return result.convert()
    }
}