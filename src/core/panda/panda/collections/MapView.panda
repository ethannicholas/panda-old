package panda.collections

================================================================================
A read-only view of the standard "Map" abstract data type, which stores 
key/value pairs such that no key appears more than once in the collection. Given
a key, a `MapView` will return the corresponding value, and generally does so 
very quickly (the standard [HashMap] implementation can typically retrieve 
values in constant time no matter how much data it contains).
================================================================================
@specialize
interface MapView<K, V> : Iterable<(K, V)> {
    ============================================================================
    The number of entries in the map.
    ============================================================================
    property count:Int

    @abstract
    function get_count():Int

    ============================================================================
    Returns the value corresponding to the specified key, or `null` if it was
    not present in the map.

    Note that this method cannot distinguish between a key that does not exist 
    and a key that exists but points to the value `null`; you must use the 
    [contains(Object?)] method to distinguish these cases.

    @param key the key to search for
    @returns the corresponding object, or `null`
    @see contains
    ============================================================================
    function [](key:K):V?

    ============================================================================
    Returns `true` if the `HashMap` contains an entry for the specified key.

    @param key the key to search for
    @returns `true` if the key is present in the map
    @see []
    ============================================================================
    function contains(key:K):Bit

    ============================================================================
    Returns an iterator of all keys in the map.

    @returns an iterator of all keys in the map
    @see values
    @see entries
    ============================================================================
    property keys:CollectionView<K>

    @protected
    function get_keys():CollectionView<K> {
        def result := Array<K>()
        for (key, _) in self {
            result.add(key)
        }
        return result
    }

    ============================================================================
    Returns an iterator of all values in the map.

    @returns a list of all values in the map
    @see keys
    @see entries
    ============================================================================
    property values:CollectionView<V>

    @protected
    function get_values():CollectionView<V> {
        def result := Array<V>()
        for (_, value) in self {
            result.add(value)
        }
        return result
    }
}