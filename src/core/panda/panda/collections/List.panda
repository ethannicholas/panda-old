package panda.collections

@specialize
interface List<T> : ListView<T>, ListWriter<T> {
    -- FIXME need to make this generic over <V:T> and change the signature to
    -- (T)=>(V) when generic methods are in
    @self
    method mapInPlace(f:(T)=>(T)) {
        for i in 0 .. count
            self[i] := f(self[i])
    }

    @self
    method filterInPlace(f:(T)=>(Bit)) {
        for i in count - 1 ... 0 by -1 {
            if !f(self[i])
                removeIndex(i)
        }
    }

    @override
    @self
    method insert(index:Int, value:T) {
        add(value)
        for i in count - 1 .. index by -1
            self[i] := self[i - 1]
        self[index] := value
    }

    method []:=(i:Int, object:T)

    @self
    @pre(step != 0)
    method [..]:=(var start:Int?, var end:Int?, step:Int, list:ListView<T>) {
        if start = null {
            if step > 0
                start := 0
            else
                start := count - 1
        }
        if end = null {
            if step > 0
                end := count
            else
                end := -1
        }
        self[start->Int .. end->Int by step] := list
    }

    @self
    @pre(step != 0)
    method [..]:=(start:Int, end:Int, step:Int, list:ListView<T>) {
        if step = 1 {
            def oldCount := end - start
            def newCount := list.count 
            def delta := newCount - oldCount
            if delta < 0 {
                -- list is getting shorter
                -- This is not the fastest way to do this, as we end up shifting
                -- the same elements multiple times, but it's simpler and easier
                -- than the smart way of doing it.
                -- FIXME PERFORMANCE
                for i in 0 .. -delta
                    removeIndex(start)
                for i in start .. start + list.count
                    self[i] := list[i - start]
            }
            else if delta > 0 {
                -- list is getting longer
                -- insert the first /delta/ elements to increase the list count
                -- by the desired amount. This is not the fastest way to do 
                -- this, as we end up shifting the same elements multiple times,
                -- but it's simpler and easier than the smart way of doing it.
                -- FIXME PERFORMANCE
                for i in 0 .. delta
                    insert(start + i, list[i])
                -- the rest of the list overwrites existing elements
                for i in delta .. list.count
                    self[start + i] := list[i]
            }
            else {
                -- list is not changing size
                for i in start .. end
                    self[i] := list[i - start]
            }
        }
        else {
            var src := 0
            for dest in start .. end by step {
                self[dest] := list[src]
                src += 1
            }
            assert src = list.count : PreconditionError(
                    "slice source and destination counts do not match")
        }
    }

    @self
    @pre(step != 0)
    method [...]:=(var start:Int?, var end:Int?, step:Int, list:ListView<T>) {
        if start = null {
            if step > 0
                start := 0
            else
                start := count - 1
        }
        if end = null {
            if step > 0
                end := count - 1
            else
                end := 0
        }
        self[start->Int ... end->Int by step] := list
    }

    @self
    @pre(step != 0)
    method [...]:=(start:Int, end:Int, step:Int, list:ListView<T>) {
        if step > 0
            self[start .. end + 1 by step] := list
        else
            self[start .. end - 1 by step] := list
    }
}
