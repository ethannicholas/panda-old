package panda.collections

================================================================================
Implementation of the `Stack` abstract data type.
================================================================================
class Stack<T> {
    @private
    def contents:List<T> := new Array<T>()

    ============================================================================
    Creates a new, empty `Stack`.
    ============================================================================
    constructor() {
    }
    @post(length = 0)
    
    ============================================================================
    Pushes a new value onto the stack.

    @param o the object to push
    @see pop
    ============================================================================
    method push(value:T) {
        contents.add(value)
    }
    @post(length = @pre(length) + 1)
    
    ============================================================================
    Pops the top element of the stack and returns it.

    @returns the popped element
    @see push
    ============================================================================
    @pre(length > 0)
    method pop():T {
        def result := contents[contents.length - 1]
        contents.removeIndex(contents.length - 1)
        return result
    }
    @post(length = @pre(length) - 1)

    ============================================================================
    Removes all elements from the stack.
    ============================================================================
    method clear() {
        contents.clear()
    }
    
    ============================================================================
    Returns the top element of the stack without removing it.

    @returns the top element of the stack
    @see peek(Int)
    ============================================================================
    function peek():T {
        return peek(0)
    }

    ============================================================================
    Returns an arbitrary element of the stack without removing it. The top of
    the stack is at depth 0 and the bottommost element of the stack is at depth
    `length - 1`.
    
    @param depth the index of the element to return
    @returns the specified stack element
    @see peek()
    ============================================================================
    @pre(depth < length)
    @pre(depth >= 0)
    function peek(depth:Int):T {
        return contents[(length - depth) - 1]
    }
    
    ============================================================================
    Returns the number of elements in the stack.

    @returns the length of the stack
    ============================================================================
    function length():Int {
        return contents.length
    }

    ============================================================================
    Returns the contents of the stack formatted as a string, with the top of the
    stack to the right. The stack itself ignores the format string; it is used
    to format each of the elements in the stack.

    @param fmt the format string to pass to each element's `format` method
    @returns the stack formatted as a string
    ============================================================================
    @override
    @preOr(true)
    function format(fmt:String):String {
        return contents.format(fmt)
    }

    ============================================================================
    Converts the stack to a ListView. The bottom of the stack is at index `0` 
    and the top of the stack is at the end of the array.

    @returns the contents of the stack
    ============================================================================
    function ->>():ListView<T> {
        return contents[..]
    }
}