package panda.collections

================================================================================
@hidden
================================================================================
class ListIterator<T> (Iterator<T>) {
    def list:ListView<T>
    var index:Int := 0

    init(list:ListView<T>) {
        self.list := list
    }

    @override
    function done():Bit {
        return index >= list.length
    }

    @override
    @self
    method next():T {
        def result:T := list[index]
        index += 1
        return result
    }
}

================================================================================
An read-only view of an ordered collection. Each element in a `ListView` has an
index, from `0` for the first element in the list to `length - 1` for the last.
================================================================================
interface ListView<T> : CollectionView<T> {
    ============================================================================
    Returns the `i`-th element of the list.

    @param i the index of the element to return
    @returns the element at the specified index
    ============================================================================
    function [](i:Int):T

    function [..](var start:Int?, var end:Int?, step:Int):ListView<T> {
        if start = null {
            if step > 0
                start := 0
            else
                start := length - 1
        }
        if end = null {
            if step > 0
                end := length
            else
                end := -1
        }
        return self[start->Int .. end->Int by step]
    }

    function [..](start:Int, end:Int, step:Int):ListView<T> {
        def result := Array<T>()
        for i in start .. end by step
            result.add(self[i])
        return result
    }

    function [...](var start:Int?, var end:Int?, step:Int):ListView<T> {
        if start = null {
            if step > 0
                start := 0
            else
                start := length - 1
        }
        if end = null {
            if step > 0
                end := length - 1
            else
                end := 0
        }
        return self[start->Int ... end->Int by step]
    }

    function [...](start:Int, end:Int, step:Int):ListView<T> {
        def result := Array<T>()
        for i in start ... end by step
            result.add(self[i])
        return result
    }

    function convert():Array<T> {
        def result := Array<T>(length)
        for v in self
            result.add(v)
        return result
    }

    function convert():ImmutableArray<T> {
        return ImmutableArray<T>(self)
    }

    @override
    function contains(value:T):Bit {
        return indexOf(value) != null
    }

    ============================================================================
    Performs a linear search from the beginning of the list, returning the index
    of the first element equal to `value` (or `null` if no such element exists).

    @param value the value to search for
    @return the index of the first match, or `null` if not found
    ============================================================================
    function indexOf(value:T):Int? {
        for (i, test) in enumeration() {
            if test = value
                return i
        }
        return null
    }

    ============================================================================
    Performs a linear search from the specified index, returning the index
    of the first element equal to `value` (or `null` if no such element exists).

    @param value the value to search for
    @return the index of the first match, or `null` if not found
    ============================================================================
    function indexOf(value:T, start:Int):Int? {
        for i in start .. length {
            if self[i] = value
                return i
        }
        return null
    }

    ============================================================================
    Performs a backwards linear search from the end the list, returning the 
    index of the first element equal to `value` (or `null` if no such element 
    exists).

    @param value the value to search for
    @return the index of the first match, or `null` if not found
    ============================================================================
    function lastIndexOf(value:T):Int? {
        for i in length - 1 ... 0 by -1 {
            if self[i] = value
                return i
        }
        return null
    }

    ============================================================================
    Performs a backwards linear search from the specified index, returning the 
    index of the first element equal to `value` (or `null` if no such element 
    exists).

    @param value the value to search for
    @return the index of the first match, or `null` if not found
    ============================================================================
    function lastIndexOf(value:T, start:Int):Int? {
        for i in start ... 0 by -1 {
            if self[i] = value
                return i
        }
        return null
    }

    @override
    @safeReturn
    function iterator():Iterator<T> {
        return ListIterator<T>(self)
    }

    ============================================================================
    Returns a comma-separated string produced by joining the string 
    representation of all of the list's values together. For instance,
    `[1, 2, 3].join()` yields the string `"1, 2, 3"`.

    @returns a comma-separated string
    ============================================================================
    function join():String {
        return join(", ")
    }

    ============================================================================
    Returns a string produced by joining the string representation of all of the
    list's values together, separated by the given delimiter. For instance,
    `[1, 2, 3].join("/")` yields the string `"1/2/3"`.

    @param the delimiter to separate the elements by
    @returns a string representation of the list
    ============================================================================
    function join(delimiter:String):String {
        def result := MutableString()
        for (i, v) in enumeration() {
            if i > 0
                result.append(delimiter)
            if v != null
                result.append(v)
            else
                result.append("<null>")
        }
        return result.convert()
    }
}

-*
    function map<T2>(f:(T)=>(T2)):ListView<T2> {
        def result := PrimitiveArray<T2>()
        for v in self
            result.append(f(v))
        return result
    }

    @pre(length = list.length)
    function combine<T2>(list:ListView<T2>):ListView<(T, T2)> {
        return combine(list, (x, y) => (x, y))
    }

    @pre(length = list.length)
    function combine<T2, T3>(list:ListView<T2>, f:(T, T2)=>(T3)):ListView<T3> {
        def result := PrimitiveArray<T3>()
        for (i, v) in list.enumeration()
            result.append(f(v, list[i]))
        return result
    }

    @pre(length = list.length)
    function combine<T2, T3>(list1:ListView<T2>,
            list2:ListView<T3>):ListView<(T, T2, T3)> {
        return combine(list1, list2, (x, y, z) => (x, y, z))
    }

    @pre(length = list.length)
    function combine<T2, T3, T4>(list1:ListView<T2>, list2:ListView<T3>, 
            f:(T, T2, T3)=>(T4)):ListView<T4> {
        def result := PrimitiveArray<T4>()
        for (i, v) in list.enumeration()
            result.append(f(v, list1[i], list2[i]))
        return result
    }
}

*-