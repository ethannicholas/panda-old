package panda.collections

================================================================================
@hidden
================================================================================
@specialize
class ListIterator<T> (Iterator<T>) {
    def list:ListView<T>
    var index:Int := 0

    init(list:ListView<T>) {
        self.list := list
    }

    @override
    function get_done():Bit {
        return index >= list.count
    }

    @override
    @self
    method next():T {
        def result:T := list[index]
        index += 1
        return result
    }
}

================================================================================
An read-only view of an ordered collection. Each element in a `ListView` has an
index, from `0` for the first element in the list to `count - 1` for the last.
================================================================================
@specialize
interface ListView<T> : CollectionView<T> {
    ============================================================================
    Returns the `i`-th element of the list.

    @param i the index of the element to return
    @returns the element at the specified index
    ============================================================================
    function [](i:Int):T

    function [..](var start:Int?, var end:Int?, step:Int):ListView<T> {
        if start = null {
            if step > 0 {
                start := 0
            }
            else {
                start := count - 1
            }
        }
        if end = null {
            if step > 0 {
                end := count
            }
            else {
                end := -1
            }
        }
        return self[start->Int .. end->Int by step]
    }

    function [..](start:Int, end:Int, step:Int):ListView<T> {
        def result := Array<T>()
        for i in start .. end by step {
            result.add(self[i])
        }
        return result
    }

    function [...](var start:Int?, var end:Int?, step:Int):ListView<T> {
        if start = null {
            if step > 0 {
                start := 0
            }
            else {
                start := count - 1
            }
        }
        if end = null {
            if step > 0 {
                end := count - 1
            }
            else {
                end := 0
            }
        }
        return self[start->Int ... end->Int by step]
    }

    function [...](start:Int, end:Int, step:Int):ListView<T> {
        def result := Array<T>()
        for i in start ... end by step {
            result.add(self[i])
        }
        return result
    }

    function convert():Array<T> {
        def result := Array<T>(count)
        for v in self {
            result.add(v)
        }
        return result
    }

    function convert():ImmutableArray<T> {
        return ImmutableArray<T>(self)
    }

    @override
    function contains(value:T):Bit {
        return indexOf(value) != null
    }

    ============================================================================
    Performs a linear search from the beginning of the list, returning the index
    of the first element equal to `value` (or `null` if no such element exists).

    @param value the value to search for
    @return the index of the first match, or `null` if not found
    ============================================================================
    function indexOf(value:T):Int? {
        for (i, test) in enumeration {
            if test = value {
                return i
            }
        }
        return null
    }

    ============================================================================
    Performs a linear search from the specified index, returning the index
    of the first element equal to `value` (or `null` if no such element exists).

    @param value the value to search for
    @return the index of the first match, or `null` if not found
    ============================================================================
    function indexOf(value:T, start:Int):Int? {
        for i in start .. count {
            if self[i] = value {
                return i
            }
        }
        return null
    }

    ============================================================================
    Performs a backwards linear search from the end the list, returning the 
    index of the first element equal to `value` (or `null` if no such element 
    exists).

    @param value the value to search for
    @return the index of the first match, or `null` if not found
    ============================================================================
    function lastIndexOf(value:T):Int? {
        for i in count - 1 ... 0 by -1 {
            if self[i] = value {
                return i
            }
        }
        return null
    }

    ============================================================================
    Performs a backwards linear search from the specified index, returning the 
    index of the first element equal to `value` (or `null` if no such element 
    exists).

    @param value the value to search for
    @return the index of the first match, or `null` if not found
    ============================================================================
    function lastIndexOf(value:T, start:Int):Int? {
        for i in start ... 0 by -1 {
            if self[i] = value {
                return i
            }
        }
        return null
    }

    @override
    @safeReturn
    function get_iterator():Iterator<T> {
        return ListIterator<T>(self)
    }

    ============================================================================
    Returns a comma-separated string produced by joining the string 
    representation of all of the list's values together. For instance,
    `[1, 2, 3].join()` yields the string `"1, 2, 3"`.

    @returns a comma-separated string
    ============================================================================
    function join():String {
        return join(", ")
    }

    ============================================================================
    Returns a string produced by joining the string representation of all of the
    list's values together, separated by the given delimiter. For instance,
    `[1, 2, 3].join("/")` yields the string `"1/2/3"`.

    @param the delimiter to separate the elements by
    @returns a string representation of the list
    ============================================================================
    function join(delimiter:String):String {
        def result := MutableString()
        for (i, v) in enumeration {
            if i > 0 {
                result.append(delimiter)
            }
            if v != null {
                result.append(v)
            }
            else {
                result.append("<null>")
            }
        }
        return result.convert()
    }
}

-*
    obviously, all of these (plus Filter) need to return Self<...> as well
    function map<T2>(f:(T)=>(T2)):ListView<T2> {
        def result := Array<T2>()
        for v in self {
            result.add(f(v))
        }
        return result
    }

    @pre(count = list.count)
    function combine<T2>(list:ListView<T2>):ListView<(T, T2)> {
        return combine(list, (x, y) => (x, y))
    }

    @pre(count = list.count)
    function combine<T2, T3>(list:ListView<T2>, f:(T, T2)=>(T3)):ListView<T3> {
        def result := PrimitiveArray<T3>()
        for (i, v) in list.enumeration {
            result.append(f(v, list[i]))
        }
        return result
    }

    @pre(count = list.count)
    function combine<T2, T3>(list1:ListView<T2>,
            list2:ListView<T3>):ListView<(T, T2, T3)> {
        return combine(list1, list2, (x, y, z) => (x, y, z))
    }

    @pre(count = list.count)
    function combine<T2, T3, T4>(list1:ListView<T2>, list2:ListView<T3>, 
            f:(T, T2, T3)=>(T4)):ListView<T4> {
        def result := PrimitiveArray<T4>()
        for (i, v) in list.enumeration {
            result.append(f(v, list1[i], list2[i]))
        }
        return result
    }

    @private
    class PermutationIterator (Iterator<ListView<T>>) {
        def list:ListView<T>
        def choices:ListView<Int>

        init(list:ListView<T>) {
            self.list := list
            self.choices := Array<T>(list.count, 0)
        }

        @override
        function get_done():Bit {
            return choices[0] = -1
        }

        @override
        function next():ListView<T> {
            def result := Array<T>(list.count)
            def copy := Array<T>(list)
            for c in choices {
                result.add(copy[c])
                copy.removeIndex(c)
            }
            var i := 0
            while i < choices.count & choices[i] = list.count - i - 1 {
                choices[i] := 0
                i += 1
            }
            if i = choices.count {
                choices[0] := -1
            }
            else {
                choices[i] += 1
            }
            return result
        }
    }

    ============================================================================
    Returns an `Iterator` of all possible permutations of this list. A 
    permutation is a distinct ordering; each possible shuffling of a deck of
    cards is a different permutation. As the number of permutations is equal to 
    the factorial of the number of elements in the list, it is only practical to 
    fully iterate the permutations of very small lists (a list with just 15 
    elements in it has over a trillion permutations).

    @returns an iterator which produces permutations of the list
    ============================================================================
    function permutations():Iterator<ListView<T>> {
        return PermutationIterator<T>(self)
    }

    @private
    class CombinationIterator<T> (Iterator<ListView<T>>) {
        def list:ListView<T>
        def choices:List<Int>
        var r := 0
        var index := 0

        @pre(count >= 0 & count <= list.count)
        init(list:ListView<T>, count:Int) {
            self.list := list
            self.choices := Array<T>(count)
            for i in 0 .. count {
                choices.add(i)
            }
        }

        @override
        function get_done():Bit {
            for i in 0 .. choices.count {
                if choices[i] + choices.count < list.count - i {
                    return false
                }
            }
            return true
        }

        @override
        method next():ListView<T> {
            loop {
                if index <= list.count + r - choices.count {
                    choices[r] := index
                    if r = choices.count - 1 {
                        index += 1
                        def result := Array<Int>(choices.count)
                        for c in choices {
                            result.add(list[c])
                        }
                        return result
                    }
                    else {
                        index := choices[r] + 1
                        r += 1
                    }
                }
                else {
                    r -= 1
                    if r > 0 {
                        index := choices[r] + 1
                    }
                    else {
                        index := choices[0] + 1
                    }
                }
            }
        }
    }
    
    ============================================================================
    Returns an `Iterator` of all possible `n`-combinations of this list. An 
    `n`-combination of a list is a selection of `n` distinct elements from the
    list; the set of 5-combinations of a deck of cards is the set of all 
    possible poker hands. The combinations are chosen in such a way as to 
    preserve order: the combinations of a sorted list will themselves be sorted.
    Elements are considered "distinct" if they appear at different positions in
    the input list. This means that the 2-combinations of [1, 2, 2] are [1, 2], 
    [1, 2], and [2, 2], as the two occurrences of `2` are considered distinct
    elements.
    ============================================================================
    function combinations(n:Int):Iterator<ListView<T>> {
        return CombinationIterator<T>(self, n)
    }
}

*-