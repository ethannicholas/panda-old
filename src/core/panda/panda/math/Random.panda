package panda.math

-- Workaround for the fact that I can't stick a threadlocal into an interface.
-- I'd like to fix that eventually, but that will require some extra work on the
-- Java side of things.
@private
class SharedRandom {
    @thread
    var count := 0

    @thread
    def instance := Random.createRandom()
}

================================================================================
Interface for pseudorandom number generators, and utility class methods for
generating random numbers. `Random`'s' class methods generate random numbers 
using internal, thread-local, automatically-seeded instances of `Random`. While 
these automatic instances of `Random` will generate high-quality random numbers,
the exact algorithm may differ between different environments, and there is no
way to manually control the seed used by these instances.

If you require more control over the random number generation, you may manually
create instances of specific implementations of `Random`.
================================================================================
interface Random {
    ============================================================================
    Creates a new, automatically-seeded `Random` using a system-selected
    algorithm. The algorithm and seeding mechanism may be different in different 
    environments or versions of Panda, but will generally try to strike a 
    reasonable balance between speed and quality.
    ============================================================================
    @class
    method createRandom():Random {
        -- The seed is based on the time, thread hash, and SharedRandom.count.
        -- We include the thread hash so multiple threads all creating instances
        -- during the same millisecond don't end up with the same 
        -- seed. 
        -- We include the count so a single thread creating several Randoms 
        -- during the same millisecond doesn't end up with them all having the 
        -- same seed.
        SharedRandom.count += 1
        return XorShiftRandom(Panda.currentTime() ~~ 
                Thread.currentThread().hash ~~ SharedRandom.count)
    }
    
    ============================================================================
    Returns a random `Bit` (either `true` or `false` with 50% odds of each).

    @returns a random bit
    ============================================================================
    method bit():Bit {
        return self.int64() >= 0
    }
    
    ============================================================================
    Returns a random `Bit` (either `true` or `false` with 50% odds of each).

    @returns a random bit
    ============================================================================
    @class
    method bit():Bit {
        return SharedRandom.instance.bit()
    }
    
    ============================================================================
    Returns a random `Int32` between `0` and `n - 1`, inclusive. For example,
    `int(6)` is equivalent to rolling a standard six-sided die, with return
    value between `0` and `5`.
    
    @param n the range of possible values to generate
    @returns a random number between `0` and `n - 1`
    ============================================================================
    @pre(n >= 1)
    @math(overflow)
    method int(n:Int32):Int32 {
        if n = 1
            return 0

        def min := -n % n
        loop {
            def x := self.int64()
            if x >= min
                return (x % n)->Int32
        }
    }
    
    ============================================================================
    Returns a random `Int32` between `0` and `n - 1`, inclusive. For example,
    `int(6)` is equivalent to rolling a standard six-sided die, with return
    value between `0` and `5`.
    
    @param n the range of possible values to generate
    @returns a random number between `0` and `n - 1`
    ============================================================================
    @class
    method int(n:Int32):Int32 {
        return SharedRandom.instance.int(n)
    }

    ============================================================================
    Returns a random `Int32`.
    
    @returns a random number between `Int32.MIN` and `Int32.MAX`
    ============================================================================
    method int32():Int32 {
        return self.int64()->>Int32
    }
    
    ============================================================================
    Returns a random `Int32`.
    
    @returns a random number between `Int32.MIN` and `Int32.MAX`
    ============================================================================
    @class
    method int32():Int32 {
        return SharedRandom.instance.int32()
    }
    
    ============================================================================
    Returns a random `Int64`.
    
    @returns a random number between `Int64.MIN` and `Int64.MAX`
    ============================================================================
    method int64():Int64
        
    ============================================================================
    Returns a random `Int64`.
    
    @returns a random number between `Int64.MIN` and `Int64.MAX`
    ============================================================================
    @class
    method int64():Int64 {
        return SharedRandom.instance.int64()
    }
    
    ============================================================================
    Returns a random, uniformly distributed `Real32` between `0` (inclusive) and
    `1` (exclusive).
    
    @returns a random `Real32`
    ============================================================================
    method real32():Real32 {
        return (self.int32()->>UInt32 >> 8->>UInt32) / (1->UInt32 << 24->>UInt32)
    }
    @post(@return >= 0 & @return < 1)
        
    ============================================================================
    Returns a random, uniformly distributed `Real32` between `0` (inclusive) and
    `1` (exclusive).
    
    @returns a random `Real32`
    ============================================================================
    @class
    method real32():Real32 {
        return SharedRandom.instance.real32()
    }
    @post(@return >= 0 & @return < 1)
    
    ============================================================================
    Returns a random, uniformly distributed `Real64` between `0` (inclusive) and
    `1` (exclusive).
    
    @returns a random `Real64`
    ============================================================================
    method real64():Real64 {
        return (self.int64()->>UInt64 >> 11) / (1->UInt64 << 53)
    }
    @post(@return >= 0 & @return < 1)
        
    ============================================================================
    Returns a random, uniformly distributed `Real64` between `0` (inclusive) and
    `1` (exclusive).
    
    @returns a random `Real64`
    ============================================================================
    @class
    method real64():Real64 {
        return SharedRandom.instance.real64()
    }
    @post(@return >= 0 & @return < 1)
}