package panda.math

================================================================================
A random number generator that reads from a system-defined source of randomness.
Generally speaking, this random number generator will provide the highest 
possible quality of random numbers, at the expense of speed. Note that there is
no way to "seed" a `SystemRandom`, as it may utilize an actual hardware random 
number generator.

Under Unix (including MacOS X), `SystemRandom` reads from `/dev/urandom`.

On other systems, this falls back to an automatically-seeded high-quality PRNG.
================================================================================
class SystemRandom (Random) {
    def stream:InputStream?

    def fallback:Random?

    ============================================================================
    Creates a new `SystemRandom`.
    ============================================================================
    init() {
        def env := System.operatingEnvironment()
        if (env.type = System.Type.NATIVE |
                env.type = System.Type.JVM) &
                (env.operatingSystem = System.OperatingSystem.MACOSX |
                env.operatingSystem = System.OperatingSystem.LINUX |
                env.operatingSystem = System.OperatingSystem.OTHER_UNIX) {
            stream := File("/dev/urandom").openInputStream()
        }
        else {
            fallback := MersenneTwister()
        }
    }


    @override
    method int32():Int32 {
        if stream != null {
            return stream.readInt32()
        }
        else {
            assert fallback != null
            return fallback.int32()
        }
    }

    @override
    method int64():Int64 {
        if stream != null {
            return stream.readInt64()
        }
        else {
            assert fallback != null
            return fallback.int64()
        }
    }
}