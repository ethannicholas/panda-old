package panda.io

================================================================================
Represents a file or directory in the filesystem. Provides methods to read, 
write, and otherwise manipulate the file.
================================================================================
@final
class File : Immutable {
    ============================================================================
    The path separator character on the current platform. Since Panda doesn't
    support Windows yet, this is just hardcoded to `"/"` for the time being.
    ============================================================================
    constant SEPARATOR := "/"

    ============================================================================
    File representing the system temporary directory.
    ============================================================================
    -- FIXME the hardcoded value is, ironically, temporary
    constant TEMP               := new File("/tmp")

    ============================================================================
    The path to the file.
    ============================================================================
    def path:String
    
    ============================================================================
    Creates a `File` referencing the specified path. Creating a `File` object
    does not, by itself, create a physical file on disk; the `File` object
    merely stores the path and allows filesystem operations to take place
    against this path.
    
    @param path the (relative or absolute) path to the file
    ============================================================================
    constructor(path:String) {
        self.path := path
    }
        
    ============================================================================
    Returns a `File` representing the current directory when the program was
    started. This directory cannot be changed while the program is running, as
    it would cause any relative paths to suddenly stop working.

    @returns the program's working directory
    ============================================================================
    @class
    method currentDirectory():File {
        return new File(".")
    }
    
    ============================================================================
    Returns the name of the file, without its path information.
    
    @returns the name of the file
    ============================================================================
    function name():String {
        var index := path.lastIndexOf(SEPARATOR)
        if index = null
            return path
        else
            return path[index + 1..]
    }
    
    ============================================================================
    Returns the simple name of the file, without its extension. For instance,
    new `File("/tmp/foo.tar.gz").simpleName` returns `"foo.tar"`.
    
    @returns the simple name of the file
    ============================================================================
    function simpleName():String {
        var index := name.lastIndexOf(".")
        if index != null
            return name[0 .. index]
        else
            return name
    }

    ============================================================================
    Returns the file's extension, including the leading dot. For instance,
    new `File("/tmp/foo.tar.gz").simpleName` returns `".tar.gz"`. If the 
    filename does not contain a dot, the empty string is returned.
    
    @returns the file's extension
    ============================================================================
    function extension():String {
        var index := name.indexOf(".")
        if index != null
            return name[index..]
        else
            return ""
    }
    
    ============================================================================
    Returns a `File` representing the absolute path of this file.
    
    @returns the file's absolute path
    ============================================================================
    method absolute():File {
        return new File(absolutePath())
    }
    
    ============================================================================
    Returns the directory containing this file, or `null` if the file does not
    have a parent.
    
    @returns the path to the file
    ============================================================================
    method parent():File? {
        Panda.log("parent: \{self}")
        if path = "/"
            return null
        var index := path.lastIndexOf(SEPARATOR)
        if index != null
            return new File(path[0 .. index])
        else
            return absolute().parent()
    }
    
    ============================================================================
    Resolves a potentially-relative path in the context of this `File`. For 
    instance, if `foo` is the path `"/tmp"`, `foo.resolve("bar")` is equivalent 
    to the path `"/tmp/bar"`. When passed an absolute path, such as 
    `foo.resolve("/bar")`, the result is the absolute path (in this case 
    `"/bar"`).
    
    @param path the path to resolve
    @returns a file referring to the relative path
    ============================================================================
    function resolve(path:String):File {
        if path.startsWith("/")
            return new File(path)
        return new File(self.path + SEPARATOR + path)
    }
    
    ============================================================================
    Returns `true` if this file exists.
    
    @returns `true` if this file exists
    ============================================================================
    @external
    method exists():Bit
        
    ============================================================================
    Returns `true` if this file represents a directory.
    
    @returns `true` if this is a directory
    ============================================================================
    @external
    method isDirectory():Bit
        
    ============================================================================
    Creates a directory at this path. It is not an error to attempt to create a
    directory which already exists.
    ============================================================================
    @external
    method createDirectory()
    
    ============================================================================
    Creates a directory at this path, including all required parent directories.
    It is not an error to attempt to create a directory which already exists.
    ============================================================================
    method createDirectories() {
        var p := parent()
        if p != null & !p.exists()
            p.createDirectories()
        createDirectory()
    }
        
    ============================================================================
    Returns a list of files contained in this directory.
    
    @returns the contents of this directory
    ============================================================================
    @external
    method list():PrimitiveArray<File>
    
    @override
    function format(fmt:String):String {
        return path
    }

    ============================================================================
    Deletes the file. If the file is a directory, it must be empty or an 
    exception will be thrown. FIXME fix spec once exceptions are in place.
    ============================================================================
    @external
    method delete()
    
    ============================================================================
    Returns a list of files in this directory matching a wildcard pattern.
    Asterisks ("*") in the pattern mean "match any number of characters", and
    question marks ("?") in the pattern mean "match a single character".
    For example, `directory.list("*.png")` will return a list of all files with
    the extension `".png"`.
    
    @param pattern the wildcard pattern to match
    @returns the files matching the pattern
    ============================================================================
    method list(pattern:String):PrimitiveArray<File> {
        var result := new MutableString()
        for c in pattern {
            if "+?|{[()^$.#\\".contains(c)
                result.append("\\")
            if c = "*"
                result.append(".")
            if c = "?"
                result.append(".")
            else
                result.append(c)
        }
        return list(new RegularExpression(result->>(String)))
    }

    ============================================================================
    Returns a list of files in this directory matching a regular expression.
    For example, `directory.list(#/[abc].*\.png/#)` will return a list of all 
    files with the extension `".png"` that begin with the characters `a`, `b`,
    or `c`.
    
    @param pattern the wildcard pattern to match
    @returns the files matching the pattern
    ============================================================================
    method list(pattern:RegularExpression):PrimitiveArray<File> {
        var raw := list()
        var result := new PrimitiveArray<File>()
        for i in 0 ... raw.length - 1 {
            if raw[i].name.matches(pattern)
                result.append(raw[i])
        }
        return result
    }

    ============================================================================
    Returns a new `InputStream` which reads from the file.
    
    @returns a stream for reading the file
    ============================================================================
    method openInputStream():InputStream {
        return new FileInputStream(self)
    }
        
    ============================================================================
    Returns a new `OutputStream` for writing to the file. The file is reset to
    zero length as part of opening the output stream.
    
    @returns a stream for reading the file
    ============================================================================
    method openOutputStream():OutputStream {
        return new FileOutputStream(self)
    }
    
    ============================================================================
    Replaces the contents of the file with the specified string.
    
    @param s the string to write
    ============================================================================
    method write(s:String) {
        var out := openOutputStream()
        out.write(s)
        out.close()
    }
    
    ============================================================================
    Replaces the contents of the file with the specified data.
    
    @param bytes the data to write
    ============================================================================
    method write(bytes:PrimitiveArray<Int8>) {
        var out := openOutputStream()
        out.write(bytes)
        out.close()
    }

    ============================================================================
    Reads the entire file into a `String` in memory.

    @returns the contents of the file
    ============================================================================
    method readAsString():String {
        def buffer := new MemoryOutputStream()
        openInputStream().sendTo(buffer)
        return buffer->>(String)
    }

    ============================================================================
    Reads the entire file into an `PrimitiveArray<Int8>` in memory.

    @returns the contents of the file
    ============================================================================
    method readAsInt8Array():Array<Int8> {
        def buffer := new MemoryOutputStream()
        openInputStream().sendTo(buffer)
        return buffer->>(Array<Int8>)
    }

    ============================================================================
    Reads the entire file into an `PrimitiveArray<UInt8>` in memory.

    @returns the contents of the file
    ============================================================================
    method readAsUInt8Array():Array<UInt8> {
        def buffer := new MemoryOutputStream()
        openInputStream().sendTo(buffer)
        return buffer->>(Array<UInt8>)
    }

    ============================================================================
    Returns the contents of the file broken up into lines.

    **IMPLEMENTATION NOTE:** In the future this will return a ListView which 
    reads the file one line at a time. Right this second we just slurp the whole
    file into memory.

    @returns the lines of the file
    ============================================================================
    method lines():Iterator<String> {
        return readAsString().split(#/\r?\n/#).iterator
    }
    
    @override
    function =(o:Object):Bit {
        if o-!>(File)
            return false
        return path = o->(File).path
    }

    @override
    function hash():Int {
        return path.hash
    }
        
    @private
    @external
    method absolutePath():String
}