package panda.io

================================================================================
A source of data from which `UInt8`s or `Chars` may be read. `InputStream`
contains a single abstract method, `read()`, which must be overridden to create 
a working `InputStream`. All other methods are ultimately implemented in terms 
of this method, and so a functional `InputStream` can be created by overriding 
one method. However, better performance may generally be achieved by also 
overriding the bulk read methods.
================================================================================
@abstract 
class InputStream {
    @private
    constant BUFFER_SIZE := 2048
    
    ============================================================================
    `true` if this stream has been closed.
    ============================================================================
    @readonly
    var closed:Bit
    
    ============================================================================
    Reads a single `UInt8` from the stream.
    
    @returns the `UInt8` read, or `null` if the end of the stream has been
            reached
    ============================================================================
    @abstract
    @pre(!closed)
    method read():UInt8?

    ============================================================================
    Reads a number of `UInt8`s, appending them to a [ListWriter]. This method 
    will block until at least one byte becomes available for reading. The 
    maximum number of bytes read is defined by `max`. 
    
    @param bytes the read destination
    @param max the maximum number of bytes to read
    @returns the number of `UInt8`s actually read, or `null` if the end of the
            stream has been reached
    ============================================================================
    @pre(!closed)
    method read(bytes:ListWriter<UInt8>, max:Int):Int? {
        var index := 0
        while index < max {
            def b:UInt8? := read()
            if b = null
                break
            bytes.add(b)
            index += 1
        }
        if index > 0
            return index
        else
            return null
    }
    @post(@return = null | @return <= bytes.length)
    
    ============================================================================
    Reads a single `Char` from the stream. There is not necessarily a
    one-to-one correspondence between bytes and `Char`s; the exact mapping
    depends upon the stream's encoding.

    **IMPLEMENTATION NOTE**: Unicode support isn't in yet, therefore this just
    returns a UInt8 zero-extended to a Char.
    
    @returns the Char read, or `null` if the end of the stream has been reached
    ============================================================================
    @final
    @pre(!closed)
    method readChar():Char? {
        def i := read()
        if i != null
            return i->Char 
        else
            return null
    }
    
    ============================================================================
    Reads a number of `Char`s, appending them to a [ListWriter]. This method 
    will block until at least one character becomes available for reading. The 
    maximum number of characters read is defined by `max`. 
    
    **IMPLEMENTATION NOTE**: Unicode support isn't in yet, therefore this just
    zero-extends Int8s to Chars.

    @param chars the read destination
    @param max the maximum number of characters to read
    @returns the number of `Char`s actually read, or `null` if the end of the
            stream has been reached
    ============================================================================
    @pre(!closed)
    method read(chars:ListWriter<Char>, max:Int):Int? {
        var index := 0
        while index < max {
            def c := readChar()
            if c = null
                break
            chars.add(c)
            index += 1
        }
        if index > 0
            return index
        else
            return null
    }
    @post(@return = null | @return >= 0 & @return <= max)

    ============================================================================
    Reads a complete line from the stream.
    
    @returns the next line, or `null` if the end of the stream has been reached
    ============================================================================
    @pre(!closed)
    method readLine():String? {
        var result := MutableString()
        loop {
            def c:Char? := readChar()
            if c = null {
                if result.length = 0
                    return null
                break
            }
            if c->Int = 10
                break
            result.append(c->Char)
        }
        return result.convert()
    }
    
    ============================================================================
    Returns the contents of the file broken up into lines.

    **IMPLEMENTATION NOTE:** In the future this will return an iterator which 
    actually reads the stream one line at a time. Right this second we just 
    slurp the whole stream into memory.

    @returns the lines of the file
    ============================================================================
    method lines():Iterator<String> {
        return readAsString().split(/\r?\n/).iterator()
    }
    
    ============================================================================
    Closes the input stream. Once a stream has been closed, it is an error to
    attempt to read from it.
    ============================================================================
    @pre(!closed)
    method close() {
        closed := true
    }
    @post(closed)
    
    ============================================================================
    Reads the entire contents of this `InputStream`, sending it to the specified
    `OutputStream` as it is read. Once the end of the stream is reached, the
    `InputStream` is automatically closed.

    @param o the `OutputStream` to which to write
    ============================================================================
    @final
    @pre(!closed)
    method sendTo(o:OutputStream) {
        def buffer := Array<UInt8>()
        loop {
            constant BUFFER_SIZE := 8192
            def c := read(buffer, BUFFER_SIZE)
            if c = null
                break
            o.write(buffer)
            buffer.clear()
        }
        close()
    }
    @post(closed)


    method readInt16():Int16? {
        def b1 := read()
        if b1 = null
            return null
        def b2 := read()
        if b2 = null
            return null
        return (b1 << 8 + b2).convert()
    }

    method readInt32():Int32? {
        def b1 := read()
        if b1 = null
            return null
        def b2 := read()
        if b2 = null
            return null
        def b3 := read()
        if b3 = null
            return null
        def b4 := read()
        if b4 = null
            return null
        return (b1 << 24 + b2 << 16 + b3 << 8 + b4).convert()
    }

    ============================================================================
    Reads the entire contents of this `InputStream`, returning it as a string.
    As streams can provide a very large or even infinite amount of data, you 
    should exercise caution when using this method.

    @returns the contents of this stream
    ============================================================================
    method readAsString():String {
        def buffer := MemoryOutputStream()
        sendTo(buffer)
        return buffer.convert()
    }

    ============================================================================
    Reads the entire contents of this `InputStream`, returning it as an
    `Array<Int8>`. As streams can provide a very large or even infinite amount 
    of data, you should exercise caution when using this method.

    @returns the contents of this stream
    ============================================================================
    method readAsInt8Array():Array<Int8> {
        def buffer := MemoryOutputStream()
        sendTo(buffer)
        return buffer.convert()->Array<Int8>
    }

    ============================================================================
    Reads the entire contents of this `InputStream`, returning it as an
    `Array<UInt8>`. As streams can provide a very large or even infinite amount 
    of data, you should exercise caution when using this method.

    @returns the contents of this stream
    ============================================================================
    method readAsUInt8Array():Array<UInt8> {
        def buffer := MemoryOutputStream()
        sendTo(buffer)
        return buffer.convert()->Array<UInt8>
    }
}