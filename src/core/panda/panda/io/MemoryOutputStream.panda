package panda.io

================================================================================
An `OutputStream` which stores data written to it in memory. After writing to
it, its contents may be converted to an `PrimitiveArray` or to a `String`.
================================================================================
class MemoryOutputStream : OutputStream {
    @private
    constant DEFAULT_LENGTH := 16
    
    ============================================================================
    The data buffer
    ============================================================================
    @private 
    def buffer:Array<Int8>
    
    ============================================================================
    Creates a new `MemoryOutputStream`.
    ============================================================================
    constructor() {
        constructor(DEFAULT_LENGTH)
    }
    
    ============================================================================
    Creates a new `MemoryOutputStream` with the specified initial capacity (in
    bytes).
    
    @param size the size of the memory buffer
    ============================================================================
    constructor(size:Int32) {
        buffer := new Array<Int8>()
    }

    function length():Int {
        return buffer.length
    }
    
    @self
    @override
    method write(b:Int8) {
        buffer.add(b)
    }
    
    @self
    @override
    method write(bytes:ListView<Int8>, offset:Int, length:Int) {
        for i in offset .. offset + length
            buffer.add(bytes[i])
    }
    @self
    @override
    method write(b:UInt8) {
        buffer.add(b->>Int8)
    }
    
    @self
    @override
    method write(bytes:ListView<UInt8>, offset:Int, length:Int) {
        for i in offset .. offset + length
            buffer.add(bytes[i]->>Int8)
    }

    @self
    @override
    method write(c:Char) {
        buffer.add(c->>Int8)
    }
    
    @self
    @override
    method write(chars:ListView<Char>, offset:Int, length:Int) {
        for i in offset .. offset + length
            buffer.add(chars[i]->>Int8)
    }

    ============================================================================
    Returns a single `Int8` from the buffer.
    
    @param i the index of the `Int8` to return
    @returns the `Int8` at that index
    ============================================================================
    @pre(i < length)
    function [](i:Int):Int8 {
        return buffer[i]
    }
    
    ============================================================================
    Returns a copy of the memory buffer as a `Int8` array.
    
    @returns all data written to the stream
    ============================================================================
    function ->>():Array<Int8> {
        def result := new Array<Int8>()
        for b in buffer
            result.add(b->>Int8)
        return result
    }

    ============================================================================
    Returns a copy of the memory buffer as a `UInt8` array.
    
    @returns all data written to the stream
    ============================================================================
    function ->>():Array<UInt8> {
        def result := new Array<UInt8>()
        for b in buffer
            result.add(b->>UInt8)
        return result
    }

    ============================================================================
    Returns a copy of the memory buffer as a `Char` array.
    
    @returns all data written to the stream
    ============================================================================
    function ->>():Array<Char> {
        -- FIXME obviously missing encodings here...
        def result := new Array<Char>()
        for b in buffer
            result.add(b->>Char)
        return result

    }

    ============================================================================
    Returns a copy of the memory buffer as a String.
    
    @param fmt the format string, must be `""`
    @returns all data written to the stream
    ============================================================================
    @override
    function ->>():String {
        return new String(self->>Array<Char>)
    }

    ============================================================================
    Sends the contents of the buffer to an output stream.
    ============================================================================
    method sendTo(o:OutputStream) {
        o.write(buffer)
    }

    ============================================================================
    Discards all data written to the stream so far.
    ============================================================================
    method reset() {
        buffer.clear()
    }
    @post(length = 0)
}