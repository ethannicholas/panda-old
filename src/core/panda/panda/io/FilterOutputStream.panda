package panda.io

================================================================================
An output stream which "sits on top of" another output stream, directing its
output to the underlying stream. By default, all methods in `FilterOutputStream`
call the corresponding methods in the underlying `OutputStream`; override them
to change the output as it is sent.
================================================================================
class FilterOutputStream : OutputStream {
    ============================================================================
    The underlying `OutputStream`.
    ============================================================================
    @private
    var out:OutputStream

    ============================================================================
    If `true`, the underlying stream is closed when this stream is closed (which
    may happen due to finalization). Set to `false` if this stream is not the
    sole owner of the underlying stream.
    ============================================================================
    var closeUnderlyingStream := true

    ============================================================================
    Creates a new `FilterOutputStream`.

    @param out the underlying output stream
    ============================================================================
	init(out:OutputStream) {
		self.out := out
	}

    @override
    method write(b:Int8) {
    	out.write(b)
    }
    
    @override
    method write(b:UInt8) {
        out.write(b)
    }
    
    @override
    method write(c:Char) {
        out.write(c)
    }
    
    @override
    method write(b:ListView<Int8>, offset:Int, length:Int) {
    	out.write(b, offset, length)
    }

    @override
    method write(b:ListView<UInt8>, offset:Int, length:Int) {
        out.write(b, offset, length)
    }

    @override
    method write(c:ListView<Char>, offset:Int, length:Int) {
        out.write(c, offset, length)
    }

    @override
    method flush() {
        out.flush()
    }

    @override
    method close() {
    	super.close()
    	if closeUnderlyingStream
    		out.close()
    }
}