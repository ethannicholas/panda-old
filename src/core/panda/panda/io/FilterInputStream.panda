package panda.io

================================================================================
An input stream which "sits on top of" another input stream, reading its input
from the underlying stream. By default, all methods in `FilterInputStream`
call the corresponding methods in the underlying `InputStream`; override them
to change the way reading is performed.
================================================================================
class FilterInputStream : InputStream {
    ============================================================================
    The underlying `InputStream`.
    ============================================================================
    @private
    var raw:InputStream

    ============================================================================
    If `true`, the underlying stream is closed when this stream is closed (which
    may happen due to finalization). Set to `false` if this stream is not the
    sole owner of the underlying stream.
    ============================================================================
    var closeUnderlyingStream := true

    ============================================================================
    Creates a new `FilterInputStream`.

    @param raw the underlying input stream
    ============================================================================
    constructor(raw:InputStream) {
        self.raw := raw
    }

    @override
    method readInt8():Int8? {
        return raw.readInt8()
    }
    
    @override
    method read(bytes:Array<Int8>):Int? {
        return raw.read(bytes)
    }

    @override
    method close() {
    	super.close()
    	if closeUnderlyingStream
    		raw.close()
    }
}