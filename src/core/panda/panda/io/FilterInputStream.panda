package panda.io

================================================================================
An input stream which "sits on top of" another input stream, reading its input
from the underlying stream. By default, all methods in `FilterInputStream`
delegate to the underlying `InputStream`; override them to change the way 
reading is performed.
================================================================================
class FilterInputStream : InputStream {
    ============================================================================
    The underlying `InputStream`.
    ============================================================================
    @protected
    def raw:InputStream

    ============================================================================
    If `true`, the underlying stream is closed when this stream is closed (which
    may happen due to finalization). Set to `false` if this stream is not the
    sole owner of the underlying stream.
    ============================================================================
    var closeUnderlyingStream := true

    ============================================================================
    Creates a new `FilterInputStream`.

    @param raw the underlying input stream
    ============================================================================
    init(raw:InputStream) {
        self.raw := raw
    }

    @override
    method readInt8():Int8? {
        return raw.readInt8()
    }

    @override
    method readUInt8():UInt8? {
        return raw.readUInt8()
    }

    @override
    method readChar():Char? {
        return raw.readChar()
    }
    
    @override
    method read(bytes:ListWriter<Int8>, max:Int):Int? {
        return raw.read(bytes, max)
    }
        
    @override
    method read(bytes:ListWriter<UInt8>, max:Int):Int? {
        return raw.read(bytes, max)
    }
        
    @override
    method read(chars:ListWriter<Char>, max:Int):Int? {
        return raw.read(chars, max)
    }

    @override
    method close() {
    	super.close()
    	if closeUnderlyingStream
    		raw.close()
    }
}