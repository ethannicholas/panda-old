package panda.io

================================================================================
A `FilterInputStream` which buffers data read from its underlying stream, 
reading it in chunks. This causes fewer (and bigger) reads from the underlying
stream, generally making reads from files and network sockets much faster.
================================================================================
class BufferedInputStream : FilterInputStream {
    @private
    constant DEFAULT_BUFFER_SIZE := 8192    

    @private
    var buffer:PrimitiveArray<Int8>

    @private
    var pos := 0

    @private
    var limit := 0

    ============================================================================
    Creates a new `BufferedInputStream`.

    @param raw the underlying input stream
    ============================================================================
    constructor(raw:InputStream) {
        constructor(raw, DEFAULT_BUFFER_SIZE)
    }

    ============================================================================
    Creates a new `BufferedInputStream` with the specified buffer size.

    @param raw the underlying input stream
    @param bufferSize the buffer size (in bytes)
    ============================================================================
    constructor(raw:InputStream, bufferSize:Int) {
        super.constructor(raw)
        buffer := new PrimitiveArray<Int8>(bufferSize)
    }

    @private
    method fillBuffer() {
        pos := 0
        var result := super.read(buffer)
        if result = null
            limit := 0
        else
            limit := result
    }

    @override
    method readInt8():Int8? {
        if pos >= limit
            fillBuffer()
        if pos >= limit
            return null
        var result:Int8 := buffer[pos]
        pos += 1
        return result
    }
    
    @override
    method read(bytes:PrimitiveArray<Int8>):Int? {
        if pos >= limit
            fillBuffer()
        if pos >= limit
            return null
        var result := limit.min(bytes.length)
        for i in 0 ... result - 1 {
            bytes[i] := buffer[pos]
            pos += 1
        }
        return result
    }
}