package panda.io

================================================================================
An output stream which indents the lines it writes.
================================================================================
class IndentedOutputStream : FilterOutputStream {
    ============================================================================
    The current indentation level, in units of `indentSize`. Each line written
    to the underlying stream will be prefixed by `indentSize * level` spaces.
    ============================================================================
    property level := 0

    ============================================================================
    The number of spaces represented by each increment of `level`.
    ============================================================================
    property indentSize := 4

    @private
    var indentation := ""

    @private
    var atLineStart := true

    ============================================================================
    Creates a new `IndentedOutputStream`.

    @param out the underlying output stream
    ============================================================================
    constructor(out:OutputStream) {
        super.constructor(out)
    }

    @self
    method indentSize:=(indentSize:Int) {
        _indentSize := indentSize
        indentation := " " * (indentSize * level)
    }

    @self
    method level:=(level:Int) {
        _level := level
        indentation := " " * (indentSize * level)
    }

    @override
    method write(b:Int8) {
        if b->(Char)  = "\n"
            atLineStart := true
        else
            indentIfNeeded()
        super.write(b)
    }
    
    @override
    method write(b->>Array<Int8>, offset:Int, length:Int) {
        for i in offset ... offset + length - 1
            write(b[i])
    }

    @override
    method write(c:Char) {
        if c = "\n"
            atLineStart := true
        else
            indentIfNeeded()
        super.write(c)
    }
    
    @override
    method write(c->>Array<Char>, offset:Int, length:Int) {
        for i in offset ... offset + length - 1
            write(c[i])
    }

    @private
    method indentIfNeeded() {
        if atLineStart {
            atLineStart := false
            write(indentation)
        }
    }
}