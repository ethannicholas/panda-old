package panda.io

================================================================================
An output stream which indents the lines it writes.
================================================================================
class IndentedOutputStream : FilterOutputStream {
    ============================================================================
    The current indentation level, in units of `indentSize`. Each line written
    to the underlying stream will be prefixed by `indentSize * level` spaces.
    ============================================================================
    property level:Int

    @private
    var _level := 0

    ============================================================================
    The number of spaces represented by each increment of `level`.
    ============================================================================
    property indentSize:Int
    
    @private
    var _indentSize := 4

    @private
    var indentation := ""

    @private
    var atLineStart := true

    ============================================================================
    Creates a new `IndentedOutputStream`.

    @param out the underlying output stream
    ============================================================================
    init(out:OutputStream) {
        super.init(out)
    }

    function get_indentSize():Int {
        return _indentSize
    }

    @self
    method set_indentSize(indentSize:Int) {
        _indentSize := indentSize
        indentation := " " * (indentSize * level)
    }

    function get_level():Int {
        return _level
    }

    @self
    method set_level(level:Int) {
        _level := level
        indentation := " " * (indentSize * level)
    }

    @override
    method write(b:UInt8) {
        if b->Char = "\n" {
            atLineStart := true
        }
        else {
            indentIfNeeded()
        }
        super.write(b)
    }
    
    @override
    method write(bytes:ListView<UInt8>) {
        for b in bytes {
            write(b)
        }
    }
    
    @private
    method indentIfNeeded() {
        if atLineStart {
            atLineStart := false
            write(indentation)
        }
    }
}