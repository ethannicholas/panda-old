package panda.io

================================================================================
A `FilterOutputStream` which buffers data written to its underlying stream, 
writing it in chunks. This causes fewer (and bigger) writes to the underlying
stream, generally making writes to files and network sockets much faster.

Data written to a `BufferedOutputStream` can be held in memory for an arbitrary 
length of time without being written to the underlying stream; it is important 
to call `flush()` or `close()` to ensure that data is written in a timely 
fashion.
================================================================================
class BufferedOutputStream : FilterOutputStream {
    @private
    constant DEFAULT_BUFFER_SIZE := 8192    

    @private
    var buffer:PrimitiveArray<Int8>

    @private
    var limit := 0


    ============================================================================
    Creates a new `BufferedOutputStream`.

    @param out the underlying output stream
    ============================================================================
    constructor(out:OutputStream) {
        constructor(out, DEFAULT_BUFFER_SIZE)
    }

    ============================================================================
    Creates a new `BufferedOutputStream` with a specific buffer size.

    @param out the underlying output stream
    @param bufferSize the size of the buffer in bytes
    ============================================================================
    constructor(out:OutputStream, bufferSize:Int) {
        super.constructor(out)
        buffer := new PrimitiveArray<Int8>(bufferSize)
    }

    @override
    method write(i:Int8) {
        if limit = buffer.length
            flush()
        buffer[limit] := i
        limit += 1
    }
    
    @override
    method write(b:PrimitiveArray<Int8>, var offset:Int, var length:Int) {
        while limit + length > buffer.length {
            var bytes := buffer.length - limit
            write(b, offset, bytes)
            offset += bytes
            length -= bytes
            flush()
        }
        for i in offset ... offset + length - 1 {
            buffer[limit] := b[i]
            limit += 1
        }
    }

    @override
    method flush() {
        super.write(buffer, 0, limit)
        limit := 0
    }

    @override
    method close() {
        flush()
        super.close()
    }
}