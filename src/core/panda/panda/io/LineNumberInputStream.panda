package panda.io

================================================================================
A `FilterInputStream` which tracks the current line and column as it reads from
underlying stream.
================================================================================
class LineNumberInputStream : FilterInputStream {
    ============================================================================
    The current line number (starting at 1).
    ============================================================================
    var line := 1

    ============================================================================
    The current column number (starting at 1).
    ============================================================================
    var column := 1

    ============================================================================
    Creates a new `LineNumberInputStream`.

    @param raw the underlying stream
    ============================================================================
    constructor(raw:InputStream) {
        super.constructor(raw)
    }

    @override
    method readInt8():Int8? {
        var result := super.readInt8()
        if result = "\n"->(Int8) {
            line += 1
            column := 1
        }
        else
            column += 1
        return result
    }
    
    @override
    method read(bytes:ListWriter<Int8>, max:Int):Int? {
        def buffer := new Array<Int8>()
        def result := super.read(buffer, max)
        if result != null {
            for i in 0 .. result {
                if buffer[i] = "\n"->(Int8) {
                    line += 1
                    column := 1
                }
                else
                    column += 1
            }
        }
        bytes.addAll(buffer)
        return result
    }

    @override
    method read(bytes:ListWriter<UInt8>, max:Int):Int? {
        def buffer := new Array<UInt8>()
        def result := super.read(buffer, max)
        if result != null {
            for i in 0 .. result {
                if buffer[i] = "\n"->(UInt8) {
                    line += 1
                    column := 1
                }
                else
                    column += 1
            }
        }
        bytes.addAll(buffer)
        return result
    }

    @override
    method read(chars:ListWriter<Char>, max:Int):Int? {
        def buffer := new Array<Char>()
        def result := super.read(buffer, max)
        if result != null {
            for i in 0 .. result {
                if buffer[i] = "\n" {
                    line += 1
                    column := 1
                }
                else
                    column += 1
            }
        }
        chars.addAll(buffer)
        return result
    }
}