package panda.io

================================================================================
An input stream which allows data to be "pushed back" into it, so that it may
be read again. This is useful in situations such as parsing, in which you may
wish to read until you encounter a delimiter and then push the delimiter back
into the stream so that it can be handled by other code.
================================================================================
class PushbackInputStream : FilterInputStream {
    @private
    def pushbackBuffer := Array<UInt8>()

    ============================================================================
    Creates a new `PushbackInputStream`.

    @param raw the underlying stream
    ============================================================================
    init(raw:InputStream) {
        super.init(raw)
    }

    @override
    method read():UInt8? {
        if pushbackBuffer.count > 0 {
            def result:UInt8 := pushbackBuffer[pushbackBuffer.count - 1]
            pushbackBuffer.removeIndex(pushbackBuffer.count - 1)
            return result.convert()->UInt8
        }
        return super.read()
    }
        
    @override
    method read(bytes:ListWriter<UInt8>, max:Int):Int? {
        if pushbackBuffer.count > 0 {
            var index := 0
            for i in (max - 1).min(pushbackBuffer.count - 1) ... 0 
                    by -1 {
                bytes.add(pushbackBuffer[i].convert()->UInt8)
                index += 1
                pushbackBuffer.removeIndex(pushbackBuffer.count - 1)
            }
            return index
        }
        return raw.read(bytes, max)
    }

    ============================================================================
    Pushes back a single `UInt8`, so that it will be the next byte read by the
    stream.

    @param v the `UInt8` to push
    ============================================================================
    method pushback(v:UInt8) {
        pushbackBuffer.add(v)
    }

    ============================================================================
    Pushes back a list of `UInt8`s.

    @param v the array to push
    ============================================================================
    method pushback(v:ListView<UInt8>) {
        for i in v.count - 1 ... 0 by -1
            pushback(v[i])
    }

    ============================================================================
    Pushes back a single `Char`.

    @param c the character to push
    ============================================================================
    method pushback(c:Char) {
        -- FIXME unicode support
        pushback(c->UInt8)
    }

    ============================================================================
    Pushes back a list of `Char`s.

    @param c the array to push
    ============================================================================
    method pushback(c:ListView<Char>) {
        for i in c.count - 1 ... 0 by -1
            pushback(c[i])
    }
}