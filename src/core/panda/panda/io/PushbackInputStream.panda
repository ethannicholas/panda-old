package panda.io

================================================================================
An input stream which allows data to be "pushed back" into it, so that it may
be read again. This is useful in situations such as parsing, in which you may
wish to read until you encounter a delimiter and then push the delimiter back
into the stream so that it can be handled by other code.
================================================================================
class PushbackInputStream : FilterInputStream {
    @private
    var pushbackBuffer := new Array<Int8>()

    ============================================================================
    Creates a new `PushbackInputStream`.

    @param raw the underlying stream
    ============================================================================
    constructor(raw:InputStream) {
        super.constructor(raw)
    }

    @override
    method readInt8():Int8? {
        if pushbackBuffer.length > 0 {
            var result:Int8 := pushbackBuffer[pushbackBuffer.length - 1]
            pushbackBuffer.removeIndex(pushbackBuffer.length - 1)
            return result
        }
        return super.readInt8()
    }
    
    @override
    method read(bytes:ListWriter<Int8>, max:Int):Int? {
        if pushbackBuffer.length > 0 {
            var index := 0
            for i in (bytes.length - 1).min(pushbackBuffer.length - 1) ... 0 
                    by -1 {
                bytes[index] := pushbackBuffer[i]
                index += 1
                pushbackBuffer.removeIndex(pushbackBuffer.length - 1)
            }
            return index
        }
        return super.read(bytes, max)
    }

    ============================================================================
    Pushes back a single `Int8`, so that it will be the next byte read by the
    stream.

    @param v the `Int8` to push
    ============================================================================
    method pushback(v:Int8) {
        pushbackBuffer.add(v)
    }

    ============================================================================
    Pushes back a single `UInt8`, so that it will be the next byte read by the
    stream.

    @param v the `UInt8` to push
    ============================================================================
    method pushback(v:UInt8) {
        pushbackBuffer.add(v->>(Int8))
    }

    ============================================================================
    Pushes back a list of `Int8`s.

    @param v the array to push
    ============================================================================
    method pushback(v:ListView<Int8>) {
        for i in v.length - 1 ... 0 by -1
            pushback(v[i])
    }

    ============================================================================
    Pushes back a list of `UInt8`s.

    @param v the array to push
    ============================================================================
    method pushback(v:ListView<UInt8>) {
        for i in v.length - 1 ... 0 by -1
            pushback(v[i])
    }

    ============================================================================
    Pushes back a single `Char`.

    @param c the character to push
    ============================================================================
    method pushback(c:Char) {
        -- FIXME unicode support
        pushback(c->(Int8))
    }

    ============================================================================
    Pushes back a list of `Char`s.

    @param c the array to push
    ============================================================================
    method pushback(c:ListView<Char>) {
        for i in c.length - 1 ... 0 by -1
            pushback(c[i])
    }

    ============================================================================
    Pushes back a sequence of `Char`s.

    @param c the array to push
    ============================================================================
    method pushback(c:ListView<Char>) {
        for i in c.length - 1 ... 0 by -1
            pushback(c[i])
    }

    ============================================================================
    Pushes back a `String`.

    @param s the string to push
    ============================================================================
    method pushback(s:String) {
        pushback(s->>(Array<Char>))
    }
}