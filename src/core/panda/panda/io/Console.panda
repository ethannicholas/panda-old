package panda.io

================================================================================
Standard input and output streams, which generally display output to the screen
and receive input from the keyboard.
================================================================================
class Console {
    @private
    init() {
    }

    ============================================================================
    The standard input stream. This will generally read input from the keyboard,
    but is dependent upon the operating environment.
    ============================================================================
    @thread
    var inputStream := FileInputStream(stdIn())

    ============================================================================
    The standard output stream. This will generally display output on the 
    monitor, but is dependent upon the operating environment.
    ============================================================================
    @thread
    var outputStream := FileOutputStream(stdOut())

    ============================================================================
    Returns a single character read from the standard input stream, or `null` if
    the end of the stream has been reached.

    @returns the next character from standard input
    ============================================================================
    @class 
    method read():Char? {
        return inputStream.readChar()
    }

    ============================================================================
    Returns an entire line of input read from the standard input stream, or
    `null` if the end of the stream has been reached.

    @returns the next line from standard input
    ============================================================================
    @class 
    method readLine():String? {
        return inputStream.readLine()
    }

    ============================================================================
    Writes a string to the standard output stream.

    @param s the string to write
    ============================================================================
    @class 
    method write(s:String) {
        outputStream.write(s)
    }
    
    ============================================================================
    Writes an object's string representation to the standard output stream.

    @param o the object to write
    ============================================================================
    @class 
    method write(o:Object) {
        outputStream.write(o)
    }
    
    ============================================================================
    Writes a string followed by a newline to the standard output stream.

    @param s the string to write
    ============================================================================
    @class 
    method writeLine(s:String) {
        write(s + "\n")
    }
    
    ============================================================================
    Writes an object's string representation followed by a newline to the 
    standard output stream.

    @param o the object to write
    ============================================================================
    @class 
    method writeLine(o:Object) {
        write(o + "\n")
    }
    
    ============================================================================
    Writes a formatted string to the standard output stream. See 
    [OutputStream.write(String, PrimitiveArray<Object>)] for details on 
    formatted writes.

    @param s the format string
    @param params the format parameters
    ============================================================================
    @class 
    method write(s:String, params:Object...) {
        outputStream.write(s, params...)
    }
    
    ============================================================================
    Writes a formatted string, followed by a newline, to the standard output 
    stream. See [OutputStream.write(String, PrimitiveArray<Object>)] for details on 
    formatted writes.

    @param s the format string
    @param params the format parameters
    ============================================================================
    @class 
    method writeLine(s:String, params:Object...) {
        outputStream.write(s + "\n", params...)
    }

    ============================================================================
    Writes a newline to the standard output stream.
    ============================================================================
    @class
    method writeLine() {
        write("\n")
    }
        
    @private
    @class
    @external
    method stdIn():$NativePointer
    
    @private
    @class
    @external
    method stdOut():$NativePointer
}