package panda.parser

================================================================================
Runtime for parsers produced by pandac's ParserGenerator.

@hidden
================================================================================
class GLRParser : Immutable {
	class State {
		def reference:Object?

		def offset:Int

		def row:Int

		def column:Int

		def state:StateNode

		init(reference:Object?, offset:Int, row:Int, column:Int, 
				state:StateNode) {
			self.reference := reference
			self.offset := offset
			self.row := row
			self.column := column
			self.state := state
		}
	}

	class ParseError : Immutable {
		def row:Int

		def column:Int

		def error:String

		init(row:Int, column:Int, error:String) {
			self.row := row
			self.column := column
			self.error := error
		}

		@override
		function convert():String {
			return "\{row}:\{column}:\{error}"
		}
	}

	interface Reducer {
		method reduce(production:Int, parserState:State):Object?
	}

	class StateNode : Value {
		def state:Int
		def output:Object?
		def next:StateNode?

		init(state:Int, output:Object?, next:StateNode?) {
			self.state := state
			self.output := output
			self.next := next
		}

		@override
		function convert():String {
			if next != null {
				return state + ", " + next
			}
			return state.convert()
		}
	}

	class Action {
		choice Type {
			SHIFT,
			REDUCE,
			CUT,
			MULTIPLE,
			ACCEPT
		}

		def type:Type

		def target:Int

		def subactions:Array<Action>?

		init(type:Type, target:Int) {
			self.type := type
			self.target := target
		}

		init(subactions:List<Action>) {
			self.type := Type.MULTIPLE
			self.subactions := Array<Action>(subactions)
		}

		@override
		function =(o:Object):Bit {
			if o-?>Action {
				def a := o->Action
				if type != a.type | target != a.target {
					return false
				}
				if subactions != null {
					if subactions.count != a.subactions.count {
						return false
					}
					for (i, v) in subactions.enumeration {
						if v != a.subactions[i] {
							return false
						}
					}
				}
				return true
			}
			return false
		}

		@override
		function get_hash():Int {
			return target 
		}

		@override
		function convert():String {
			switch type {
				case Type.SHIFT: return "\{class.name}(\{Type.name}.SHIFT, \{target})"
				case Type.REDUCE: return "\{class.name}(\{Type.name}.REDUCE, \{target})"
				case Type.CUT: return "\{class.name}(\{Type.name}.CUT, \{target})"
				case Type.MULTIPLE: return "\{class.name}(\{subactions})"
				case Type.ACCEPT: return "\{class.name}(\{Type.name}.ACCEPT, 0)"
			}
			unreachable
		}
	}

	constant EOF := 3.convert()->Char
	constant DIE := ParseError(-1, -1, "die")

	def productionIds:ImmutableArray<Int>

	def actions:ImmutableArray<ImmutableArray<Action?>>

	def gotos:ImmutableArray<ImmutableArray<Int?>>

	def reducer:Reducer

	def errors:ImmutableArray<String?>

	init(productionIds:ImmutableArray<Int>, 
			actions:ImmutableArray<ImmutableArray<Action?>>, 
			gotos:ImmutableArray<ImmutableArray<Int?>>, 
			reducer:Reducer) {
		init(productionIds, actions, gotos, [], reducer)
	}

	init(productionIds:ImmutableArray<Int>, 
			actions:ImmutableArray<ImmutableArray<Action?>>, 
			gotos:ImmutableArray<ImmutableArray<Int?>>, 
			errors:ImmutableArray<String?>, reducer:Reducer) {
		self.productionIds := productionIds
		self.actions := actions
		self.gotos := gotos
		self.errors := errors
		self.reducer := reducer
	}

	function errorText(state:State):String {
		return "parse error"
	}

	function parse(rawText:String, startState:Int, reference:Object?):(Object?, 
			ListView<ParseError>) {
		def text := rawText + EOF
		def parsers := Stack<State>()
		def start := StateNode(startState, "<START>", null)
		var farthest:State := State(reference, 0, 1, 1, start)
		parsers.push(farthest)

		loop {
			if parsers.count = 0 {
				return (null, [ParseError(farthest.row, farthest.column,
							errorText(farthest))])
			}
			def top := parsers.peek()
			if top.offset = text.length {
				return (top.state.next.output, [])
			}
			if top.state.state < 0 {
				if top.offset > farthest.offset {
					farthest := top
				}
				parsers.pop()
				continue
			}
			def row := actions[top.state.state]
			def index := text[top.offset].convert()->Int
			def a:Action?
			if index < row.count {
				a := row[index]
			}
			else {
				a := null
			}
			if a = null {
				def expected := Array<Char>()
				for (i, v) in row.enumeration {
					if v != null {
						expected.add(i.convert())
					}
				}
				parsers.pop()
				if top.offset > farthest.offset {
					farthest := top
				}
				continue
			}
			action(a, text, top, parsers)
		}
	}

	function partialParse(text:String, startState:Int):Int {
		def parsers := Stack<State>()
		var farthest:State := State(null, 0, 1, 1, StateNode(startState, 
				"<START>", null))
		parsers.push(farthest)

		loop {
			if parsers.count = 0 {
				assert false : "parse failure: \{farthest.row}:\{farthest.column}: \{errorText(farthest)}"
            }
			def top := parsers.peek()
			if top.offset = text.length {
				return top.state.state
			}
			if top.state.state < 0 {
				if top.offset > farthest.offset {
					farthest := top
				}
				parsers.pop()
				continue
			}
			def row := actions[top.state.state]
			def index := text[top.offset].convert()->Int
			def a:Action?
			if index < row.count {
				a := row[index]
            }
			else {
				a := null
            }
			if a = null {
				def expected := Array<Char>()
				for (i, v) in row.enumeration {
					if v != null {
						expected.add(i.convert())
					}
				}
				parsers.pop()
				if top.offset > farthest.offset {
					farthest := top
				}
				continue
			}
			action(a, text, top, parsers)
		}
	}

	method action(a:Action, text:String, parserState:State, 
			parsers:Stack<State>) {
		switch a.type {
			case Action.Type.SHIFT:
				def char := text[parserState.offset]
				parserState.state := StateNode(a.target, char.convert(),
						parserState.state)
				parserState.offset += 1
				if char = "\n" {
					parserState.row += 1
					parserState.column := 1
				}
				else if char = "\t" {
					parserState.column += 4 - parserState.column % 4
				}
				else {
					parserState.column += 1
				}
			case Action.Type.REDUCE:
				def output := reducer.reduce(a.target, parserState)
				if output = DIE {
					parserState.state := StateNode(-1, output, 
							parserState.state)
					return
				}
				def next := gotos[parserState.state.state]
						[productionIds[a.target]]
				assert next != null : "no goto for \{parserState.state.state}" +
						"->\{productionIds[a.target]}"
				parserState.state := StateNode(next, output, 
						parserState.state)
			case Action.Type.MULTIPLE:
				def i := a.subactions.iterator
				assert !i.done : "empty multiple action"
				def oldState := parserState.state
				def oldOffset := parserState.offset
				def oldRow := parserState.row
				def oldColumn := parserState.column
				action(i.next(), text, parserState, parsers)
				while !i.done {
					def sub := State(parserState.reference, oldOffset, oldRow, 
							oldColumn, oldState)
					action(i.next(), text, sub, parsers)
					parsers.push(sub)
				}
			case Action.Type.CUT:
				parserState.state := StateNode(a.target, "<CUT>",
						parserState.state)
				parsers.clear()
				parsers.push(parserState)
			default: unreachable
		}
	}
}