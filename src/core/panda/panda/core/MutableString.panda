package panda.core

================================================================================
A modifiable string object.
================================================================================
@final
class MutableString : Array<Char> {
    property length:Int

    ============================================================================
    Creates a new, empty `MutableString`.
    ============================================================================
    init() {
    }

    ============================================================================
    Creates a new `MutableString` with the same contents as `s`.

    @param s the initial contents of the `MutableString`
    ============================================================================
    init(s:String) {
        for i in 0 .. s.length
            add(s[i])
    }
    
    @protected
    function get_length():Int {
        return count
    }

    @self
    method [..]:=(start:Int, end:Int, step:Int, s:String) {
        self[start .. end by step] := s.convert()->ImmutableArray<Char>
    }
        
    @self
    method [..]:=(start:Int?, end:Int?, step:Int, s:String) {
        self[start .. end by step] := s.convert()->ImmutableArray<Char>
    }
    
    @self
    method [...]:=(start:Int, end:Int, step:Int, s:String) {
        self[start ... end by step] := s.convert()->ImmutableArray<Char>
    }
        
    @self
    method [...]:=(start:Int?, end:Int?, step:Int, s:String) {
        self[start ... end by step] := s.convert()->ImmutableArray<Char>
    }
     
    ============================================================================
    Inserts a new string at the specified index.
    
    @param s the string to insert
    @param index the position at which to insert the new string
    ============================================================================
    @self
    method insert(index:Int, s:String) {
        self[index .. index] := s
    }

    ============================================================================
    Deletes a subrange of the string.
    
    @param start the first character to remove
    @param end the index just after the last character to remove
    ============================================================================
    @self
    method remove(start:Int, end:Int) {
        self[start .. end] := ""
    }

    ============================================================================
    Replaces all occurrences of `search` with `replacement`.

    @param search the substring to replace
    @param replacement the replacement string
    ============================================================================
    @self
    method replaceInPlace(search:String, replacement:String) {
        -- FIXME PERFORMANCE: this is a quick-and-dirty implementation
        clear()
        append(convert()->String.replace(search, replacement))
    }

    ============================================================================
    Replaces all matches of the `regex` regular expression within this 
    `MutableString` with the given replacement string. The replacement string 
    may contain `$1`-style regular expression group references; for instance 
    `s.replace(regex, "$1")` will replace every occurrence of the regex with the 
    contents of its first group.

    @param regex the pattern to replace
    @param replacement the replacement string
    ============================================================================
    @self
    method replaceInPlace(regex:RegularExpression, replacement:String) {
        replaceInPlace(regex, replacement, true)
    }

    ============================================================================
    As [replaceInPlace(RegularExpression, String)], but allows the 
    interpretation of `$1`-style group references to be controlled. With 
    `allowGroupReferences` set to `false`, the replacement string is treated 
    literally, with no special handling for `$1`-style sequences.

    @param regex the regular expression to search for
    @param replacement the replacement text
    @param allowGroupReferences if false, `$1`-style group references are 
           ignored
    ============================================================================
    @self
    method replaceInPlace(regex:RegularExpression, replacement:String,
            allowGroupReferences:Bit) {
        -- FIXME PERFORMANCE: this is a quick-and-dirty implementation
        clear()
        append(convert()->String.replace(regex, replacement, allowGroupReferences))
    }    

    ============================================================================
    Searches the string for a regular expression, replacing occurrences of the
    regular expression with new text determined by a function. For instance,
    given:

        "This is a test!".replaceInPlace(/\w+/, word => word.length)

    The regular expression `/\w+/` matches sequences of one or more word
    characters; in other words, it matches all words occurring in the string.
    The replacement function `word => word.length.convert()` replaces each
    matched sequence with the number of characters in the sequence, resulting in
    the text:

        4 2 1 4!

    @param search the regular expression to match the string with
    @param replacement a function generating the replacement text
    ============================================================================
    @self
    method replaceInPlace(search:RegularExpression, 
            replacement:(String)=>(Object)) {
        -- FIXME PERFORMANCE: this is a quick-and-dirty implementation
        clear()
        append(convert()->String.replace(search, replacement))
    }

    ============================================================================
    As [replaceInPlace(RegularExpression, (String)=>(Object))], but the 
    replacement function receives the capture groups from the regular expression
    rather than the raw matched text. The groups array includes the special 
    whole-match group at index `0`, with the first set of parentheses in the 
    regular expression corresponding to array index `1`.

    @param search the regular expression to match the string with
    @param replacement a function generating the replacement text
    ============================================================================
    @self
    method replaceInPlace(search:RegularExpression, 
            replacement:(ListView<String>)=>(Object)) {
        -- FIXME PERFORMANCE: this is a quick-and-dirty implementation
        clear()
        append(convert()->String.replace(search, replacement))
    }

    ============================================================================
    Deletes all occurrences of the `search` string within this `MutableString`.

    @param search the substring to delete
    ============================================================================
    @self
    method delete(search:String) {
        replaceInPlace(search, "")
    }

    ============================================================================
    Deletes all matches of the `regex` regular expression within this 
    `MutableString`.

    @param regex the pattern to delete
    ============================================================================
    @self
    method delete(regex:RegularExpression) {
        replaceInPlace(regex, "")
    }
    
    ============================================================================
    Appends a character to the end of the string.

    @param c the character to append
    ============================================================================
    @self
    method append(c:Char) {
        add(c)
    }

    ============================================================================
    Appends a string to the end of this string.

    @param s the string to append
    ============================================================================
    @self
    method append(s:String) {
        for i in 0 .. s.length
            add(s[i])
    }
    @post(length = @pre(length) + s.length)
    
    ============================================================================
    Converts an object to a string and appends it to this string.

    @param o the object to append
    ============================================================================
    @self
    method append(o:Object) {
        append(o.convert()->String)
    }
    
    ============================================================================
    Returns `true` if this string begins with the substring `s`.
    
    @param s the string to compare against
    @returns `true` if this string begins with the substring `s`
    ============================================================================
    function startsWith(s:String):Bit {
        if length < s.length        
            return false
        for i in 0 ... s.length - 1 {
            if self[i] != s[i]
                return false
        }
        return true
    }

    ============================================================================
    Returns `true` if this string ends with the substring `s`.
    
    @param s the string to compare against
    @returns `true` if this string ends with the substring `s`
    ============================================================================
    function endsWith(s:String):Bit {
        if length < s.length
            return false
        var start := length - s.length
        for i in 0 ... s.length - 1 {
            if self[i + start] != s[i]
                return false
        }
        return true
    }
    
    ============================================================================
    Returns `true` if this string contains the specified substring.
    
    @param s the string to search for
    @returns `true` if the substring was found
    ============================================================================
    function contains(s:String):Bit {
        return indexOf(s) != null
    }
    
    ============================================================================
    Returns the index of the first occurrence of the string `s` within this
    string, or `null` if not found.
    
    @param s the string to search for
    @returns the index of the match, or `null` if not found
    ============================================================================
    function indexOf(s:String):Int? {
        return indexOf(s, 0)
    }

    ============================================================================
    Returns the index of the first occurrence of the string `s` within this
    string, starting from the specified `index`, or `null` if not found.
    
    @param s the string to search for
    @param start the index to begin searching from
    @returns the index of the match, or `null` if not found
    ============================================================================
    @pre(start >= 0)
    @pre(start <= length)
    function indexOf(s:String, start:Int):Int? {
        if length < s.length
            return null
        outer: for i in start ... length - s.length {
            for j in 0 ... s.length - 1 {
                if self[i + j] != s[j]
                    continue outer
            }
            return i
        }
        return null
    }
    @post(@return = null | @return < length)

    ============================================================================
    Returns a substring of this string from `start` (inclusive) to `end`
    (exclusive).

    @param start the first character index to return
    @param end index after the last character to return
    @returns a substring of this string
    ============================================================================
    function [..](start:Int, end:Int):String {
        return convert()->String[start .. end]
    }

    ============================================================================
    Returns a substring of this string from `start` (inclusive) to `end`
    (exclusive), counting by `step`.

    @param start the first character index to return
    @param end index after the last character to return
    @param step the step value
    @returns a substring of this string
    ============================================================================
    @override
    function [..](start:Int, end:Int, step:Int):String {
        return convert()->String[start .. end by step]
    }

    ============================================================================
    Returns a substring of this string from `start` (inclusive) to `end`
    (exclusive), counting by `step`. If `start` is `null`, it defaults to the 
    beginning (for positive `step`) or end (for negative `step`) of the string. 
    If `end` is `null`, it defaults to the end (for positive `step`) or 
    beginning (for negative `step`) of the string.

    @param start the first character index to return
    @param end index after the last character to return
    @param step the step value
    @returns a substring of this string
    ============================================================================
    @override
    function [..](start:Int?, end:Int?, step:Int):String {
        return convert()->String[start .. end by step]
    }

    ============================================================================
    Returns a substring of this string from `start` to `end`, inclusive.

    @param start the first character index to return
    @param end the last character index to return
    @returns a substring of this string
    ============================================================================
    function [...](start:Int, end:Int):String {
        return convert()->String[start ... end]
    }

    ============================================================================
    Returns a substring of this string from `start` to `end`, inclusive, 
    counting by `step`.

    @param start the first character index to return
    @param end the last character index to return
    @param step the step value
    @returns a substring of this string
    ============================================================================
    @override
    function [...](start:Int, end:Int, step:Int):String {
        return convert()->String[start ... end by step]
    }

    ============================================================================
    Returns a substring of this string from `start` to `end`, inclusive, 
    counting by `step`. If `start` is `null`, it defaults to the beginning (for
    positive `step`) or end (for negative `step`) of the string. If `end` is 
    `null`, it defaults to the end (for positive `step`) or beginning (for
    negative `step`) of the string.

    @param start the first character index to return
    @param end the last character index to return
    @param step the step value
    @returns a substring of this string
    ============================================================================
    @override
    function [...](start:Int?, end:Int?, step:Int):String {
        return convert()->String[start ... end by step]
    }

    @override
    @math(overflow)
    function get_hash():Int32 {
        var result := 0
        for i in 0 ... length - 1
            result := result * 101 + self[i].convert()->Int
        return result
    }

    @override
    function =(o:Object):Bit {
        if o-!>MutableString
            return false
        var s := o->MutableString
        if length != s.length
            return false
        for i in 0 ... length - 1 {
            if self[i] != s[i]
                return false
        }
        return true
    }

    ============================================================================
    Returns the contents of this `MutableString` copied into a new, independent
    `String`.
    
    @returns a new `String` containing the same characters as this 
            `MutableString`
    ============================================================================
    @override
    function convert():String {
        return String(self)
    }

    @override
    function format(fmt:String):String {
        return convert()->String.format(fmt)
    }
}