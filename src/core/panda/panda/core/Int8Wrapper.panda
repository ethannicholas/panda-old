package panda.core

================================================================================
An 8 bit signed integer, capable of representing numbers in the range -128 to 
127.

`Int8`s are created automatically as the result of integer literals (numbers 
appearing directly in the source code) and as the result of mathematical 
expressions.
================================================================================
@final
class Int8Wrapper : SignedInteger {
    ============================================================================
    The minimum value representable by an `Int8`.
    ============================================================================
    constant MIN:Int8 := -128
    
    ============================================================================
    The maximum value representable by an `Int8`.
    ============================================================================
    constant MAX:Int8 := 127

    ============================================================================
    The number of bits in an `Int8`.
    ============================================================================
    constant BITS := 8

    ============================================================================
    @hidden
    ============================================================================
    def value:Int8
    
    ============================================================================
    Creates a slice of the integers: a list ranging from `left` to [MAX].

    @param left the first number in the list
    @returns a list of numbers
    ============================================================================
    @class
    function [..](left:Int8):ListView<Int8> {
        return Int8[left...]
    }

    ============================================================================
    Creates a slice of the integers: a list ranging from `left` (inclusive) to
    `right` (exclusive).

    @param left the first number in the list
    @param right the last number in the list plus one
    @returns a list of numbers
    ============================================================================
    @class
    function [..](left:Int8, right:Int8):ListView<Int8> {
        def result := Array<Int8>()
        for v:Int8 in left .. right
            result.add(v)
        return result
    }

    ============================================================================
    Creates a slice of the integers: a list ranging from `left` (inclusive) to
    `right` (exclusive), counting by `step`.

    @param left the first number in the list
    @param right the last number in the list plus one
    @param step the step value
    @returns a list of numbers
    ============================================================================
    @class
    function [..](left:Int8, right:Int8, step:Int8):ListView<Int8> {
        def result := Array<Int8>()
        for v:Int8 in left .. right by step
            result.add(v)
        return result
    }

    ============================================================================
    Creates a slice of the integers: a list ranging from `left` to [MAX].

    @param left the first number in the list
    @returns a list of numbers
    ============================================================================
    @class 
    function [...](left:Int8):ListView<Int8> {
        throw NotSupportedException()
    }
    
    ============================================================================
    Creates a slice of the integers: a list ranging from `left` to `right` 
    (inclusive).

    @param left the first number in the list
    @param right the last number in the list
    @returns a list of numbers
    ============================================================================
    @class
    function [...](left:Int8, right:Int8):ListView<Int8> {
        var result := Array<Int8>()
        for v:Int8 in left ... right
            result.add(v)
        return result
    }

    ============================================================================
    Creates a slice of the integers: a list ranging from `left` to `right` 
    (inclusive), counting by `step`.

    @param left the first number in the list
    @param right the last number in the list
    @param step the step value
    @returns a list of numbers
    ============================================================================
    @class
    function [...](left:Int8, right:Int8, step:Int8):ListView<Int8> {
        def result := Array<Int8>()
        for v:Int8 in left ... right by step
            result.add(v)
        return result
    }

    ============================================================================
    @hidden
    ============================================================================
    init(value:Int8) {
        self.value := value
    }

    -- The operators below are *not actually used* by naive code; i.e. x * y
    -- will never call Int8::* (which is why none of these end up causing
    -- infinite recursion). They are specifically filtered out by 
    -- ASTGenerator::callOverloadedOperator, and defined here purely for
    -- convenience so that they can be accessed like "Int8::*".

    ============================================================================
    The addition operator.

    @param x the number to add to this number
    @returns the sum of the two numbers
    ============================================================================
    @$wrapperMethod
    function +(x:Int8):Int8 {
        try {
            return (self + x)->Int8
        }
        catch e:CastError {
            throw OverflowError(e.message)
        }
    }

    ============================================================================
    The subtraction operator.

    @param x the number to subtract from this number
    @returns the difference of the two numbers
    ============================================================================
    @$wrapperMethod
    function -(x:Int8):Int8 {
        try {
            return (self - x)->Int8
        }
        catch e:CastError {
            throw OverflowError(e.message)
        }
    }

    ============================================================================
    The multiplication operator.

    @param x the number by which to multiply this number
    @returns the product of the two numbers
    ============================================================================
    @$wrapperMethod
    function *(x:Int8):Int8 {
        try {
            return (self * x)->Int8
        }
        catch e:CastError {
            throw OverflowError(e.message)
        }
    }

    ============================================================================
    The division operator.

    @param x the number by which to divide this number
    @returns the quotient of the two numbers
    ============================================================================
    @$wrapperMethod
    function /(x:Int8):Real32 {
        try {
            return self / x
        }
        catch e:CastError {
            throw OverflowError(e.message)
        }
    }

    ============================================================================
    The integer division operator.

    @param x the number by which to divide this number
    @returns the quotient of the two numbers
    ============================================================================
    @$wrapperMethod
    function //(x:Int8):Int8 {
        try {
            return (self // x)->Int8
        }
        catch e:CastError {
            throw OverflowError(e.message)
        }
    }

    ============================================================================
    The exponent operator.

    @param x the power to which to raise this number
    @returns the specified power of this number
    ============================================================================
    @$wrapperMethod
    function ^(x:UInt8):Int8 {
        try {
            return (self ^ x)->Int8
        }
        catch e:CastError {
            throw OverflowError(e.message)
        }
    }

    ============================================================================
    The exponent operator.

    @param x the power to which to raise this number
    @returns the specified power of this number
    ============================================================================
    @$wrapperMethod
    function ^(x:Real32):Real32 {
        try {
            return self ^ x
        }
        catch e:CastError {
            throw OverflowError(e.message)
        }
    }

    ============================================================================
    The bitwise OR operator.

    @param x the number to OR with this number
    @returns the OR of the two numbers
    ============================================================================
    @$wrapperMethod
    function ||(x:Int8):Int8 {
        try {
            return (self || x)->Int8
        }
        catch e:CastError {
            throw OverflowError(e.message)
        }
    }

    ============================================================================
    The bitwise AND operator.

    @param x the number to AND with this number
    @returns the AND of the two numbers
    ============================================================================
    @$wrapperMethod
    function &&(x:Int8):Int8 {
        try {
            return (self && x)->Int8
        }
        catch e:CastError {
            throw OverflowError(e.message)
        }
    }

    ============================================================================
    The bitwise XOR operator.

    @param x the number to XOR with this number
    @returns the XOR of the two numbers
    ============================================================================
    @$wrapperMethod
    function ~~(x:Int8):Int8 {
        try {
            return (self ~~ x)->Int8
        }
        catch e:CastError {
            throw OverflowError(e.message)
        }
    }

    ============================================================================
    The bitwise NOT operator.

    @returns the bitwise complement of this number
    ============================================================================
    @$wrapperMethod
    function !!():Int8 {
        return (!!self)->>Int8
    }

    ============================================================================
    The greater than operator.

    @param x the number to compare against
    @returns true if this number is greater than `x`
    ============================================================================
    @$wrapperMethod
    function >(x:Int8):Bit {
        return self > x
    }

    ============================================================================
    The greater than or equal to operator.

    @param x the number to compare against
    @returns true if this number is greater than or equal to `x`
    ============================================================================
    @$wrapperMethod
    function >=(x:Int8):Bit {
        return self >= x
    }

    ============================================================================
    The less than operator.

    @param x the number to compare against
    @returns true if this number is less than `x`
    ============================================================================
    @$wrapperMethod
    function <(x:Int8):Bit {
        return self < x
    }

    ============================================================================
    The less than or equal to operator.

    @param x the number to compare against
    @returns true if this number is less than or equal to `x`
    ============================================================================
    @$wrapperMethod
    function <=(x:Int8):Bit {
        return self <= x
    }

    ============================================================================
    Returns the greater (closer to positive infinity) of itself and its 
    parameter.

    @param other the number to compare against
    @returns the maximum of itself and the other number
    ============================================================================
    @$wrapperMethod
    function max(other:Int32):Int32 {
        if self > other
            return self
        else
            return other
    }

    ============================================================================
    Returns the greater (closer to positive infinity) of itself and its 
    parameter.

    @param other the number to compare against
    @returns the maximum of itself and the other number
    ============================================================================
    @$wrapperMethod
    function max(other:Int64):Int64 {
        if self > other
            return self
        else
            return other
    }

    ============================================================================
    Returns the greater (closer to positive infinity) of itself and its 
    parameter.

    @param other the number to compare against
    @returns the maximum of itself and the other number
    ============================================================================
    @$wrapperMethod
    function max(other:UInt32):UInt32 {
        if self < 0
            return other
        if self->UInt32 > other
            return self->UInt32
        else
            return other
    }

    ============================================================================
    Returns the greater (closer to positive infinity) of itself and its 
    parameter.

    @param other the number to compare against
    @returns the maximum of itself and the other number
    ============================================================================
    @$wrapperMethod
    function max(other:UInt64):UInt64 {
        if self < 0
            return other
        if self->UInt64 > other
            return self->UInt64
        else
            return other
    }

    ============================================================================
    Returns the greater (closer to positive infinity) of itself and its 
    parameter.

    @param other the number to compare against
    @returns the maximum of itself and the other number
    ============================================================================
    @$wrapperMethod
    function max(other:Real32):Real32 {
        if self > other
            return self
        else
            return other
    }

    ============================================================================
    Returns the greater (closer to positive infinity) of itself and its 
    parameter.

    @param other the number to compare against
    @returns the maximum of itself and the other number
    ============================================================================
    @$wrapperMethod
    function max(other:Real64):Real64 {
        if self > other
            return self
        else
            return other
    }

    ============================================================================
    Returns the lesser (closer to negative infinity) of itself and its 
    parameter.

    @param other the number to compare against
    @returns the minimum of itself and the other number
    ============================================================================
    @$wrapperMethod
    function min(other:Int32):Int32 {
        if self < other
            return self
        else
            return other
    }

    ============================================================================
    Returns the lesser (closer to negative infinity) of itself and its 
    parameter.

    @param other the number to compare against
    @returns the minimum of itself and the other number
    ============================================================================
    @$wrapperMethod
    function min(other:Int64):Int64 {
        if self < other
            return self
        else
            return other
    }

    ============================================================================
    Returns the lesser (closer to negative infinity) of itself and its 
    parameter.

    @param other the number to compare against
    @returns the minimum of itself and the other number
    ============================================================================
    @$wrapperMethod
    function min(other:UInt32):Int8 {
        if self < 0
            return self
        if (self->UInt32) < self
            return self
        else
            return other->Int8
    }

    ============================================================================
    Returns the lesser (closer to negative infinity) of itself and its 
    parameter.

    @param other the number to compare against
    @returns the minimum of itself and the other number
    ============================================================================
    @$wrapperMethod
    function min(other:UInt64):Int8 {
        if self < 0
            return self
        if (self->UInt64) < other
            return self
        else
            return other->Int8
    }

    ============================================================================
    Returns the lesser (closer to negative infinity) of itself and its 
    parameter.

    @param other the number to compare against
    @returns the minimum of itself and the other number
    ============================================================================
    @$wrapperMethod
    function min(other:Real32):Real32 {
        if self < other
            return self
        else
            return other
    }

    ============================================================================
    Returns the lesser (closer to negative infinity) of itself and its 
    parameter.

    @param other the number to compare against
    @returns the minimum of itself and the other number
    ============================================================================
    @$wrapperMethod
    function min(other:Real64):Real64 {
        if self < other
            return self
        else
            return other
    }

    ============================================================================
    Returns a number describing the sign of this number. The result is `1` if
    this number is positive, `-1` if it is negative, and `0` if it is zero.

    @returns the sign of this number
    ============================================================================
    @$wrapperMethod
    function sign():Int {
        if self > 0
            return 1
        else if self < 0
            return -1
        return 0
    }

    ============================================================================
    Returns the absolute value of this number. The absolute value has the same
    magnitude, but is always positive.

    @returns the absolute value of this number
    ============================================================================
    @$wrapperMethod
    function abs():Int8 {
        if self < 0
            return -self
        return self
    }

    ============================================================================
    Returns the square root of this number.

    @returns the square root of this number
    ============================================================================
    @$wrapperMethod
    function sqrt():Real32 {
        return self->>Real32.sqrt
    }

    ============================================================================
    Returns the trigonometric sine of this number.

    @returns the sine of this number
    ============================================================================
    @$wrapperMethod
    function sin():Real32 {
        return self->>Real32.sin
    }

    ============================================================================
    Returns the trigonometric cosine of this number.

    @returns the cosine of this number
    ============================================================================
    @$wrapperMethod
    function cos():Real32 {
        return self->>Real32.cos
    }

    ============================================================================
    Returns the trigonometric tangent of this number.

    @returns the tangent of this number
    ============================================================================
    @$wrapperMethod
    function tan():Real32 {
        return self->>Real32.tan
    }

    ============================================================================
    Returns a single `Bit` from this integer. Index `0` is the least significant
    bit, and index `7` is the most significant bit.

    @param index the index of the bit to return
    @returns `true` if the bit is set
    ============================================================================
    @pre(index >= 0 & index < BITS)
    @$wrapperMethod
    function [](index:Int):Bit {
        return self >> index && 1 = 1
    }

    ============================================================================
    Returns a slice of this integer's bit representation. Index `0` is the least 
    significant bit, and index `7` is the most significant bit. The sliced bits
    are returned packed in a new `Int8` value. For example:

        var value := -1
        Console.writeLine(value[4 .. 8])

    This selects the four most significant bits of `value`. Since `value` is
    `-1`, and the binary representation of `-1` has all bits set, the resulting
    slice also has all four of its bits set, resulting in the value `15`.
    
    @param left the index of the first bit to return
    @param right the index of the last bit to return
    @param step the number of bits to count by
    @returns the selected bits
    ============================================================================
    @$wrapperMethod
    @pre(left >= 0 & left < BITS & right >= 0 & right < BITS & step != 0)
    function [..](var left:Int?, var right:Int?, step:Int):Int8 {
        if left = null {
            if step > 0
                left := 0
            else
                left := BITS - 1
        }
        if right = null {
            if step > 0
                right := BITS
            else
                right := -1
        }
        if step = 1 {
            var mask := (-1)->>UInt8 >> (BITS - (right - left))
            return (self >> left && mask)->Int8
        }
        var count := 0
        var result := 0
        for i in left ... right by step {
            var bit := self[i]
            if bit
                result ||= 1 << count
            count += 1
        }
        return result->Int8
    }

    ============================================================================
    Returns the number of bits necessary to represent this number. For instance,
    the number `19` has binary representation `10011`, therefore `19.length` has
    the value `5`. Negative numbers always have their most significant bit set
    and thus a length equal to `BITS`, and `0` reports a length of `0`.

    @returns the length of the number's binary representation
    ============================================================================
    @$wrapperMethod
    @external
    function length():Int

    ============================================================================
    @hidden
    ============================================================================
    @protected
    @override
    function convertToString(thousandsSeparator:Char?, minWholeDigits:Int?, 
            minFractionDigits:Int?, maxFractionDigits:Int?, base:Int, 
            baseChars:String):String {
        return convertToString(value, thousandsSeparator, minWholeDigits,
                minFractionDigits, maxFractionDigits, base, baseChars)
    }
        
    @override
    function =(o:Object):Bit {
        if o-?>Integer
            return value = o->Number->>Int64
        else if o-?>RealNumber
            return value = o->Number->>Real64
        else
            return false
    }
        
    @override
    function convert():Int8 {
        return value
    }

    @override
    function convert():Int16 {
        return value
    }

    @override
    function convert():Int32 {
        return value
    }

    @override
    function convert():Int64 {
        return value
    }

    @override
    function convert():UInt8 {
        return value->>UInt8
    }

    @override
    function convert():UInt16 {
        return value->>UInt16
    }

    @override
    function convert():UInt32 {
        return value->>UInt32
    }

    @override
    function convert():UInt64 {
        return value->>UInt64
    }

    function convert():Char {
        return value->>Char
    }

    @override
    function convert():Real32 {
        return value
    }

    @override
    function convert():Real64 {
        return value
    }

    @override
    function convert():String {
        return value->Int64->>String
    }
}