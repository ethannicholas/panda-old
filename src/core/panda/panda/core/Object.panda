package panda.core

================================================================================
The abstract superclass of all objects. The most general type in Panda is
`Object?`, which may hold any value including `null`.
================================================================================
@abstract 
class Object {
    @private 
    var cl:Class

    constructor() { 
    }
    
    ============================================================================
    Returns the `Class` which this object is an instance of.
    
    @returns the object's `Class`
    ============================================================================
    @final
    function $class():Class {
        -- the "$" in the name is eliminated via some special handling in the
        -- compiler; you actually invoke this via o.class
        return cl
    }
    
    ============================================================================
    Returns a computed hash code based on the object's contents. This hash
    code is used whenever the object is used as a key in a `HashMap`, and 
    should follow the normal rules for a hash code: it must be equal when two
    objects are equal, and it should, as often as possible, be different between
    two objects that are not equal.
    
    [=(Object)] and [hash()] must both be overridden together so that they are
    consistent with these rules; an inconsistent implementation (for instance,
    returning different hash codes for two objects which compare equal) will
    result in undefined behavior when the objects are used in collections.
    
    Keep in mind that most hash algorithms rely on integer overflow; you will
    most likely want to define `@math(overflow)` on your hash methods.
    
    The default implementation of `hash()` is based on the object's memory
    address. Any two distinct objects are very likely to have different hashes.
    
    @returns the object's hash code
    @see =(Object)
    ============================================================================
    @external 
    function hash():Int32

    ============================================================================
    Compares this object for equality with another object. The default
    implementation compares the two objects' identities (using the `==`
    operator). See [hash()] for the contract between `hash()` and `=`.
    
    @param o the object to compare against
    @returns `true` if the two objects are the same
    @see hash()
    ============================================================================
    function =(o:Object):Bit {
        return self == o
    }

    ============================================================================
    Converts this object to its default string representation. The default
    implementation calls [format("")](format).

    **You probably do not want to override this function**. If you do, be sure 
    to continue to return the same string that `format("")` would have returned,
    otherwise you will run into strange behaviors such as 
    `writeLine("The answer is: " + value)` and 
    `writeLine("The answer is: \{value}")` doing different things. 

    While overriding this function is generally a bad idea, it is not marked 
    `@final` because there are occasional good reasons to do it: for instance, 
    the various built-in `Number` types override it for performance reasons 
    (converting numbers to strings is extremely common, and the more-general
    `format()` function is necessarily somewhat slower).

    @returns a string representation of this object
    ============================================================================
    function ->>():String {
        return format("")
    }

    ============================================================================
    Formats the object for display according to a format string. The default
    implementation requires an empty format string and returns 
    [self->>String](->>():String).

    The contents and meaning of a format string are defined by each individual
    class. An empty format string should always yield the default representation
    of an object, and other strings may alter this representation in various
    ways.

    Note that there is a precondition which requires the format string to be
    empty. Subclasses which wish to permit other format strings must use
    `@preOr` to extend the legal set of strings (in the extreme, `@preOr(true)`
    will permit everything).

    By convention, `object.format("")` should always return the same string as
    `object->>String`.

    @param fmt the format string
    @returns a string representation of this object
    ============================================================================
    @pre(fmt.length = 0)
    function format(fmt:String):String {
        return Panda.id(self)
    }

    ============================================================================
    Performs cleanup of this object prior to its removal from memory. The
    default implementation of `finalize()` does nothing. **You should only 
    override `finalize()` in order to free non-Panda resources referenced by 
    this object**, such as file handles or other native system objects. Programs
    written entirely in Panda should never need to override `finalize()`.

    **IMPLEMENTATION NOTE:** finalize() is a solution to the real-world problem
    "how do we ensure that native resources (such as file handles) held by a
    Panda object get cleaned up?" Unfortunately, it is a *terrible* solution to
    this problem. It was quick and low-effort, but *probably will not be the
    long-term solution* to this problem.
    ============================================================================
    method finalize() {
    }

    ============================================================================
    @hidden
    ============================================================================
    @class
    function parse(inStream:InputStream):Object? {
        return new PandaDataParser(inStream).parse()
    }    
}