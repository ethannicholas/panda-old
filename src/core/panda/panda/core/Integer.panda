package panda.core

@specialize
class IntIterator<T:Integer> (Iterator<T>) {
    def end:T
    def step:T
    var current:T
    var endInclusive:Bit
    var isDone:Bit

    @pre(step != 0)
    init(start:T, end:T, step:T, endInclusive:Bit) {
        self.current := start
        self.end := end
        self.step := step
        self.endInclusive := endInclusive
    }

    @override
    function get_done():Bit {
       	return isDone
    }

    @override
    method next():T {
        def result := current
        -- have to jump through some hoops here to avoid overflows
        if step > 0 {
            if endInclusive {
                isDone := end - current < step
            }
            else {
                isDone := end - current <= step
            }
        }
        else {
            if endInclusive {
                isDone := current - end < -step
            }
            else {
                isDone := current - end <= -step
            }
        }
        if !isDone {
            current := (current + step)->T
        }
        return result
    }
}

================================================================================
The abstract superclass of the integer types (8, 16, 32, and 64 bit signed and
unsigned integers).
================================================================================
@abstract
class Integer : Number {
}