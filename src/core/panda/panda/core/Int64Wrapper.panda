package panda.core

================================================================================
A 64 bit signed integer, capable of representing numbers in the range 
-9,223,372,036,854,775,808 to 9,223,372,036,854,775,807.

`Int64`s are created automatically as the result of integer literals (numbers 
appearing directly in the source code) and as the result of mathematical 
expressions.
================================================================================
@static
class Int64Wrapper : SignedInteger {
    ============================================================================
    The minimum value representable by an `Int64`.
    ============================================================================
    constant MIN := -9223372036854775808
    
    ============================================================================
    The maximum value representable by an `Int64`.
    ============================================================================
    constant MAX := 9223372036854775807

    ============================================================================
    The number of bits in an `Int64`.
    ============================================================================
    constant BITS := 64

    ============================================================================
    @hidden
    ============================================================================
    def value:Int64
    
    ============================================================================
    Creates a slice of the integers: an array ranging from `left` (inclusive) to
    `right` (exclusive).
    ============================================================================
    @class
    function [..](left:Int64, right:Int64):Array<Int64> {
        def result := new Array<Int64>()
        for v:Int64 in left .. right
            result.append(v)
        return result
    }

    ============================================================================
    Creates a slice of the integers: an array ranging from `left` (inclusive) to
    `right` (exclusive), counting by `step`.
    ============================================================================
    @class
    function [..](left:Int64, right:Int64, step:Int64):Array<Int64> {
        def result := new Array<Int64>()
        for v:Int64 in left .. right by step
            result.append(v)
        return result
    }

    @class 
    function [...](left:Int64):Array<Int64> {
        throw new UnimplementedException()
    }
    
    ============================================================================
    Creates a slice of the integers: an array ranging from `left` to `right` 
    (inclusive).
    ============================================================================
    @class
    function [...](left:Int64, right:Int64):Array<Int64> {
        var result := new Array<Int64>()
        for v:Int64 in left ... right
            result.append(v)
        return result
    }

    ============================================================================
    Creates a slice of the integers: an array ranging from `left` to `right` 
    (inclusive), counting by `step`.
    ============================================================================
    @class
    function [...](left:Int64, right:Int64, step:Int64):Array<Int64> {
        def result := new Array<Int64>()
        for v:Int64 in left ... right by step
            result.append(v)
        return result
    }

    constructor(value:Int64) {
        self.value := value
    }

    -- The operators below are *not actually used* by naive code; i.e. x * y
    -- will never call Int64::* (which is why none of these end up causing
    -- infinite recursion). They are specifically filtered out by 
    -- ASTGenerator::callOverloadedOperator, and defined here purely for
    -- convenience so that they can be accessed like "Int64::*".

    @$wrapperMethod
    function +(x:Int64):Int64 {
        try {
            return (self + x)->(Int64)
        }
        catch e:CastError {
            throw new OverflowError(e.message)
        }
    }

    @$wrapperMethod
    function -(x:Int64):Int64 {
        try {
            return (self - x)->(Int64)
        }
        catch e:CastError {
            throw new OverflowError(e.message)
        }
    }

    @$wrapperMethod
    function *(x:Int64):Int64 {
        try {
            return (self * x)->(Int64)
        }
        catch e:CastError {
            throw new OverflowError(e.message)
        }
    }

    @$wrapperMethod
    function /(x:Int64):Real64 {
        try {
            return self / x
        }
        catch e:CastError {
            throw new OverflowError(e.message)
        }
    }

    @$wrapperMethod
    function //(x:Int64):Int64 {
        try {
            return (self // x)->(Int64)
        }
        catch e:CastError {
            throw new OverflowError(e.message)
        }
    }

    @$wrapperMethod
    function ^(x:UInt64):Int64 {
        try {
            return (self ^ x)->(Int64)
        }
        catch e:CastError {
            throw new OverflowError(e.message)
        }
    }

    @$wrapperMethod
    function ^(x:Real32):Real64 {
        try {
            return self ^ x
        }
        catch e:CastError {
            throw new OverflowError(e.message)
        }
    }

    @$wrapperMethod
    function ||(x:Int64):Int64 {
        try {
            return (self || x)->(Int64)
        }
        catch e:CastError {
            throw new OverflowError(e.message)
        }
    }

    @$wrapperMethod
    function &&(x:Int64):Int64 {
        try {
            return (self && x)->(Int64)
        }
        catch e:CastError {
            throw new OverflowError(e.message)
        }
    }

    @$wrapperMethod
    function ~~(x:Int64):Int64 {
        try {
            return (self ~~ x)->(Int64)
        }
        catch e:CastError {
            throw new OverflowError(e.message)
        }
    }

    @$wrapperMethod
    function !!():Int64 {
        return (!!self)->>(Int64)
    }

    @$wrapperMethod
    function >(x:Int64):Bit {
        return self > x
    }

    @$wrapperMethod
    function >=(x:Int64):Bit {
        return self >= x
    }

    @$wrapperMethod
    function <(x:Int64):Bit {
        return self < x
    }

    @$wrapperMethod
    function <=(x:Int64):Bit {
        return self <= x
    }

    ============================================================================
    Returns the greater (closer to positive infinity) of itself and its 
    parameter.

    @param other the number to compare against
    @returns the maximum of itself and the other number
    ============================================================================
    @$wrapperMethod
    function max(other:Int64):Int64 {
        if self > other
            return self
        else
            return other
    }

    ============================================================================
    Returns the greater (closer to positive infinity) of itself and its 
    parameter.

    @param other the number to compare against
    @returns the maximum of itself and the other number
    ============================================================================
    @$wrapperMethod
    function max(other:UInt64):UInt64 {
        if self < 0
            return other
        if self->(UInt64) > other
            return self->(UInt64)
        else
            return other
    }

    ============================================================================
    Returns the greater (closer to positive infinity) of itself and its 
    parameter.

    @param other the number to compare against
    @returns the maximum of itself and the other number
    ============================================================================
    @$wrapperMethod
    function max(other:Real64):Real64 {
        if self > other
            return self
        else
            return other
    }

    ============================================================================
    Returns the lesser (closer to negative infinity) of itself and its 
    parameter.

    @param other the number to compare against
    @returns the minimum of itself and the other number
    ============================================================================
    @$wrapperMethod
    function min(other:Int64):Int64 {
        if self < other
            return self
        else
            return other
    }

    ============================================================================
    Returns the lesser (closer to negative infinity) of itself and its 
    parameter.

    @param other the number to compare against
    @returns the minimum of itself and the other number
    ============================================================================
    @$wrapperMethod
    function min(other:Real64):Real64 {
        if self < other
            return self
        else
            return other
    }

    @$wrapperMethod
    function sign():Int {
        if self > 0
            return 1
        else if self < 0
            return -1
        return 0
    }

    @$wrapperMethod
    function sqrt():Real {
        return self->>(Real).sqrt
    }

    @$wrapperMethod
    function sin():Real {
        return self->>(Real).sin
    }

    @$wrapperMethod
    function cos():Real {
        return self->>(Real).cos
    }

    @$wrapperMethod
    function tan():Real {
        return self->>(Real).tan
    }

    @$wrapperMethod
    function abs():Int64 {
        if self < 0
            return -self
        return self
    }

    ============================================================================
    Returns a single `Bit` from this integer. Index `0` is the least significant
    bit, and index `63` is the most significant bit.

    @param index the index of the bit to return
    @returns `true` if the bit is set
    ============================================================================
    @$wrapperMethod
    @pre(index >= 0 & index < BITS)
    function [](index:Int):Bit {
        return self >> index && 1 = 1
    }

    ============================================================================
    Returns a slice of this integer's bit representation. Index `0` is the least 
    significant bit, and index `63` is the most significant bit. The sliced bits
    are returned packed in a new `Int64` value. For example:

        var value := -1
        Console.writeLine(value[8 .. 16])

    This selects the second-least-signficant byte of `value`. Since `value` is
    `-1`, and the binary representation of `-1` has all bits set, the resulting
    slice also has all eight of its bits set, resulting in the value `255`.
    
    @param left the index of the first bit to return
    @param right the index of the last bit to return
    @param step the number of bits to count by
    ============================================================================
    @$wrapperMethod
    @pre(left >= 0 & left < BITS & right >= 0 & right < BITS & step != 0)
    function [..](var left:Int?, var right:Int?, step:Int):Int64 {
        if left = null {
            if step > 0
                left := 0
            else
                left := BITS - 1
        }
        if right = null {
            if step > 0
                right := BITS
            else
                right := -1
        }
        if step = 1 {
            var mask := -1->>(UInt64) >> (BITS - (right - left))->>(UInt64)
            return self >> left && mask->>(Int64)
        }
        var count := 0
        var result:Int64 := 0
        for i in left ... right by step {
            var bit := self[i]
            if bit
                result ||= 1 << count
            count += 1
        }
        return result
    }

    ============================================================================
    Returns the number of bits necessary to represent this number. For instance,
    the number `19` has binary representation `10011`, therefore `19.length` has
    the value `5`. Negative numbers always have their most significant bit set
    and thus a length equal to `BITS`, and `0` reports a length of `0`.
    ============================================================================
    @$wrapperMethod
    @external
    function length():Int

    ============================================================================
    @hidden
    ============================================================================
    @protected
    @override
    function convertToString(thousandsSeparator:Char?):String {
        return convertToString(value, thousandsSeparator)
    }
    
    @override
    function =(o:Object):Bit {
        if o-?>(Integer)
            return value = o->(Number)->>(Int64)
        else if o-?>(RealNumber)
            return value = o->(Number)->>(Real64)
        else
            return false
    }
        
    @override
    function ->>():Int8 {
        return value->>(Int8)
    }

    @override
    function ->>():Int16 {
        return value->>(Int16)
    }

    @override
    function ->>():Int32 {
        return value->>(Int32)
    }
        
    @override
    function ->>():Int64 {
        return value
    }

    @override
    function ->>():UInt8 {
        return value->>(UInt8)
    }

    @override
    function ->>():UInt16 {
        return value->>(UInt16)
    }

    @override
    function ->>():UInt32 {
        return value->>(UInt32)
    }
        
    @override
    function ->>():UInt64 {
        return value->>(UInt64)
    }

    @override
    function ->>():Real32 {
        return value->>(Real32)
    }

    @override
    function ->>():Real64 {
        return value
    }

    @override
    function ->>():String {
        return value->>(String)
    }
}