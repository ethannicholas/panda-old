package panda.core

================================================================================
Represents a single 32 bit Unicode code point.
================================================================================
@final
class CharWrapper : Primitive {
    ============================================================================
    The minimum value representable by a `Char`.
    ============================================================================
    constant MIN := 0->Char

    ============================================================================
    The maximum value representable by a `Char`.
    ============================================================================
    constant MAX := 0x10ffff->Char

    ============================================================================
    @hidden
    ============================================================================
    def value:Char

    ============================================================================
    Creates a slice of the chars: a list ranging from `left` to [MAX].

    @param left the first character in the list
    @returns a list of characters
    ============================================================================
    @class
    function [..](left:Char):ListView<Char> {
        return Char[left...]
    }

    ============================================================================
    Creates a slice of the chars: a list ranging from `left` (inclusive) to
    `right` (exclusive).

    @param left the first character in the list
    @param right the last character in the list plus one
    @returns a list of characters
    ============================================================================
    @class
    function [..](left:Char, right:Char):ListView<Char> {
        def result := Array<Char>()
        for v:Char in left .. right
            result.add(v)
        return result
    }

    ============================================================================
    Creates a slice of the chars: a list ranging from `left` (inclusive) to
    `right` (exclusive), counting by `step`.

    @param left the first character in the list
    @param right the last character in the list plus one
    @param step the step value
    @returns a list of characters
    ============================================================================
    @class
    function [..](left:Char, right:Char, step:Int16):ListView<Char> {
        def result := Array<Char>()
        for v:Char in left .. right by step
            result.add(v)
        return result
    }

    ============================================================================
    Creates a slice of the chars: a list ranging from `left` to [MAX].

    @param left the first character in the list
    @returns a list of characters
    ============================================================================
    @class 
    function [...](left:Char):ListView<Char> {
        throw NotSupportedException()
    }
    
    ============================================================================
    Creates a slice of the chars: a list ranging from `left` to `right` 
    (inclusive).

    @param left the first character in the list
    @param right the last character in the list
    @returns a list of characters
    ============================================================================
    @class
    function [...](left:Char, right:Char):ListView<Char> {
        var result := Array<Char>()
        for v:Char in left ... right
            result.add(v)
        return result
    }

    ============================================================================
    Creates a slice of the chars: a list ranging from `left` to `right` 
    (inclusive), counting by `step`.

    @param left the first character in the list
    @param right the last character in the list
    @param step the step value
    @returns a list of characters
    ============================================================================
    @class
    function [...](left:Char, right:Char, step:Int16):ListView<Char> {
        def result := Array<Char>()
        for v:Char in left ... right by step
            result.add(v)
        return result
    }

    ============================================================================
    @hidden
    ============================================================================
    init(value:Char) {
        self.value := value
    }

    ============================================================================
    `true` if this is a whitespace character.
    ============================================================================
    property isWhitespace:Bit

    @private
    @external
    @$wrapperMethod
    function get_isWhitespace():Bit

    ============================================================================
    `true` if this is a lowercase character.
    ============================================================================
    property isLowercase:Bit

    @private
    @external
    @$wrapperMethod
    function get_isLowercase():Bit

    ============================================================================
    `true` if this is an uppercase character.
    ============================================================================
    property isUppercase:Bit

    @private
    @external
    @$wrapperMethod
    function get_isUppercase():Bit

    ============================================================================
    `true` if this is a titlecase character.
    ============================================================================
    property isTitlecase:Bit

    @private
    @external
    @$wrapperMethod
    function get_isTitlecase():Bit

    ============================================================================
    Returns the uppercase version of this character (or the unmodified
    character, if it is does not have an uppercase equivalent).

    @returns the uppercased character
    ============================================================================
    @external
    @$wrapperMethod
    function toUppercase():Char

    ============================================================================
    Returns the lowercase version of this character (or the unmodified
    character, if it does not have a lowercase equivalent).

    @returns the lowercased character
    ============================================================================
    @external
    @$wrapperMethod
    function toLowercase():Char

    ============================================================================
    Returns the titlecase version of this character (or the unmodified
    character, if it does not have a titlecase equivalent).

    @returns the titlecased character
    ============================================================================
    @external
    @$wrapperMethod
    function toTitlecase():Char

    ============================================================================
    Returns `true` if this character's Unicode codepoint is less than the
    parameter's codepoint.

    @param c the character to compare against
    @returns `true` if this character is less
    ============================================================================
    @$wrapperMethod
    function <(c:Char):Bit {
        return value < c.value
    }

    ============================================================================
    Returns `true` if this character's Unicode codepoint is greater than the 
    parameter's codepoint.

    @param c the character to compare against
    @returns `true` if this character is greater
    ============================================================================
    @$wrapperMethod
    function >(c:Char):Bit {
        return value > c.value
    }

    ============================================================================
    Returns `true` if this character's Unicode codepoint is less than or equal
    to the parameter's codepoint.

    @param c the character to compare against
    @returns `true` if this character is less than or equal
    ============================================================================
    @$wrapperMethod
    function <=(c:Char):Bit {
        return value <= c.value
    }

    ============================================================================
    Returns `true` if this character's Unicode codepoint is greater than or
    equal to the parameter's codepoint.

    @param c the character to compare against
    @returns `true` if this character is greater than or equal
    ============================================================================
    @$wrapperMethod
    function >=(c:Char):Bit {
        return value > c.value
    }

    ============================================================================
    Returns a string consisting of a number of copies of this character.

    @param n the number of copies
    @returns a string consisting of `n` copies of this character
    ============================================================================
    @$wrapperMethod
    function *(n:Int):String {
        return convert()->String * n
    }
        
    ============================================================================
    Returns a string consisting of a number of copies of the character.

    @param n the number of copies
    @param c the character to copy
    @returns a string consisting of `n` copies of this character
    ============================================================================
    @class
    function *(n:Int, c:Char):String {
        return c.convert()->String * n
    }

    @override
    function =(o:Object):Bit {
        return o-?>CharWrapper & value = o->CharWrapper.value |
                o-?>String & value.convert()->String = o
    }

    @override
    function get_hash():Int {
        return value->Int
    }

    @override
    function convert():Int8 {
        return value.convert()->Int8
    }

    @override
    function convert():UInt8 {
        return value.convert()->UInt8
    }

    @override
    function convert():Int16 {
        return value.convert()->Int16
    }

    @override
    function convert():UInt16 {
        return value.convert()->UInt16
    }

    @override
    function convert():Int32 {
        return value.convert()->Int32
    }

    @override
    function convert():UInt32 {
        return value.convert()->UInt32
    }

    @override
    function convert():Int64 {
        return value.convert()->Int64
    }

    @override
    function convert():UInt64 {
        return value.convert()->UInt64
    }

    ============================================================================
    Returns a single-character string containing this character.

    @returns this character converted to a string
    ============================================================================
    @override
    function convert():String {
        def array := PrimitiveArray<Char>(1)
        array[0] := value
        return String(array)
    }

    @override
    @preOr(fmt = "" | fmt = "panda")
    function format(fmt:String):String {
        if fmt = ""
            return value.convert()
        else
            return value.convert()->String.format(fmt)
    }
}