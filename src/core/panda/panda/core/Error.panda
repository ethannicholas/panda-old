package panda.core

@private
class StackTraceEntry : Value {
    var fileName:String
    var className:String
    var methodName:String
    var line:Int
    
    @override
    function format(fmt:String):String {
        return className + "." + methodName + ":" + line
    }
}

================================================================================
The superclass of all thrown or caught errors. Subclasses of `Error` may be 
thrown via the `throw` statement, and caught at a `catch` block associated with
a `try`.

`Error`'s subclass @link(Exception) is used for potentially recoverable,
non-fatal errors such as files not being found or network errors. It is expected
that `Exception`s may occur even in well-written, correct code. Subclasses of 
`Error` other than `Exception`, however, are reserved for fatal problems which
are never expected in production code, such as assertion failures, division by
zero, or hardware failures. If an `Error` (which is not also an `Exception`) is 
caught, it means that the program can no longer be trusted to be operating 
correctly, and generally should display an error message and exit.
================================================================================
class Error : Value {
    var message:String
    var cause:Error?
    var stack:ImmutableArray<StackTraceEntry>
    
    constructor() {
        constructor("")
    }
    
    constructor(message:String) {
        constructor(message, null)
    }
    
    constructor(message:String, cause:Error?) {
        self.message := message
        self.cause := cause
        stack := getStackTrace()
    }
    
    ============================================================================
    Returns a string containing the `Error`'s class, message, and stack trace.
    ============================================================================
    @override
    function format(fmt:String):String {
        var result := class.name->>(MutableString)
        result.append(":")
        result.append(message)
        for entry in stack {
            result.append("\n    at ")
            result.append(entry)
        }
        return result->>(String)
    }
    
    @protected
    @external
    function getStackTrace():ImmutableArray<StackTraceEntry>
}