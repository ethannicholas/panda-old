package panda.core

class StackTraceEntry : Value {
    def fileName:String
    def className:String
    def methodName:String
    def line:Int
    
    @override
    function ->>():String {
        return className + "." + methodName + ":" + line
    }
}

================================================================================
The superclass of all thrown or caught errors. Subclasses of `Error` may be 
thrown via the `throw` statement, and caught at a `catch` block associated with
a `try`.

`Error`'s subclass [Exception] is used for potentially recoverable, non-fatal 
errors such as files not being found or network errors. It is expected that 
`Exception`s may occur even in well-written, correct code. Subclasses of `Error` 
other than `Exception`, however, are reserved for fatal problems which are never
expected in production code, such as assertion failures, division by zero, or 
hardware failures. If an `Error` (which is not also an `Exception`) is caught, 
it means that the program can no longer be trusted to be operating correctly, 
and generally should display an error message and exit.
================================================================================
class Error : Immutable {
    ============================================================================
    A string describing the error.
    ============================================================================
    def message:String

    ============================================================================
    The stack trace captured when this exception was created.
    ============================================================================
    def stack:ImmutablePrimitiveArray<StackTraceEntry>
    
    ============================================================================
    Creates a new `Error` with an empty message.
    ============================================================================
    constructor() {
        constructor("")
    }
    
    ============================================================================
    Creates a new `Error` with the given message.

    @param message a string describing the error
    ============================================================================
    constructor(message:String) {
        self.message := message
        stack := getStackTrace()
    }
    
    ============================================================================
    Returns a string containing the `Error`'s class, message, and stack trace.

    @param fmt the format string
    @returns a string representation of this object
    ============================================================================
    @override
    function ->>():String {
        var result := new MutableString(class.name)
        result.append(":")
        result.append(message)
        for entry in stack {
            result.append("\n    at ")
            result.append(entry)
        }
        return result->>String
    }
    
    ============================================================================
    @hidden
    ============================================================================
    @private
    @external
    function getStackTrace():ImmutablePrimitiveArray<StackTraceEntry>
}