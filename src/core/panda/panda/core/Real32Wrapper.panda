package panda.core

================================================================================
A 32 bit floating point number, capable of representing numbers in the 
approximate range -3.4 x 10^38 to 3.4 x 10^38 with 6 to 9 decimal digits of
precision.

`Real32`s are created automatically as the result of real literals (numbers 
appearing directly in the source code) and as the result of mathematical 
expressions.
================================================================================
@final
class Real32Wrapper : RealNumber {
    ============================================================================
    The `Real32` value closest to Euler's number, the base of the natural
    logarithm.
    ============================================================================
    constant E:Real32 := 2.7182818284590452354
    
    ============================================================================
    The `Real32` value closest to pi, the ratio of a circle's circumference to 
    its diameter.
    ============================================================================
    constant PI:Real32 := 3.14159265358979323846

    ============================================================================
    @hidden
    ============================================================================
    def value:Real32
    
    ============================================================================
    Creates a slice of the reals: a list ranging from `left` (inclusive) to
    `right` (exclusive), counting by one.

    @param left the first number in the list
    @param right the last number in the list plus one
    @returns a list of numbers
    ============================================================================
    @class
    function [..](left:Real32, right:Real32):ListView<Real32> {
        def result := Array<Real32>()
        for v in left .. right
            result.add(v)
        return result
    }

    ============================================================================
    Creates a slice of the reals: a list ranging from `left` (inclusive) to
    `right` (exclusive), counting by `step`.

    @param left the first number in the list
    @param right the last number in the list plus one
    @param step the step value
    @returns a list of numbers
    ============================================================================
    @class
    function [..](left:Real32, right:Real32, step:Real32):ListView<Real32> {
        def result := Array<Real32>()
        for v in left .. right by step
            result.add(v)
        return result
    }

    ============================================================================
    Creates a slice of the reals: a list ranging from `left` to `right` 
    (inclusive), counting by one.

    @param left the first number in the list
    @param right the last number in the list
    @returns a list of numbers
    ============================================================================
    @class
    function [...](left:Real32, right:Real32):ListView<Real32> {
        def result := Array<Real32>()
        for v in left ... right
            result.add(v)
        return result
    }

    ============================================================================
    Creates a slice of the reals: a list ranging from `left` to `right` 
    (inclusive), counting by `step`.

    @param left the first number in the list
    @param right the last number in the list
    @param step the step value
    @returns a list of numbers
    ============================================================================
    @class
    function [...](left:Real32, right:Real32, step:Real32):ListView<Real32> {
        def result := Array<Real32>()
        for v in left ... right by step
            result.add(v)
        return result
    }

    ============================================================================
    @hidden
    ============================================================================
    init(value:Real32) {
        self.value := value
    }

    -- The operators below are *not actually used* by naive code; i.e. x * y
    -- will never call Real32::* (which is why none of these end up causing
    -- infinite recursion). They are specifically filtered out by 
    -- IRGenerator::callOverloadedOperator, and defined here purely for
    -- convenience so that they can be accessed like "Real32::*".

    ============================================================================
    The addition operator.

    @param x the number to add to this number
    @returns the sum of the two numbers
    ============================================================================
    @$wrapperMethod
    function +(x:Real32):Real32 {
        return self + x
    }

    ============================================================================
    The subtraction operator.

    @param x the number to subtract from this number
    @returns the difference of the two numbers
    ============================================================================
    @$wrapperMethod
    function -(x:Real32):Real32 {
        return self - x
    }

    ============================================================================
    The multiplication operator.

    @param x the number by which to multiply this number
    @returns the product of the two numbers
    ============================================================================
    @$wrapperMethod
    function *(x:Real32):Real32 {
        return self * x
    }

    ============================================================================
    The division operator.

    @param x the number by which to divide this number
    @returns the quotient of the two numbers
    ============================================================================
    @$wrapperMethod
    function /(x:Real32):Real32 {
        return self / x
    }

    ============================================================================
    The exponent operator.

    @param x the power to which to raise this number
    @returns the specified power of this number
    ============================================================================
    @$wrapperMethod
    function ^(x:Real32):Real32 {
        return self ^ x
    }

    ============================================================================
    The greater than operator.

    @param x the number to compare against
    @returns true if this number is greater than `x`
    ============================================================================
    @$wrapperMethod
    function >(x:Real32):Bit {
        return self > x
    }

    ============================================================================
    The greater than or equal to operator.

    @param x the number to compare against
    @returns true if this number is greater than or equal to `x`
    ============================================================================
    @$wrapperMethod
    function >=(x:Real32):Bit {
        return self >= x
    }

    ============================================================================
    The less than operator.

    @param x the number to compare against
    @returns true if this number is less than `x`
    ============================================================================
    @$wrapperMethod
    function <(x:Real32):Bit {
        return self < x
    }

    ============================================================================
    The less than or equal to operator.

    @param x the number to compare against
    @returns true if this number is less than or equal to `x`
    ============================================================================
    @$wrapperMethod
    function <=(x:Real32):Bit {
        return self <= x
    }

    ============================================================================
    Returns the greater (closer to positive infinity) of itself and its 
    parameter.

    @param other the number to compare against
    @returns the maximum of itself and the other number
    ============================================================================
    @$wrapperMethod
    function max(other:Real32):Real32 {
        if self > other
            return self
        else
            return other
    }

    ============================================================================
    Returns the greater (closer to positive infinity) of itself and its 
    parameter.

    @param other the number to compare against
    @returns the maximum of itself and the other number
    ============================================================================
    @$wrapperMethod
    function max(other:Real64):Real64 {
        if self > other
            return self
        else
            return other
    }

    ============================================================================
    Returns the lesser (closer to negative infinity) of itself and its 
    parameter.

    @param other the number to compare against
    @returns the minimum of itself and the other number
    ============================================================================
    @$wrapperMethod
    function min(other:Real32):Real32 {
        if self < other
            return self
        else
            return other
    }

    ============================================================================
    Returns the lesser (closer to negative infinity) of itself and its 
    parameter.

    @param other the number to compare against
    @returns the minimum of itself and the other number
    ============================================================================
    @$wrapperMethod
    function min(other:Real64):Real64 {
        if self < other
            return self
        else
            return other
    }

    ============================================================================
    Returns a number describing the sign of this number. The result is `1` if
    this number is positive, `-1` if it is negative, and `0` if it is zero.

    @returns the sign of this number
    ============================================================================
    property sign:Int

    @$wrapperMethod
    function get_sign():Int {
        if self > 0
            return 1
        else if self < 0
            return -1
        return 0
    }

    ============================================================================
    Returns the absolute value of this number. The absolute value has the same
    magnitude, but is always positive.

    @returns the absolute value of this number
    ============================================================================
    property abs:Real32

    @$wrapperMethod
    function get_abs():Real32 {
        if self < 0
            return -self
        return self
    }

    ============================================================================
    Returns `true` if this number represents positive or negative infinity.

    @returns `true` if this number is infinite
    ============================================================================
    property isInfinite:Bit

    @private
    @external
    @$wrapperMethod
    function get_isInfinite():Bit

    ============================================================================
    Returns `true` if this number represents a `NaN` (Not-A-Number) value.

    @returns `true` if this number is `NaN`
    ============================================================================
    property isNaN:Bit

    @private
    @external
    @$wrapperMethod
    function get_isNaN():Bit

    ============================================================================
    Returns the square root of this number.

    @returns the square root of this number
    ============================================================================
    property sqrt:Real32

    @private
    @external
    @$wrapperMethod
    function get_sqrt():Real32

    ============================================================================
    Returns this number rounded to an integer in the direction of negative
    infinity.

    @returns the floor of this number
    ============================================================================
    property floor:Real32

    @private
    @external
    @$wrapperMethod
    function get_floor():Real32
    
    ============================================================================
    Returns this number rounded to an integer in the direction of positive
    infinity.

    @returns the ceiling of this number
    ============================================================================
    property ceil:Real32

    @private
    @external
    @$wrapperMethod
    function get_ceil():Real32
    
    ============================================================================
    Returns the trigonometric sine of this number.

    @returns the sine of this number
    ============================================================================
    property sin:Real32

    @private
    @external
    @$wrapperMethod
    function get_sin():Real32

    ============================================================================
    Returns the trigonometric cosine of this number.

    @returns the cosine of this number
    ============================================================================
    property cos:Real32

    @external
    @$wrapperMethod
    function get_cos():Real32

    ============================================================================
    Returns the trigonometric tangent of this number.

    @returns the tangent of this number
    ============================================================================
    property tan:Real32

    function get_tan():Real32 {
        return sin / cos
    }

    @protected
    @override
    function convertToString(thousandsSeparator:Char?, minWholeDigits:Int?, 
            minFractionDigits:Int?, maxFractionDigits:Int?, base:Int, 
            baseChars:String):String {
        return convertToString(value, thousandsSeparator, minWholeDigits,
                minFractionDigits, maxFractionDigits, base, baseChars)
    }

    @override
    function =(o:Object):Bit {
        if o-?>Number
            return o->Number.convert()->Real32 = value
        return false
    }
    
    @override
    function get_hash():Int {
        return self.convert()->Int
    }

    ============================================================================
    Converts this number to an `Int8`.

    @returns this number as an `Int8`
    ============================================================================
    @override
    function convert():Int8 {
        return value.convert()->Int8
    }

    ============================================================================
    Converts this number to an `Int16`.

    @returns this number as an `Int16`
    ============================================================================
    @override
    function convert():Int16 {
        return value.convert()->Int16
    }

    ============================================================================
    Converts this number to an `Int32`.

    @returns this number as an `Int32`
    ============================================================================
    @override
    function convert():Int32 {
        return value.convert()->Int32
    }

    ============================================================================
    Converts this number to an `Int64`.

    @returns this number as an `Int64`
    ============================================================================
    @override
    function convert():Int64 {
        return value.convert()->Int64
    }

    ============================================================================
    Converts this number to a `UInt8`.

    @returns this number as a `UInt8`
    ============================================================================
    @override
    function convert():UInt8 {
        return value.convert()->UInt8
    }

    ============================================================================
    Converts this number to a `UInt16`.

    @returns this number as a `UInt16`
    ============================================================================
    @override
    function convert():UInt16 {
        return value.convert()->UInt16
    }

    ============================================================================
    Converts this number to a `UInt32`.

    @returns this number as a `UInt32`
    ============================================================================
    @override
    function convert():UInt32 {
        return value.convert()->UInt32
    }

    ============================================================================
    Converts this number to a `UInt64`.

    @returns this number as a `UInt64`
    ============================================================================
    @override
    function convert():UInt64 {
        return value.convert()->UInt64
    }

    ============================================================================
    Returns this number.

    @returns this number
    ============================================================================
    @override
    function convert():Real32 {
        return value
    }

    ============================================================================
    Converts this number to a `Real64`.

    @returns this number as a `Real64`
    ============================================================================
    @override
    function convert():Real64 {
        return value
    }

    ============================================================================
    Converts this `Real32` into its decimal representation. The resulting string
    will have only as many digits as necessary to uniquely distinguish it from
    adjacent `Real32` values. No decimal point is produced if it is unnecessary
    (the number `123` converts to the string "123", not "123.0"). The values
    `NaN`, negative infinity, and positive infinity result in the strings 
    `"NaN"`, `"-infinity"`, and `"infinity"`, respectively.
    
    @returns a string represention of the number
    ============================================================================
    @override
    function convert():String {
        return pandaReal32ToString(value)
    }

    -- FIXME remove these and move the external code directly to the convert
    -- methods
    @private
    @class
    @external
    function pandaReal32ToString(r:Real32):String
}
