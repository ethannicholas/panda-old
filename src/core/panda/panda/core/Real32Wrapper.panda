package panda.core

================================================================================
A 32 bit floating point number, capable of representing numbers in the 
approximate range -3.4 x 10^38 to 3.4 x 10^38 with 6 to 9 decimal digits of
precision.

`Real32`s are created automatically as the result of real literals (numbers 
appearing directly in the source code) and as the result of mathematical 
expressions.
================================================================================
@static
class Real32Wrapper : RealNumber {
    var value:Real32
    
    @class
    function [..](left:Real32, right:Real32):Array<Real32> {
        def result := new Array<Real32>()
        for v in left .. right
            result.append(v)
        return result
    }

    @class
    function [..](left:Real32, right:Real32, step:Real32):Array<Real32> {
        def result := new Array<Real32>()
        for v in left .. right by step
            result.append(v)
        return result
    }

    @class
    function [...](left:Real32, right:Real32):Array<Real32> {
        def result := new Array<Real32>()
        for v in left ... right
            result.append(v)
        return result
    }

    @class
    function [...](left:Real32, right:Real32, step:Real32):Array<Real32> {
        def result := new Array<Real32>()
        for v in left ... right by step
            result.append(v)
        return result
    }

    constructor(value:Real32) {
        self.value := value
    }

    -- The operators below are *not actually used* by naive code; i.e. x * y
    -- will never call Real32::* (which is why none of these end up causing
    -- infinite recursion). They are specifically filtered out by 
    -- ASTGenerator::callOverloadedOperator, and defined here purely for
    -- convenience so that they can be accessed like "Real32::*".

    @$wrapperMethod
    function +(x:Real32):Real32 {
        return self + x
    }

    @$wrapperMethod
    function -(x:Real32):Real32 {
        return self - x
    }

    @$wrapperMethod
    function *(x:Real32):Real32 {
        return self * x
    }

    @$wrapperMethod
    function /(x:Real32):Real32 {
        return self / x
    }

    @$wrapperMethod
    function ^(x:Real32):Real32 {
        return self ^ x
    }

    @$wrapperMethod
    function >(x:Real32):Bit {
        return self > x
    }

    @$wrapperMethod
    function >=(x:Real32):Bit {
        return self >= x
    }

    @$wrapperMethod
    function <(x:Real32):Bit {
        return self < x
    }

    @$wrapperMethod
    function <=(x:Real32):Bit {
        return self <= x
    }

    @$wrapperMethod
    function =(x:Real32):Bit {
        return self = x
    }

    ============================================================================
    Returns the greater (closer to positive infinity) of itself and its 
    parameter.

    @param other the number to compare against
    @returns the maximum of itself and the other number
    ============================================================================
    @$wrapperMethod
    function max(other:Real32):Real32 {
        if self > other
            return value
        else
            return self
    }

    ============================================================================
    Returns the greater (closer to positive infinity) of itself and its 
    parameter.

    @param other the number to compare against
    @returns the maximum of itself and the other number
    ============================================================================
    @$wrapperMethod
    function max(other:Real64):Real64 {
        if self > other
            return self
        else
            return other
    }

    ============================================================================
    Returns the lesser (closer to negative infinity) of itself and its 
    parameter.

    @param other the number to compare against
    @returns the minimum of itself and the other number
    ============================================================================
    @$wrapperMethod
    function min(other:Real32):Real32 {
        if self < other
            return self
        else
            return other
    }

    ============================================================================
    Returns the lesser (closer to negative infinity) of itself and its 
    parameter.

    @param other the number to compare against
    @returns the minimum of itself and the other number
    ============================================================================
    @$wrapperMethod
    function min(other:Real64):Real64 {
        if self < other
            return self
        else
            return other
    }

    @$wrapperMethod
    function sign():Int {
        if self > 0
            return 1
        else if self < 0
            return -1
        return 0
    }

    @$wrapperMethod
    function abs():Real32 {
        if self < 0
            return -self
        return self
    }

    @external
    @$wrapperMethod
    function isInfinite():Bit

    @external
    @$wrapperMethod
    function isNaN():Bit

    @external
    @$wrapperMethod
    function sqrt():Real32
    
    @external
    @$wrapperMethod
    function sin():Real32

    @external
    @$wrapperMethod
    function cos():Real32

    function tan():Real32 {
        return sin / cos
    }

    @protected
    @override
    function convertToString(thousandsSeparator:Char?):String {
        return convertToString(value, thousandsSeparator)
    }

    @override
    function =(o:Object):Bit {
        if o-?>(Number)
            return o->(Number)->>(Real32) = value
        return false
    }
        
    @override
    function ->>():Int8 {
        return value->>(Int8)
    }

    @override
    function ->>():Int16 {
        return value->>(Int16)
    }

    @override
    function ->>():Int32 {
        return value->>(Int32)
    }

    @override
    function ->>():Int64 {
        return value->>(Int64)
    }

    @override
    function ->>():UInt8 {
        return value->>(UInt8)
    }

    @override
    function ->>():UInt16 {
        return value->>(UInt16)
    }

    @override
    function ->>():UInt32 {
        return value->>(UInt32)
    }

    @override
    function ->>():UInt64 {
        return value->>(UInt64)
    }

    @override
    function ->>():Real32 {
        return value
    }

    @override
    function ->>():Real64 {
        return value
    }

}