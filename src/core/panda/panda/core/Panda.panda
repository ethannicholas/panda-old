package panda.core

================================================================================
Contains internal methods used in the implementation of various language
features, as well as a few utility methods.

@hidden
================================================================================
@final
class Panda {
    @class
    function FIXME_TEMP_convertArray(a:PrimitiveArray<String>):ListView<String> {
        def result := Array<String>()
        for v in a
            result.add(v)
        return result
    }

    @class 
    @external 
    method currentTime():Int64

    -- The various pow functions implement the '^' operator --
    
    @class 
    function pow(var a:Int32, var b:UInt32):Int32 {
        var result:Int32 := 1
        loop {
            if b % 2 = 1
                result *= a
            b //= 2
            if b = 0
                break
            a *= a
        }
        return result
    }

    @class 
    function pow(var a:Int64, var b:UInt32):Int64 {
        var result:Int64 := 1
        loop {
            if b % 2 = 1
                result *= a
            b //= 2
            if b = 0
                break
            a *= a
        }
        return result
    }
    
    @class 
    function pow(var a:UInt32, var b:UInt32):UInt32 {
        var result:UInt32 := 1
        loop {
            if b % 2 = 1
                result *= a
            b //= 2
            if b = 0
                break
            a *= a
        }
        return result
    }

    @class 
    function pow(var a:UInt64, var b:UInt64):UInt64 {
        var result:UInt64 := 1
        loop {
            if b % 2 = 1
                result *= a
            b //= 2
            if b = 0
                break
            a *= a
        }
        return result
    }

    @class
    @external
    function pow(a:Real32, b:Int32):Real32

    @class
    @external
    function pow(a:Real32, b:Real32):Real32

    @class
    @external
    function pow(a:Real64, b:Int32):Real64

    @class
    @external
    function pow(a:Real64, b:Real64):Real64
    
    -- helper function for equality
    
    @class
    method nullableEquals(o1:Object?, o2:Object?):Bit {
        if o1 == null
            return o2 == null
        if o2 == null
            return false
        return o1->Object = o2->Object
    }
      
    @class
    function id(o:Object):String {
        return o.class.name + "<" + o.hash + ">"
    }

    @class
    method dumpStack() {
        Console.writeLine(AssertionError("stack trace"))
    }

    @class
    @unsafeFunction
    method log(o:Object) {
        Console.writeLine(o)
    }

    -- debug writes which bypass String, OutputStream, etc. --

    @class
    @external
    method debugWrite(i:Int32)
    
    @class
    @external
    method debugWrite(o:Object)

    @class  
    @external
    method debugWritePointer(o:Object)

    -- implementations of the -?> operator for primitive types --

    -- Int8 --

    @class
    function instanceOfInt8(i:Int64):Bit {
        return i >= Int8.MIN & i <= Int8.MAX
    }

    @class
    function instanceOfInt8(i:UInt64):Bit {
        return i <= Int8.MAX->UInt64
    }

    @class
    function instanceOfInt8(o:Object?, nullable:Bit):Bit {
        if o == null
            return nullable
        else if o-?>SignedInteger
            return instanceOfInt8(o->Number.convert()->Int64)
        else if o-?>UnsignedInteger
            return instanceOfInt8(o->Number.convert()->UInt64)
        else
            return false
    }

    -- Int16 --

    @class
    function instanceOfInt16(i:Int64):Bit {
        return i >= Int16.MIN & i <= Int16.MAX
    }

    @class
    function instanceOfInt16(i:UInt64):Bit {
        return i <= Int16.MAX->UInt64
    }

    @class
    function instanceOfInt16(o:Object?, nullable:Bit):Bit {
        if o == null
            return nullable
        else if o-?>SignedInteger
            return instanceOfInt16(o->Number.convert()->Int64)
        else if o-?>UnsignedInteger
            return instanceOfInt16(o->Number.convert()->UInt64)
        else
            return false
    }

    -- Int32 --

    @class
    function instanceOfInt32(i:Int64):Bit {
        return i >= Int32.MIN & i <= Int32.MAX
    }

    @class
    function instanceOfInt32(i:UInt64):Bit {
        return i <= Int32.MAX->UInt64
    }

    @class
    function instanceOfInt32(o:Object?, nullable:Bit):Bit {
        if o == null
            return nullable
        else if o-?>SignedInteger
            return instanceOfInt32(o->Number.convert()->Int64)
        else if o-?>UnsignedInteger
            return instanceOfInt32(o->Number.convert()->UInt64)
        else
            return false
    }

    -- Int64 --

    @class
    function instanceOfInt64(i:Int64):Bit {
        return true
    }

    @class
    function instanceOfInt64(i:UInt64):Bit {
        return i <= Int64.MAX->UInt64
    }

    @class
    function instanceOfInt64(o:Object?, nullable:Bit):Bit {
        if o == null
            return nullable
        else if o-?>SignedInteger
            return true
        else if o-?>UnsignedInteger
            return instanceOfInt64(o->Number.convert()->UInt64)
        else
            return false
    }

    -- UInt8 --

    @class
    function instanceOfUInt8(i:Int64):Bit {
        return i >= UInt8.MIN & i <= UInt8.MAX
    }

    @class
    function instanceOfUInt8(i:UInt64):Bit {
        return i <= UInt8.MAX
    }

    @class
    function instanceOfUInt8(o:Object?, nullable:Bit):Bit {
        if o == null
            return nullable
        else if o-?>SignedInteger
            return instanceOfUInt8(o->Number.convert()->Int64)
        else if o-?>UnsignedInteger
            return instanceOfUInt8(o->Number.convert()->UInt64)
        else
            return false
    }

    -- UInt16 --

    @class
    function instanceOfUInt16(i:Int64):Bit {
        return i >= UInt16.MIN & i <= UInt16.MAX
    }

    @class
    function instanceOfUInt16(i:UInt64):Bit {
        return i <= UInt16.MAX
    }

    @class
    function instanceOfUInt16(o:Object?, nullable:Bit):Bit {
        if o == null
            return nullable
        else if o-?>SignedInteger
            return instanceOfUInt16(o->Number.convert()->Int64)
        else if o-?>UnsignedInteger
            return instanceOfUInt16(o->Number.convert()->UInt64)
        else
            return false
    }

    -- UInt32 --

    @class
    function instanceOfUInt32(i:Int64):Bit {
        return i >= UInt32.MIN & i <= UInt32.MAX
    }

    @class
    function instanceOfUInt32(i:UInt64):Bit {
        return i <= UInt32.MAX
    }

    @class
    function instanceOfUInt32(o:Object?, nullable:Bit):Bit {
        if o == null
            return nullable
        else if o-?>SignedInteger
            return instanceOfUInt32(o->Number.convert()->Int64)
        else if o-?>UnsignedInteger
            return instanceOfUInt32(o->Number.convert()->UInt64)
        else
            return false
    }

    -- UInt64 --

    @class
    function instanceOfUInt64(i:Int64):Bit {
        return i >= 0
    }

    @class
    function instanceOfUInt64(i:UInt64):Bit {
        return true
    }

    @class
    function instanceOfUInt64(o:Object?, nullable:Bit):Bit {
        if o == null
            return nullable
        else if o-?>SignedInteger
            return instanceOfUInt64(o->Number.convert()->Int64)
        else if o-?>UnsignedInteger
            return true
        else
            return false
    }

    -- Real32 --

    @class
    function instanceOfReal32(o:Object?, nullable:Bit):Bit {
        if o == null
            return nullable
        else
            return o-?>Number
    }
    
    -- Real64 --

    @class
    function instanceOfReal64(o:Object?, nullable:Bit):Bit {
        if o == null
            return nullable
        else
            return o-?>Number
    }
    
    -- Bit --

    @class
    function instanceOfBit(b:Bit):Bit {
        return true
    }

    @class
    function instanceOfBit(o:Object?, nullable:Bit):Bit {
        if o == null
            return nullable
        else
            return o.class = BitWrapper
    }

    -- Char --

    @class
    function instanceOfChar(i:Int64):Bit {
        return i >= Char.MIN->Int64 & i <= Char.MAX->Int64
    }

    @class
    function instanceOfChar(i:UInt64):Bit {
        return i >= Char.MIN->UInt64 & i <= Char.MAX->UInt64
    }

    @class
    function instanceOfChar(c:Char):Bit {
        return true
    }

    @class
    function instanceOfChar(o:Object?, nullable:Bit):Bit {
        if o = null
            return nullable
        else if o-?>SignedInteger
            return instanceOfChar(o->Number.convert()->Int64)
        else if o-?>UnsignedInteger
            return instanceOfChar(o->Number.convert()->UInt64)
        else
            return o.class = CharWrapper
    }
    
    @class
    method checkCast(o:Object?, c:Class, nullable:Bit) {
        if !instanceOf(o, c, nullable) {
            if o = null
                throw CastError("null is not an instance of \{c.name}")
            else
                throw CastError("\{o.class.name} is not an instance of " + 
                        c.name)
        }
    }

    @private
    @class
    @limited
    method swap(a:PrimitiveArray<Object>, i1:Int, i2:Int) {
        def tmp := a[i1]
        a[i1] := a[i2]
        a[i2] := tmp
    }

    @private
    @class
    @limited
    method sort(a:PrimitiveArray<Object>, left:Int, right:Int, 
            greater:(Object, Object)=>(Bit)) {
        if left >= right
            return
        def pivotIndex := left + (right - left) // 2
        def pivot := a[pivotIndex]
        swap(a, right, pivotIndex)
        var storeIndex := left
        for i in left ... right - 1 {
            if !greater(a[i], pivot) {
                swap(a, i, storeIndex)
                storeIndex += 1
            }
        }
        swap(a, storeIndex, right)
        sort(a, left, storeIndex - 1, greater)
        sort(a, storeIndex + 1, right, greater)
    }

    ============================================================================
    Quick and dirty naive quicksort, until generics are done and ListView can be 
    sorted natively.
    ============================================================================
    @class
    @limited
    method sort(a:PrimitiveArray<Object>, greater:(Object, Object)=>(Bit)) {
        sort(a, 0, a.length() - 1, greater)
    }

    -- FIXME PERFORMANCE: handling of thread locals is currently terrible.
    -- Was originally using pthread_setspecific (which was in itself a quick and
    -- dirty hack), but found out that didn't work with the Boehm GC. This is a 
    -- quick and *very* dirty hack to get it working with minimal pain elsewhere
    -- in Panda.
    
    -- for all of the getThreadLocals, initializer is a function pointer to the
    -- initialization function. FIXME: replace with first-class functions when
    -- those are done.

    -- God, this needs a rewrite. This code is positively ancient -- some of the
    -- oldest completely unmodified code remaining in the codebase -- from 
    -- before I had the features to do this right, and it was an ugly hack to 
    -- begin with. Kill it with fire.
    @class
    method getThreadLocalBit(index:Int, initializer:()=>(Bit)):Bit {
        var threadLocals := getThreadLocals(Thread.currentThread())
        if threadLocals[-index] = null {
            var result := initializer()
            threadLocals[index] := result
            threadLocals[-index] := true
            return result
        }
        return threadLocals[index]->Bit 
    }
    
    @class
    method getThreadLocalInt8(index:Int, initializer:$NativePointer):Int8 {
        var threadLocals := getThreadLocals(Thread.currentThread())
        if threadLocals[-index] = null {
            var result:Int8
            if initializer != null
                result := callInt8Function(initializer)
            else
                result := 0
            threadLocals[index] := result
            threadLocals[-index] := true
            return result
        }
        return threadLocals[index]->Int8
    }
    
    @class
    method getThreadLocalInt16(index:Int, 
            initializer:$NativePointer):Int16 {
        var threadLocals := getThreadLocals(Thread.currentThread())
        if threadLocals[-index] = null {
            var result:Int16
            if initializer != null
                result := callInt16Function(initializer)
            else
                result := 0
            threadLocals[index] := result
            threadLocals[-index] := true
            return result
        }
        return threadLocals[index]->Int16
    }
    
    @class
    method getThreadLocalInt32(index:Int, 
            initializer:$NativePointer):Int32 {
        var threadLocals := getThreadLocals(Thread.currentThread())
        if threadLocals[-index] = null {
            var result:Int32
            if initializer != null
                result := callInt32Function(initializer)
            else
                result := 0
            threadLocals[index] := result
            threadLocals[-index] := true
            return result
        }
        return threadLocals[index]->Int32
    }
    
    @class
    method getThreadLocalInt64(index:Int, 
            initializer:$NativePointer):Int64 {
        var threadLocals := getThreadLocals(Thread.currentThread())
        if threadLocals[-index] = null {
            var result:Int64
            if initializer != null
                result := callInt64Function(initializer)
            else
                result := 0
            threadLocals[index] := result
            threadLocals[-index] := true
            return result
        }
        return threadLocals[index]->Int64
    }
    
    @class
    method getThreadLocalChar(index:Int, initializer:$NativePointer):Char {
        var threadLocals := getThreadLocals(Thread.currentThread())
        if threadLocals[-index] = null {
            var result:Char
            if initializer != null
                result := callCharFunction(initializer)
            else
                result := 0->Char 
            threadLocals[index] := result
            threadLocals[-index] := true
            return result
        }
        return threadLocals[index]->Char 
    }
    
    @class
    method getThreadLocalReal32(index:Int, 
            initializer:$NativePointer):Real32 {
        var threadLocals := getThreadLocals(Thread.currentThread())
        if threadLocals[-index] = null {
            var result:Real32
            if initializer != null
                result := callReal32Function(initializer)
            else
                result := 0
            threadLocals[index] := result
            threadLocals[-index] := true
            return result
        }
        return threadLocals[index]->Real32 
    }
    
    @class
    method getThreadLocalReal64(index:Int, 
            initializer:$NativePointer):Real64 {
        var threadLocals := getThreadLocals(Thread.currentThread())
        if threadLocals[-index] = null {
            var result:Real64
            if initializer != null
                result := callReal64Function(initializer)
            else
                result := 0
            threadLocals[index] := result
            threadLocals[-index] := true
            return result
        }
        return threadLocals[index]->Real64
    }
    
    @class
    method getThreadLocalObject(index:Int, 
            initializer:$NativePointer):Object? {
        def threadLocals := getThreadLocals(Thread.currentThread())
        if threadLocals[-index] = null {
            def result:Object?
            if initializer != null
                result := callObjectFunction(initializer)
            else
                result := null
            threadLocals[index] := result
            threadLocals[-index] := true
            return result
        }
        return threadLocals[index]
    }

    @class
    method setThreadLocalBit(index:Int, value:Bit) {
        var threadLocals := getThreadLocals(Thread.currentThread())
        threadLocals[index] := value
        threadLocals[-index] := true
    }
    
    @class
    method setThreadLocalInt8(index:Int, value:Int8) {
        var threadLocals := getThreadLocals(Thread.currentThread())
        threadLocals[index] := value
        threadLocals[-index] := true
    }

    @class
    method setThreadLocalInt16(index:Int, value:Int16) {
        var threadLocals := getThreadLocals(Thread.currentThread())
        threadLocals[index] := value
        threadLocals[-index] := true
    }

    @class
    method setThreadLocalInt32(index:Int, value:Int32) {
        var threadLocals := getThreadLocals(Thread.currentThread())
        threadLocals[index] := value
        threadLocals[-index] := true
    }

    @class
    method setThreadLocalInt64(index:Int, value:Int64) {
        var threadLocals := getThreadLocals(Thread.currentThread())
        threadLocals[index] := value
        threadLocals[-index] := true
    }

    @class
    method setThreadLocalChar(index:Int, value:Char) {
        var threadLocals := getThreadLocals(Thread.currentThread())
        threadLocals[index] := value
        threadLocals[-index] := true
    }

    @class
    method setThreadLocalReal32(index:Int, value:Real32) {
        var threadLocals := getThreadLocals(Thread.currentThread())
        threadLocals[index] := value
        threadLocals[-index] := true
    }

    @class
    method setThreadLocalReal64(index:Int, value:Real64) {
        var threadLocals := getThreadLocals(Thread.currentThread())
        threadLocals[index] := value
        threadLocals[-index] := true
    }

    @class
    method setThreadLocalObject(index:Int, value:Object?) {
        var threadLocals := getThreadLocals(Thread.currentThread())
        threadLocals[index] := value
        threadLocals[-index] := true
    }

    @class
    method failAssert(message:String?) {
        if message != null
            throw AssertionError(message)
        else
            throw AssertionError("assertion error")
    }

    @class
    @external
    method debugAllocations()

    @class
    @external
    method allocThreadLocal():Int32

    @class
    @external
    method getThreadLocals(t:Thread):HashMap<Int, Object?>
 
    @class 
    @external 
    function instanceOf(o:Object?, c:Class, nullable:Bit):Bit

    @class 
    @external 
    method real32Bits(r:Real32):Int32

    @class 
    @external 
    method real64Bits(r:Real64):Int64
    
    @class
    @external
    method callBitFunction(f:$NativePointer):Bit
    
    @class
    @external
    method callInt8Function(f:$NativePointer):Int8
    
    @class
    @external
    method callInt16Function(f:$NativePointer):Int16
    
    @class
    @external
    method callInt32Function(f:$NativePointer):Int32
    
    @class
    @external
    method callInt64Function(f:$NativePointer):Int64
    
    @class
    @external
    method callCharFunction(f:$NativePointer):Char
    
    @class
    @external
    method callReal32Function(f:$NativePointer):Real32
    
    @class
    @external
    method callReal64Function(f:$NativePointer):Real64
    
    @class
    @external
    method callObjectFunction(f:$NativePointer):Object?
}