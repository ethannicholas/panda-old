package panda.core

================================================================================
Abstract superclass of all number types. Numbers are treated specially by the
compiler: they may be created by integer or real literals such as `531` or
`67.5`, and for performance reasons they are generally handled as primitive CPU 
numbers rather than full object instances. 

This is generally just an implementation detail, as you may call methods on 
`Number`s, add them to collections, and otherwise treat them as full-fledged 
objects. However, there is one major way in which numbers behave differently 
from other objects: the instance of (`-?>`) and not instance of (`-!>`) 
operators check to see if they fit within the specified range, and thus a number
may appear to be an instance of multiple classes at the same time. An integer is
an instance of any integer type which can represent it, and also both `Real` 
classes, and all reals are instances of both `Real` classes. 

Note that:

* a `Real` will never claim to be an integer even if it has a fractional
  part of zero 
* All numbers claim to be an instance of both `Real32` and `Real64`, even if 
  they must be represented by an approximation or an infinity
================================================================================
@abstract
class Number : Primitive {
    @private
    constant FORMAT_PATTERN := 
            #/(\+?)(,?)(?:(\d*)(?:\.(\d+)(?:\.\.\.(\d+))?)?)?([bBoOdDhH]?)/#

    ============================================================================
    @hidden
    ============================================================================
    @abstract
    function convertToString(thousandsSeparator:Char?, minWholeDigits:Int?, 
            minFractionDigits:Int?, maxFractionDigits:Int?, base:Int, 
            baseChars:String):String

    ============================================================================
    @hidden
    ============================================================================
    @protected
    @class 
    function convertToString(var value:Int64, thousandsSeparator:Char?,
            var minWholeDigits:Int?, minFractionDigits:Int?, 
            maxFractionDigits:Int?, base:Int, baseChars:String):String {
        constant MAX := 65
        def result := new Array<Char>(MAX)
        var index := MAX - 1
        var digitCount := 0
        var totalDigits := 0
        if value >= 0 {
            do {
                if thousandsSeparator != null & digitCount = 3 {
                    result[index] := thousandsSeparator
                    index -= 1
                    digitCount := 0
                }
                result[index] := baseChars[(value % base)->>(Int)]
                value //= base
                index -= 1
                digitCount += 1
                totalDigits += 1
            } 
            while value > 0
            if minWholeDigits != null {
                minWholeDigits -= totalDigits
                while minWholeDigits > 0 {
                    if thousandsSeparator != null & digitCount = 3 {
                        result[index] := thousandsSeparator
                        index -= 1
                        digitCount := 0
                    }
                    result[index] := "0"
                    index -= 1
                    minWholeDigits -= 1
                    digitCount += 1
                }
            }
            index += 1
        }
        else {
            do {
                if thousandsSeparator != null & digitCount = 3 {
                    result[index] := thousandsSeparator
                    index -= 1
                    digitCount := 0
                }
                result[index] := baseChars[(-value % base)->>(Int)]
                value //= base
                index -= 1
                digitCount += 1
                totalDigits += 1
            } 
            while value < 0
            if minWholeDigits != null {
                minWholeDigits -= totalDigits
                while minWholeDigits > 0 {
                    if thousandsSeparator != null & digitCount = 3 {
                        result[index] := thousandsSeparator
                        index -= 1
                        digitCount := 0
                    }
                    result[index] := "0"
                    index -= 1
                    minWholeDigits -= 1
                    digitCount += 1
                }
            }
            result[index] := "-"
        }
        if minFractionDigits != null
            return new String(result[index..]) + "." + ("0" * minFractionDigits)
        return new String(result[index..])
    }

    ============================================================================
    @hidden
    ============================================================================
    @protected
    @class 
    function convertToString(var value:UInt64, thousandsSeparator:Char?, 
            var minWholeDigits:Int?, minFractionDigits:Int?, 
            maxFractionDigits:Int?, base:Int, baseChars:String):String {
        constant MAX := 65
        def result := new Array<Char>(MAX)
        var index := MAX - 1
        var digitCount := 0
        var totalDigits := 0
        do {
            if thousandsSeparator != null & digitCount = 3 {
                result[index] := thousandsSeparator
                index -= 1
                digitCount := 0
            }
            result[index] := baseChars[(value % base->(UInt64))->>(Int)]
            value //= base->(UInt64)
            index -= 1
            digitCount += 1
            totalDigits += 1
        } 
        while value > 0
        if minWholeDigits != null {
            minWholeDigits -= totalDigits
            while minWholeDigits > 0 {
                if thousandsSeparator != null & digitCount = 3 {
                    result[index] := thousandsSeparator
                    index -= 1
                    digitCount := 0
                }
                result[index] := "0"
                index -= 1
                minWholeDigits -= 1
                digitCount += 1
            }
        }
        if minFractionDigits != null {
            return new String(result[index + 1..]) + "." + 
                    ("0" * minFractionDigits)
        }
        return new String(result[index + 1..])
    }

    ============================================================================
    @hidden
    ============================================================================
    @protected
    @class
    -- FIXME PERFORMANCE: obviously postprocessing the string is way less 
    -- efficient than doing the conversion correctly to begin with, but we're
    -- currently using three different native converters, at least one of which
    -- does not appear to support the options we need, and this is way quicker
    -- and easier to get working
    function convertToString(value:Real64, thousandsSeparator:Char?,
            minWholeDigits:Int?, minFractionDigits:Int?, maxFractionDigits:Int?, 
            base:Int, baseChars:String):String {
        if base != 10 {
            return convertToString(value->>(Int64), thousandsSeparator,
                    minWholeDigits, minFractionDigits, maxFractionDigits, base,
                    baseChars)
        }
        var raw := value.abs->>(String)
        if thousandsSeparator != null | minFractionDigits != null | 
                maxFractionDigits != null {
            var dot := raw.indexOf(".")
            var wholeDigits:Int
            if dot != null
                wholeDigits := dot
            else
                wholeDigits := raw.length
            var result := new MutableString()
            if minWholeDigits != null & wholeDigits < minWholeDigits {
                def zeroes := (minWholeDigits - wholeDigits)
                raw := "0" * zeroes + raw
                wholeDigits := minWholeDigits
                if dot != null
                    dot += zeroes
            }
            if thousandsSeparator != null {
                var digit := wholeDigits % 3
                if digit = 0
                    digit := 3
                for i in 0 .. wholeDigits {
                    if digit = 0 {
                        result.append(",")
                        digit := 3
                    }
                    digit -= 1
                    result.append(raw[i])
                }
            }
            else
                result.append(raw[..dot])
            def currentFractionDigits:Int
            if dot = null
                currentFractionDigits := 0
            else
                currentFractionDigits := raw.length - dot - 1
            if maxFractionDigits != null &
                    currentFractionDigits > maxFractionDigits {
                assert dot != null
                if maxFractionDigits > 0 {
                    result.append(raw[dot ... dot + maxFractionDigits - 1])
                    Panda.log("rounding! \{result}")
                    if raw[dot + maxFractionDigits + 1] >= "5"
                        result.append("1234567890"[raw[dot + maxFractionDigits]->(Int) - 48])
                    else
                        result.append(raw[dot + maxFractionDigits])
                    Panda.log("rounded to \{result} based on \{raw[dot + maxFractionDigits + 1]}")
                }
            }
            else {
                if minFractionDigits != null & minFractionDigits != 0 & 
                        dot = null
                    result.append(".")
                result.append(raw[wholeDigits..])
                if minFractionDigits != null & 
                        currentFractionDigits < minFractionDigits
                    result.append("0" * (minFractionDigits - 
                            currentFractionDigits))
            }
            if value < 0
                result.insert(0, "-")
            return result->>(String)
        }
        return raw
    }
    
    ============================================================================
    Formats the number for display according to the provided format string. The
    format string is of the form:

        [+][,][<minWholeDigits>][.<fractionDigits>[...<maxFractionDigits]][<base>]

    A leading `"+"` causes positive numbers to include a plus sign.

    A `","` causes the whole number portion to be separated into groups of three
    digits, by the appropriate group separation character for the current locale
    (e.g. commas in the USA).

    `minWholeDigits` is the minimum number of digits to display for the whole
    number portion of the number. Zeroes are used to pad the number to the
    appropriate number of digits. If `minWholeDigits` is not specified, it 
    defaults to `1`.

    `fractionDigits` is the minimum number of fraction digits to display, with
    zeroes being used to pad to the appropriate number of digits. If
    `maxFractionDigits` is not specified, `fractionDigits` is both the minimum
    and maximum number of digits to display.

    `maxFractionDigits` is the maximum number of fraction digits to display.

    If neither `fractionDigits` nor `maxFractionDigits` is specified, the number
    will include enough fraction digits to uniquely distinguish it from adjacent
    floating-point values.

    `base` is either `"b"` (binary), `"o"` (octal), `"d"` (decimal), or `"h"`
    (hexadecimal). Uppercase base specifiers are permitted as well. For 
    hexadecimal numbers, a lowercase `"h"` will yield lowercase hexadecimal
    digits and an uppercase `"H"` will yield uppercase hexadecimal digits. The
    default base is decimal. It is an error to specify any base but decimal for
    `Real` numbers or when thousands separators are enabled.

    As all components are optional, the empty format string (`""`) is legal and
    yields the same result as `number->>(String)`.

    @param fmt the format string
    @returns the formatted number
    ============================================================================
    @override
    @preOr(true)
    function format(var fmt:String):String {
        if fmt = "panda"
            fmt := ""
        def params := fmt.parse(FORMAT_PATTERN)
        if params = null
            throw new ParameterError("invalid format string: " + fmt)

        def thousandsSeparator:Char?
        if params[1] = ","
            thousandsSeparator := ","
        else
            thousandsSeparator := null

        def minWholeDigits:Int?
        if params[2] != ""
            minWholeDigits := params[2]->>(Int)
        else
            minWholeDigits := null

        def minFractionDigits:Int?
        if params[3] != ""
            minFractionDigits := params[3]->>(Int)
        else
            minFractionDigits := null

        def maxFractionDigits:Int?
        if params[4] != ""
            maxFractionDigits := params[4]->>(Int)
        else
            maxFractionDigits := minFractionDigits

        def base:Int
        def baseChars:String
        switch params[5] {
            case "", "d", "D": {
                base := 10
                baseChars := "0123456789"
            }
            case "b", "B": {
                base := 2
                baseChars := "01"
            }
            case "o", "O": {
                base := 8
                baseChars := "01234567"
            }
            case "h": {
                base := 16
                baseChars := "0123456789abcdef"
            }
            case "H": {
                base := 16
                baseChars := "0123456789ABCDEF"
            }
            default:
                unreachable
        }
        if base != 10 {
            if thousandsSeparator != null {
                throw new ParameterError("thousands separator may " +
                        "not be used with non-decimal bases")
            }
            if minFractionDigits != null & minFractionDigits != 0 {
                throw new ParameterError("fraction digits may not be " +
                        "used with non-decimal bases")
            }
        }

        var result := convertToString(thousandsSeparator, minWholeDigits, 
                minFractionDigits, maxFractionDigits, base, baseChars)
        if params[0] = "+" & !result.startsWith("-")
            result := "+" + result
        return result
    }

    ============================================================================
    Converts this number to an `Int8`.

    @returns this number converted to an `Int8`.
    ============================================================================
    @abstract
    function ->>():Int8
    
    ============================================================================
    Converts this number to an `Int16`.

    @returns this number converted to an `Int16`.
    ============================================================================
    @abstract
    function ->>():Int16
    
    ============================================================================
    Converts this number to an `Int32`.

    @returns this number converted to an `Int32`.
    ============================================================================
    @abstract
    function ->>():Int32
    
    ============================================================================
    Converts this number to an `Int64`.

    @returns this number converted to an `Int64`.
    ============================================================================
    @abstract
    function ->>():Int64

    ============================================================================
    Converts this number to a `UInt8`.

    @returns this number converted to a `UInt8`.
    ============================================================================
    @abstract
    function ->>():UInt8
    
    ============================================================================
    Converts this number to a `UInt16`.

    @returns this number converted to a `UInt16`.
    ============================================================================
    @abstract
    function ->>():UInt16
    
    ============================================================================
    Converts this number to a `UInt32`.

    @returns this number converted to a `UInt32`.
    ============================================================================
    @abstract
    function ->>():UInt32
    
    ============================================================================
    Converts this number to a `UInt64`.

    @returns this number converted to a `UInt64`.
    ============================================================================
    @abstract
    function ->>():UInt64

    ============================================================================
    Converts this number to a `Real32`.

    @returns this number converted to a `Real32`.
    ============================================================================
    @abstract
    function ->>():Real32
    
    ============================================================================
    Converts this number to a `Real64`.

    @returns this number converted to a `Real64`.
    ============================================================================
    @abstract
    function ->>():Real64

    @override
    function hash():Int32 {
        return self->>(Int32)
    }
}