package panda.core

================================================================================
A 32 bit unsigned integer, capable of representing numbers in the range 0 to 
4,294,967,295.

`UInt32`s are created automatically as the result of integer literals (numbers 
appearing directly in the source code) and as the result of mathematical 
expressions.
================================================================================
@static
class UInt32Wrapper : UnsignedInteger {
    ============================================================================
    The minimum value representable by a `UInt32`.
    ============================================================================
    constant MIN:UInt32 := 0
    
    ============================================================================
    The maximum value representable by a `UInt32`.
    ============================================================================
    constant MAX:UInt32 := 4294967295

    ============================================================================
    The number of bits in a `UInt32`.
    ============================================================================
    constant BITS := 32

    ============================================================================
    @hidden
    ============================================================================
    def value:UInt32
    
    ============================================================================
    Creates a slice of the integers: an array ranging from `left` (inclusive) to
    `right` (exclusive).
    ============================================================================
    @class
    function [..](left:UInt32, right:UInt32):Array<UInt32> {
        def result := new Array<UInt32>()
        for v:UInt32 in left .. right
            result.append(v)
        return result
    }

    ============================================================================
    Creates a slice of the integers: an array ranging from `left` (inclusive) to
    `right` (exclusive), counting by `step`.
    ============================================================================
    @class
    function [..](left:UInt32, right:UInt32, step:Int32):Array<UInt32> {
        def result := new Array<UInt32>()
        for v:Int64 in left .. right by step
            result.append(v->(UInt32))
        return result
    }

    @class 
    function [...](left:UInt32):Array<UInt32> {
        throw new UnimplementedException()
    }
    
    ============================================================================
    Creates a slice of the integers: an array ranging from `left` to `right` 
    (inclusive).
    ============================================================================
    @class
    function [...](left:UInt32, right:UInt32):Array<UInt32> {
        var result := new Array<UInt32>()
        for v:UInt32 in left ... right
            result.append(v)
        return result
    }

    ============================================================================
    Creates a slice of the integers: an array ranging from `left` to `right` 
    (inclusive), counting by `step`.
    ============================================================================
    @class
    function [...](left:UInt32, right:UInt32, step:Int32):Array<UInt32> {
        def result := new Array<UInt32>()
        for v:Int64 in left ... right by step
            result.append(v->(UInt32))
        return result
    }

    constructor(value:UInt32) {
        self.value := value
    }
        
    -- The operators below are *not actually used* by naive code; i.e. x * y
    -- will never call UInt32::* (which is why none of these end up causing
    -- infinite recursion). They are specifically filtered out by 
    -- ASTGenerator::callOverloadedOperator, and defined here purely for
    -- convenience so that they can be accessed like "UInt32::*".

    @class
    function +(x:UInt32, y:UInt32):UInt32 {
        return x + y
    }

    @class
    function -(x:UInt32, y:UInt32):UInt32 {
        return x - y
    }

    @class
    function *(x:UInt32, y:UInt32):UInt32 {
        return x * y
    }

    @class
    function /(x:UInt32, y:UInt32):Real32 {
        return x / y
    }

    @class
    function //(x:UInt32, y:UInt32):UInt32 {
        return x // y
    }

    @class
    function ^(x:UInt32, y:UInt32):UInt32 {
        return x ^ y
    }

    @class
    function ^(x:UInt32, y:Real32):Real32 {
        return x ^ y
    }

    @class
    function ||(x:UInt32, y:UInt32):UInt32 {
        return x || y
    }

    @class
    function &&(x:UInt32, y:UInt32):UInt32 {
        return x && y
    }

    @class
    function ~~(x:UInt32, y:UInt32):UInt32 {
        return x ~~ y
    }

    @class
    function !!(x:UInt32):UInt32 {
        return !!x
    }

    @class
    function >(x:UInt32, y:UInt32):Bit {
        return x > y
    }

    @class
    function >=(x:UInt32, y:UInt32):Bit {
        return x >= y
    }

    @class
    function <(x:UInt32, y:UInt32):Bit {
        return x < y
    }

    @class
    function <=(x:UInt32, y:UInt32):Bit {
        return x <= y
    }

    ============================================================================
    Returns the greater (closer to positive infinity) of itself and its 
    parameter.

    @param other the number to compare against
    @returns the maximum of itself and the other number
    ============================================================================
    function max(other:Int64):Int64 {
        if value > other
            return value
        else
            return other
    }

    ============================================================================
    Returns the greater (closer to positive infinity) of itself and its 
    parameter.

    @param other the number to compare against
    @returns the maximum of itself and the other number
    ============================================================================
    function max(other:UInt32):UInt32 {
        if value > other
            return value
        else
            return other
    }

    ============================================================================
    Returns the greater (closer to positive infinity) of itself and its 
    parameter.

    @param other the number to compare against
    @returns the maximum of itself and the other number
    ============================================================================
    function max(other:UInt64):UInt64 {
        if value > other
            return value
        else
            return other
    }

    ============================================================================
    Returns the greater (closer to positive infinity) of itself and its 
    parameter.

    @param other the number to compare against
    @returns the maximum of itself and the other number
    ============================================================================
    function max(other:Real32):Real32 {
        if value > other
            return value
        else
            return other
    }

    ============================================================================
    Returns the greater (closer to positive infinity) of itself and its 
    parameter.

    @param other the number to compare against
    @returns the maximum of itself and the other number
    ============================================================================
    function max(other:Real64):Real64 {
        if value > other
            return value
        else
            return other
    }

    ============================================================================
    Returns the lesser (closer to negative infinity) of itself and its 
    parameter.

    @param other the number to compare against
    @returns the minimum of itself and the other number
    ============================================================================
    function min(other:Int64):Int64 {
        if value < other
            return value
        else
            return other
    }

    ============================================================================
    Returns the lesser (closer to negative infinity) of itself and its 
    parameter.

    @param other the number to compare against
    @returns the minimum of itself and the other number
    ============================================================================
    function min(other:UInt32):UInt32 {
        if value < other
            return value
        else
            return other
    }

    ============================================================================
    Returns the lesser (closer to negative infinity) of itself and its 
    parameter.

    @param other the number to compare against
    @returns the minimum of itself and the other number
    ============================================================================
    function min(other:UInt64):UInt64 {
        if value < other
            return value
        else
            return other
    }

    ============================================================================
    Returns the lesser (closer to negative infinity) of itself and its 
    parameter.

    @param other the number to compare against
    @returns the minimum of itself and the other number
    ============================================================================
    function min(other:Real32):Real32 {
        if value < other
            return value
        else
            return other
    }

    ============================================================================
    Returns the lesser (closer to negative infinity) of itself and its 
    parameter.

    @param other the number to compare against
    @returns the minimum of itself and the other number
    ============================================================================
    function min(other:Real64):Real64 {
        if value < other
            return value
        else
            return other
    }

    ============================================================================
    Returns a single `Bit` from this integer. Index `0` is the least significant
    bit, and index `31` is the most significant bit.

    @param index the index of the bit to return
    @returns `true` if the bit is set
    ============================================================================
    @pre(index >= 0 & index < BITS)
    function [](index:Int):Bit {
        return value >> index && 1 = 1
    }

    ============================================================================
    Returns a slice of this integer's bit representation. Index `0` is the least 
    significant bit, and index `31` is the most significant bit. The sliced bits
    are returned packed in a new `UInt32` value. For example:

        var value := UInt32.MAX
        Console.writeLine(value[8 .. 16])

    This selects the second-least-signficant byte of `value`. Since `value` is
    `UInt32.MAX`, and the binary representation of `UInt32.MAX` has all bits 
    set, the resulting slice also has all eight of its bits set, resulting in 
    the value `255`.
    
    @param index the index of the bit to return
    @returns `true` if the bit is set
    ============================================================================
    @pre(left >= 0 & left < BITS & right >= 0 & right < BITS & step != 0)
    function [..](var left:Int?, var right:Int?, step:Int):UInt32 {
        if left = null {
            if step > 0
                left := 0
            else
                left := BITS - 1
        }
        if right = null {
            if step > 0
                right := BITS
            else
                right := -1
        }
        if step = 1 {
            var mask := -1->>(UInt32) >> (BITS - (right - left))
            return value >> left && mask
        }
        var count := 0
        var result:UInt32 := 0
        for i in left ... right by step {
            var bit := value[i]
            -- FIXME unnecessary cast
            if bit
                result ||= (1 << count)->(UInt32)
            count += 1
        }
        return result
    }

    ============================================================================
    Returns the number of bits necessary to represent this number. For instance,
    the number `19` has binary representation `10011`, therefore `19.length` has
    the value `5`. Negative numbers always have their most significant bit set
    and thus a length equal to `BITS`, and `0` reports a length of `0`.
    ============================================================================
    @external
    function length():Int

    ============================================================================
    @hidden
    ============================================================================
    @protected
    @override
    function convertToString(thousandsSeparator:Char?):String {
        return convertToString(value, thousandsSeparator)
    }
    
    @override
    function =(o:Object):Bit {
        if o-?>(Integer)
            return value = o->(Number)->>(Int64)
        else if o-?>(RealNumber)
            return value = o->(Number)->>(Real64)
        else
            return false
    }
        
    @override
    function ->>():Int8 {
        return value->>(Int8)
    }

    @override
    function ->>():Int16 {
        return value->>(Int16)
    }

    @override
    function ->>():Int32 {
        return value->>(Int32)
    }

    @override
    function ->>():Int64 {
        return value
    }

    @override
    function ->>():UInt8 {
        return value->>(UInt8)
    }

    @override
    function ->>():UInt16 {
        return value->>(UInt16)
    }

    @override
    function ->>():UInt32 {
        return value
    }

    @override
    function ->>():UInt64 {
        return value
    }

    @override
    function ->>():Real32 {
        return value
    }

    @override
    function ->>():Real64 {
        return value
    }

    @override
    function ->>():String {
        return value->>(String)
    }    
}