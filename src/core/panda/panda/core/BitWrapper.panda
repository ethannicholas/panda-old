package panda.core

================================================================================
Value representing a single bit, having the possible values `true` or `false`.
================================================================================
@final
class BitWrapper : Primitive (Formattable) {
    ============================================================================
    @hidden
    ============================================================================
    def value:Bit
    
    ============================================================================
    @hidden
    ============================================================================
    init(value:Bit) {
        self.value := value
    }
        
    @override
    function =(o:Object):Bit {
        return o-?>BitWrapper & value = o->BitWrapper.value
    }

    @override
    function get_hash():Int {
        if value {
            return 1
        }
        else {
            return 0
        }
    }

    ============================================================================
    Returns the string `"true"` or `"false"`.

    @returns either `"true"` or `"false"`
    ============================================================================
    @override
    function convert():String {
        if value {
            return "true"
        }
        else {
            return "false"
        }
    }

    ============================================================================
    Chooses one of two strings based on the value of this `Bit`. The format 
    string must be of the form `trueString|falseString`, and the result will be
    either `trueString` or `falseString` based on the value of the `Bit`. This
    can be useful to do things like:

        out.writeLine("You see \{count:english} \{count = 1:person|people}.")

    This statement will produce output such as:

        You see one person.

    or

        You see two people.

    @param fmt the format string
    @returns either the true or false portion of the format string
    ============================================================================
    @override
    function format(fmt:String):String {
        def parsed := fmt.parse(/([^|]*)\|([^|]*)/)
        assert parsed != null : "invalid format string"
        if value {
            return parsed[0]
        }
        else {
            return parsed[1]
        }
    }
      
    ============================================================================
    @hidden
    ============================================================================
    function convert():Bit {
        return value
    }
}