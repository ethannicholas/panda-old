package panda.core

================================================================================
A 64 bit unsigned integer, capable of representing numbers in the range 0 to 
18,446,744,073,709,551,615.

`UInt64`s are created automatically as the result of integer literals (numbers 
appearing directly in the source code) and as the result of mathematical 
expressions.
================================================================================
@final
class UInt64Wrapper : UnsignedInteger {
    ============================================================================
    The minimum value representable by a `UInt64`.
    ============================================================================
    constant MIN:UInt64 := 0
    
    ============================================================================
    The maximum value representable by a `UInt64`.
    ============================================================================
    constant MAX:UInt64 := 18446744073709551615

    ============================================================================
    The number of bits in a `UInt64`.
    ============================================================================
    constant BITS := 64

    ============================================================================
    @hidden
    ============================================================================
    def value:UInt64
    
    ============================================================================
    Creates a slice of the integers: a list ranging from `left` to [MAX].

    @param left the first number in the list
    @returns a list of numbers
    ============================================================================
    @class
    function [..](left:UInt64):ListView<UInt64> {
        return UInt64[left...]
    }
    
    ============================================================================
    Creates a slice of the integers: a list ranging from `left` (inclusive) to
    `right` (exclusive).

    @param left the first number in the list
    @param right the last number in the list plus one
    @returns a list of numbers
    ============================================================================
    @class
    function [..](left:UInt64, right:UInt64):ListView<UInt64> {
        def result := Array<UInt64>()
        for v:UInt64 in left .. right
            result.add(v)
        return result
    }

    ============================================================================
    Creates a slice of the integers: a list ranging from `left` (inclusive) to
    `right` (exclusive), counting by `step`.

    @param left the first number in the list
    @param right the last number in the list plus one
    @param step the step value
    @returns a list of numbers
    ============================================================================
    @class
    @math(overflow)
    function [..](left:UInt64, right:UInt64, step:Int64):ListView<UInt64> {
        def result := Array<UInt64>()
        var i := left
        def stepAbs := step.abs->UInt64
        if step > 0 {
            if i < right {
                loop {
                    result.add(i)
                    if right - i <= stepAbs
                        break
                    i += stepAbs
                }
            }
        }
        else {
            if i > right {
                loop {
                    result.add(i)
                    if i - right <= stepAbs
                        break
                    i -= stepAbs
                }
            }
        }
        return result
    }

    ============================================================================
    Creates a slice of the integers: a list ranging from `left` (inclusive) to
    `right` (exclusive), counting by `step`.

    @param left the first number in the list
    @param right the last number in the list plus one
    @param step the step value
    @returns a list of numbers
    ============================================================================
    @class
    @math(overflow)
    function [..](left:UInt64, right:UInt64, step:UInt64):ListView<UInt64> {
        def result := Array<UInt64>()
        for v:UInt64 in left .. right by step
            result.add(v)
        return result
    }

    ============================================================================
    Creates a slice of the integers: a list ranging from `left` to [MAX].

    @param left the first number in the list
    @returns a list of numbers
    ============================================================================
    @class 
    function [...](left:UInt64):ListView<UInt64> {
        throw NotSupportedException()
    }
    
    ============================================================================
    Creates a slice of the integers: a list ranging from `left` to `right` 
    (inclusive).

    @param left the first number in the list
    @param right the last number in the list
    @returns a list of numbers
    ============================================================================
    @class
    function [...](left:UInt64, right:UInt64):ListView<UInt64> {
        var result := Array<UInt64>()
        for v:UInt64 in left ... right
            result.add(v)
        return result
    }

    ============================================================================
    Creates a slice of the integers: a list ranging from `left` to `right` 
    (inclusive), counting by `step`.

    @param left the first number in the list
    @param right the last number in the list
    @param step the step value
    @returns a list of numbers
    ============================================================================
    @class
    @math(overflow)
    function [...](left:UInt64, right:UInt64, step:Int64):ListView<UInt64> {
        def result := Array<UInt64>()
        var i := left
        def stepAbs := step.abs->UInt64
        if step > 0 {
            if i <= right {
                loop {
                    result.add(i)
                    if right - i < stepAbs
                        break
                    i += stepAbs
                }
            }
        }
        else {
            if i >= right {
                loop {
                    result.add(i)
                    if i - right < stepAbs
                        break
                    i -= stepAbs
                }
            }
        }
        return result
    }

    ============================================================================
    Creates a slice of the integers: a list ranging from `left` to `right` 
    (inclusive), counting by `step`.

    @param left the first number in the list
    @param right the last number in the list
    @param step the step value
    @returns a list of numbers
    ============================================================================
    @class
    @math(overflow)
    function [...](left:UInt64, right:UInt64, step:UInt64):ListView<UInt64> {
        def result := Array<UInt64>()
        for v:UInt64 in left ... right by step
            result.add(v->UInt64)
        return result
    }

    ============================================================================
    @hidden
    ============================================================================
    init(value:UInt64) {
        self.value := value
    }
        
    -- The operators below are *not actually used* by naive code; i.e. x * y
    -- will never call UInt64::* (which is why none of these end up causing
    -- infinite recursion). They are specifically filtered out by 
    -- IRGenerator::callOverloadedOperator, and defined here purely for
    -- convenience so that they can be accessed like "UInt64::*".

    ============================================================================
    The addition operator.

    @param x the number to add to this number
    @returns the sum of the two numbers
    ============================================================================
    @$wrapperMethod
    function +(x:UInt64):UInt64 {
        try {
            return self + x
        }
        catch e:CastError {
            throw OverflowError(e.message)
        }
    }

    ============================================================================
    The subtraction operator.

    @param x the number to subtract from this number
    @returns the difference of the two numbers
    ============================================================================
    @$wrapperMethod
    function -(x:UInt64):UInt64 {
        try {
            return self - x
        }
        catch e:CastError {
            throw OverflowError(e.message)
        }
    }

    ============================================================================
    The multiplication operator.

    @param x the number by which to multiply this number
    @returns the product of the two numbers
    ============================================================================
    @$wrapperMethod
    function *(x:UInt64):UInt64 {
        try {
            return self * x
        }
        catch e:CastError {
            throw OverflowError(e.message)
        }
    }

    ============================================================================
    The division operator.

    @param x the number by which to divide this number
    @returns the quotient of the two numbers
    ============================================================================
    @$wrapperMethod
    function /(x:UInt64):Real64 {
        try {
            return self / x
        }
        catch e:CastError {
            throw OverflowError(e.message)
        }
    }

    ============================================================================
    The integer division operator.

    @param x the number by which to divide this number
    @returns the quotient of the two numbers
    ============================================================================
    @$wrapperMethod
    function //(x:UInt64):UInt64 {
        try {
            return self // x
        }
        catch e:CastError {
            throw OverflowError(e.message)
        }
    }

    ============================================================================
    The exponent operator.

    @param x the power to which to raise this number
    @returns the specified power of this number
    ============================================================================
    @$wrapperMethod
    function ^(x:UInt64):UInt64 {
        try {
            return self ^ x
        }
        catch e:CastError {
            throw OverflowError(e.message)
        }
    }

    ============================================================================
    The exponent operator.

    @param x the power to which to raise this number
    @returns the specified power of this number
    ============================================================================
    @$wrapperMethod
    function ^(x:Real64):Real64 {
        try {
            return self ^ x
        }
        catch e:CastError {
            throw OverflowError(e.message)
        }
    }

    ============================================================================
    The bitwise OR operator.

    @param x the number to OR with this number
    @returns the OR of the two numbers
    ============================================================================
    @$wrapperMethod
    function ||(x:UInt64):UInt64 {
        try {
            return self || x
        }
        catch e:CastError {
            throw OverflowError(e.message)
        }
    }

    ============================================================================
    The bitwise AND operator.

    @param x the number to AND with this number
    @returns the AND of the two numbers
    ============================================================================
    @$wrapperMethod
    function &&(x:UInt64):UInt64 {
        try {
            return self && x
        }
        catch e:CastError {
            throw OverflowError(e.message)
        }
    }

    ============================================================================
    The bitwise XOR operator.

    @param x the number to XOR with this number
    @returns the XOR of the two numbers
    ============================================================================
    @$wrapperMethod
    function ~~(x:UInt64):UInt64 {
        try {
            return self ~~ x
        }
        catch e:CastError {
            throw OverflowError(e.message)
        }
    }

    ============================================================================
    The bitwise NOT operator.

    @returns the bitwise complement of this number
    ============================================================================
    @$wrapperMethod
    function !!():UInt64 {
        return !!self
    }

    ============================================================================
    The greater than operator.

    @param x the number to compare against
    @returns true if this number is greater than `x`
    ============================================================================
    @$wrapperMethod
    function >(x:UInt64):Bit {
        return self > x
    }

    ============================================================================
    The greater than or equal to operator.

    @param x the number to compare against
    @returns true if this number is greater than or equal to `x`
    ============================================================================
    @$wrapperMethod
    function >=(x:UInt64):Bit {
        return self >= x
    }

    ============================================================================
    The less than operator.

    @param x the number to compare against
    @returns true if this number is less than `x`
    ============================================================================
    @$wrapperMethod
    function <(x:UInt64):Bit {
        return self < x
    }

    ============================================================================
    The less than or equal to operator.

    @param x the number to compare against
    @returns true if this number is less than or equal to `x`
    ============================================================================
    @$wrapperMethod
    function <=(x:UInt64):Bit {
        return self <= x
    }


    ============================================================================
    Returns the greater (closer to positive infinity) of itself and its 
    parameter.

    @param other the number to compare against
    @returns the maximum of itself and the other number
    ============================================================================
    @$wrapperMethod
    function max(other:UInt64):UInt64 {
        if self > other
            return self
        else
            return other
    }

    ============================================================================
    Returns the greater (closer to positive infinity) of itself and its 
    parameter.

    @param other the number to compare against
    @returns the maximum of itself and the other number
    ============================================================================
    @$wrapperMethod
    function max(other:Real64):Real64 {
        if self > other
            return self
        else
            return other
    }

    ============================================================================
    Returns the lesser (closer to negative infinity) of itself and its 
    parameter.

    @param other the number to compare against
    @returns the minimum of itself and the other number
    ============================================================================
    @$wrapperMethod
    function min(other:UInt64):UInt64 {
        if self < other
            return self
        else
            return other
    }


    ============================================================================
    Returns the lesser (closer to negative infinity) of itself and its 
    parameter.

    @param other the number to compare against
    @returns the minimum of itself and the other number
    ============================================================================
    @$wrapperMethod
    function min(other:Real64):Real64 {
        if self < other
            return self
        else
            return other
    }

    ============================================================================
    Returns the square root of this number. 

    @returns the square root of this number
    ============================================================================
    @$wrapperMethod
    function sqrt():Real64 {
        return self->Real64.sqrt
    }

    ============================================================================
    Returns the trigonometric sine of this number.

    @returns the sine of this number
    ============================================================================
    @$wrapperMethod
    function sin():Real64 {
        return self->Real64.sin
    }

    ============================================================================
    Returns the trigonometric cosine of this number.

    @returns the cosine of this number
    ============================================================================
    @$wrapperMethod
    function cos():Real64 {
        return self->Real64.cos
    }

    ============================================================================
    Returns the trigonometric tangent of this number.

    @returns the tangent of this number
    ============================================================================
    @$wrapperMethod
    function tan():Real64 {
        return self->Real64.tan
    }

    ============================================================================
    Returns a single `Bit` from this integer. Index `0` is the least significant
    bit, and index `63` is the most significant bit.

    @param index the index of the bit to return
    @returns `true` if the bit is set
    ============================================================================
    @pre(index >= 0 & index < BITS)
    function [](index:Int):Bit {
        return value >> index.convert()->UInt64 && 1 = 1
    }

    ============================================================================
    Returns a slice of this integer's bit representation. Index `0` is the least 
    significant bit, and index `63` is the most significant bit. The sliced bits
    are returned packed in a new `UInt64` value. For example:

        var value := -1
        Console.writeLine(value[8 .. 16])

    This selects the second-least-signficant byte of `value`. Since `value` is
    `-1`, and the binary representation of `-1` has all bits set, the resulting
    slice also has all eight of its bits set, resulting in the value `255`.
    
    @param left the index of the first bit to return
    @param right the index of the last bit to return
    @param step the number of bits to count by
    @returns the selected bits
    ============================================================================
    @pre(left >= 0 & left < BITS & right >= 0 & right < BITS & step != 0)
    function [..](var left:Int?, var right:Int?, step:Int):UInt64 {
        if left = null {
            if step > 0
                left := 0
            else
                left := BITS - 1
        }
        if right = null {
            if step > 0
                right := BITS
            else
                right := -1
        }
        if step = 1 {
            var mask := (-1).convert()->UInt64 >> (BITS - (right - left))
            return value >> left && mask
        }
        var count := 0
        var result:UInt64 := 0
        for i in left ... right by step {
            var bit := value[i]
            if bit
                result ||= 1 << count
            count += 1
        }
        return result
    }

    ============================================================================
    Returns the number of bits necessary to represent this number. For instance,
    the number `19` has binary representation `10011`, therefore `19.length` has
    the value `5`. The number `0` reports a length of `0`.

    @returns the length of the number's binary representation
    ============================================================================
    @external
    function length():Int

    ============================================================================
    @hidden
    ============================================================================
    @protected
    @override
    function convertToString(thousandsSeparator:Char?, minWholeDigits:Int?, 
            minFractionDigits:Int?, maxFractionDigits:Int?, base:Int, 
            baseChars:String):String {
        return convertToString(value, thousandsSeparator, minWholeDigits,
                minFractionDigits, maxFractionDigits, base, baseChars)
    }
    
    @override
    function =(o:Object):Bit {
        if o-?>Integer
            return value = o->Number.convert()->UInt64
        else if o-?>RealNumber
            return value = o->Number.convert()->Real64
        else
            return false
    }
        
    ============================================================================
    Coerces this number into an `Int8`. If it is out of range, the result will
    be the low 8 bits of this number.

    @returns this number as an `Int8`
    ============================================================================
    @override
    function convert():Int8 {
        return value->>Int8
    }

    ============================================================================
    Coerces this number into an `Int16`. If it is out of range, the result will
    be the low 16 bits of this number.

    @returns this number as an `Int16`
    ============================================================================
    @override
    function convert():Int16 {
        return value->>Int16
    }

    ============================================================================
    Coerces this number into an `Int32`. If it is out of range, the result will
    be the low 32 bits of this number.

    @returns this number as an `Int32`
    ============================================================================
    @override
    function convert():Int32 {
        return value->>Int32
    }
        
    ============================================================================
    Coerces this number into an `Int64`. If it is out of range, the result will
    be negative due to overflow.

    @returns this number as an `Int64`
    ============================================================================
    @override
    function convert():Int64 {
        return value->>Int64
    }

    ============================================================================
    Coerces this number into a `UInt8`. If it is out of range, the result will
    be the low 8 bits of this number.

    @returns this number as a `UInt8`
    ============================================================================
    @override
    function convert():UInt8 {
        return value->>UInt8
    }

    ============================================================================
    Coerces this number into a `UInt16`. If it is out of range, the result will
    be the low 16 bits of this number.

    @returns this number as a `UInt16`
    ============================================================================
    @override
    function convert():UInt16 {
        return value->>UInt16
    }

    ============================================================================
    Coerces this number into a `UInt32`. If it is out of range, the result will
    be the low 32 bits of this number.

    @returns this number as a `UInt32`
    ============================================================================
    @override
    function convert():UInt32 {
        return value->>UInt32
    }
        
    ============================================================================
    Returns this number.

    @returns this number
    ============================================================================
    @override
    function convert():UInt64 {
        return value
    }

    ============================================================================
    Converts this number to a `Real32`.

    @returns this number as a `Real32`
    ============================================================================
    @override
    function convert():Real32 {
        return value->>Real32
    }

    ============================================================================
    Converts this number to a `Real64`.

    @returns this number as a `Real64`
    ============================================================================
    @override
    function convert():Real64 {
        return value
    }

    ============================================================================
    Returns a string representing this number's decimal expansion.

    @returns the decimal representation of this number
    ============================================================================
    @override
    function convert():String {
        constant max := 20
        def result := PrimitiveArray<Char>(max)
        var index := max - 1
        var value := self.value
        do {
            result[index] := (value % 10 + 48)->>Char
            value //= 10
            index -= 1
        } 
        while value > 0
        return String(result[index + 1..])    
    }
}