package panda.core

@specialize
class UIntIterator<T:UnsignedInteger, S:Integer> (Iterator<T>) {
    def end:T
    def step:S
    var current:T
    var endInclusive:Bit
    var isDone:Bit

    @pre(step != 0)
    init(start:T, end:T, step:S, endInclusive:Bit) {
        self.current := start
        self.end := end
        self.step := step
        self.endInclusive := endInclusive
    }

    @override
    function get_done():Bit {
       	return isDone
    }

    @override
    method next():T {
        def result := current
        -- have to jump through some hoops here to avoid overflows
        if step > 0 {
            if endInclusive {
                isDone := end - current < (step->T)
            }
            else {
                isDone := end - current <= (step->T)
            }
        }
        else {
            if endInclusive {
                isDone := current - end < (-step->T)
            }
            else {
                isDone := current - end <= (-step->T)
            }
        }
        if !isDone {
        	if step > 0 {
            	current := (current + step->T)->T
            }
        	else {
            	current := (current - (-step)->T)->T
            }
        }
        return result
    }
}

================================================================================
Abstract superclass of the unsigned integer types `UInt8`, `UInt16`, `UInt32`,
and `UInt64`.
================================================================================
@abstract
class UnsignedInteger : Integer {
	@override
	function english():String {
		return self->UInt64.english()
	}

	@override
	function roman():String {
		return self->UInt64.roman()
	}
}