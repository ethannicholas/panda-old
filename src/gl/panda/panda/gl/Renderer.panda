package panda.gl

uses panda.gl.images.Image
uses panda.gl.shapes.Shape
uses panda.gl.shapes.Rectangle

class Renderer {
    ============================================================================
    Color used for fill operations.
    ============================================================================
    property paint:Paint := Color.WHITE

    ============================================================================
    Compositing rule, which controls how source pixels are combined with
    destination pixels.
    ============================================================================
    property composite:Composite := new IdentityComposite()

    ============================================================================
    Transform which controls how user-space points are mapped onto device
    coordinates.
    ============================================================================
    property transform:Transform := Transform.IDENTITY
    
    @private
	var native:$NativePointer

	@private
	constructor() {
	}

    ============================================================================
    Intersects the currect clip region with the specified shape to create a new
    clip region.

    @param clip the new clipping region
    ============================================================================
    @self
    @external
    method clip(clip:Shape)

    ============================================================================
    Resets the clip region to include the entire coordinate system.
    ============================================================================
    @self
    @external
    method resetClip()

    @self
    method translate(x:Real, y:Real) {
        transform := Transform.translation(x, y) * transform
    }

    @self
    method rotate(angle:Real) {
        transform := Transform.rotation(angle) * transform
    }

    @self
    method rotate(angle:Real, x:Real, y:Real) {
        transform := Transform.rotation(angle, x, y) * transform
    }

    @self
    method scale(scale:Real) {
        transform := Transform.scale(scale) * transform
    }

    @self
    method scale(sx:Real, sy:Real) {
        transform := Transform.scale(sx, sy) * transform
    }

    @self
    method transform:=(transform:Transform) {
        self._transform := transform
        setTransform(transform)
    }

    @private
    @external
    method setTransform(transform:Transform)

    @self
    method paint:=(paint:Paint) {
        self._paint := paint
        setPaint(paint)
    }

    @private
    @external
    method setPaint(paint:Paint)

    ============================================================================
    Fills the entire drawable area with the current paint.
    ============================================================================
    @external
    method clear()

    ============================================================================
    Fills the given shape with the current paint.
    ============================================================================
    @external
    method fill(shape:Shape)

    @external
    method stroke(shape:Shape)

    @external
    method drawImage(image:Image, bounds:Rectangle)

    ============================================================================
    Notifies the rendering engine that drawing is complete and the frame is
    ready to be displayed. This method is called automatically during a Window's
    render loop, but if you are not using `Window.startRenderLoop()` you will
    need to call it manually at the end of every frame.
    ============================================================================
    @external
    method present()

    @private
    @external
    method close() 

    @override
    method finalize() {
        close()
    }
}