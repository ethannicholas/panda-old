package panda.gl

================================================================================
Represents an affine transform of a two-dimensional coordinate system. Affine
transformations preserve straightness and parallelness of lines, and all affine
transformations may be represented as some combination of translation, scaling,
rotating, and shearing.
================================================================================
class Transform : Value {
    constant IDENTITY := Transform(1, 0, 0, 0, 1, 0)

    @private
    def m00:Real

    @private
    def m01:Real

    @private
    def m02:Real

    @private
    def m10:Real

    @private
    def m11:Real

    @private
    def m12:Real

    @private
    constructor(m00:Real, m01:Real, m02:Real, m10:Real, m11:Real, m12:Real) {
        self.m00 := m00
        self.m01 := m01
        self.m02 := m02
        self.m10 := m10
        self.m11 := m11
        self.m12 := m12
    }

    ============================================================================
    Creates a new `Transform` representing a translation.

    @param tx the translation along the x axis
    @param ty the translation along the y axis
    @returns a translation transform
    ============================================================================
    @class
    function translation(tx:Real, ty:Real):Transform {
        return Transform(1, 0, tx, 0, 1, ty)
    }

    ============================================================================
    Creates a new `Transform` representing a uniform scale.

    @param s the scale factor
    @returns a scale transform
    ============================================================================
    @class
    function scale(s:Real):Transform {
        return scale(s, s)
    }

    ============================================================================
    Creates a new `Transform` representing a scale.

    @param sx the scale along the x axis
    @param sy the scale along the y axis
    @returns a scale transform
    ============================================================================
    @class
    function scale(sx:Real, sy:Real):Transform {
        return Transform(sx, 0, 0, 0, sy, 0)
    }

    ============================================================================
    Creates a new `Transform` representing a rotation.

    @param angle the angle (in radians) by which to rotate
    @returns a rotation transform
    ============================================================================
    @class
    function rotation(angle:Real):Transform {
        def sin := angle.sin
        def cos := angle.cos
        return Transform(cos, -sin, 0, sin, cos, 0)
    }

    ============================================================================
    Creates a new `Transform` representing a rotation around a particular
    axis.

    @param angle the angle (in radians) by which to rotate
    @param x the x axis
    @param y the y axis
    @returns a rotation transform
    ============================================================================
    @class
    function rotation(angle:Real, axis:Point):Transform {
        def sin := angle.sin
        def cos := angle.cos
        def x := axis.x
        def y := axis.y
        return Transform(cos, -sin, x - x * cos + y * sin, 
                sin, cos, y - x * sin - y * cos)
    }

    ============================================================================
    Creates a new `Transform` representing a shear.

    @param shx the shear along the x axis
    @param shy the shear along the y axis
    @returns a shear transform
    ============================================================================
    @class
    function shear(shx:Real, shy:Real):Transform {
        return Transform(1, shx, 0, shy, 1, 0)
    }

    function transform(point:Point):Point {
        return Point(m00 * point.x + m01 * point.y + m02,
                m10 * point.x + m11 * point.y + m12)
    }

    function *(a:Transform):Transform {
        return Transform(m00 * a.m00 + m01 * a.m10,
                m00 * a.m01 + m01 * a.m11,
                m00 * a.m02 + m01 * a.m12 + m02,
                m10 * a.m00 + m11 * a.m10,
                m10 * a.m01 + m11 * a.m11,
                m10 * a.m02 + m11 * a.m12 + m12)
    }

    @override
    function ->>():String {
        return "[[\{m00}, \{m01}, \{m02}], [\{m10}, \{m11}, \{m12}]]"
    }
}