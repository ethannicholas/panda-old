class SourceProcessor {
    constant REPLACE_PATTERN := /<span[^>]*>-\*\x23{3}REPLACE:([^\x23]+)\x23{3}\*-</span>(<span[^>]*>)[^<]+</span>/

    @class
    function handleReplaces(s:String):String {
        return s.replace(REPLACE_PATTERN, "$2$1</span>")
    }

    @class
    method postprocess(var s:String):String {
        def begin := s.indexOf("--###BEGIN###")
        if begin != null {
            s := s[begin + "--###BEGIN###".length..].trim
            if !s.startsWith("</span>")
                throw new ParseException("expected </span> after --###BEGIN###")
            s := s["</span>".length..]
        }
        def end := s.indexOf("--###END###")
        if end != null {
            s := s[..end].trim
            if !s.endsWith(">")
                throw new ParseException("expected > before --###END###")
            def tagStart := s.indexOf("<", s.length - 1)
            if tagStart != null
                throw new ParseException("expected < before >")
            s := s[..tagStart]
        }
        def result := new MutableString()
        for line in new MemoryInputStream(s).lines() {
            if line.contains("--###SKIP###")
                continue
            result.append(line)
            result.append("\n")
        }
        s := result->>(String).trim
        if !s.startsWith("<div")
            s := '<div class="pandacode">' + s
        if !s.endsWith("</div>")
            s += "</div>"
        return handleReplaces(s)
    }

    @class
    method highlightSource(s:String):String {
        Console.writeLine("compiling " + s)
        def src := File.TEMP.resolve("snippet.panda")
        if s.endsWith(".panda") {
            def original := new File("docs").resolve(s)
            src.write(original.readAsString())
        }
        else
            src.write(s.trim)
        def dest := File.TEMP.resolve("snippet.html")
        if dest.exists()
            dest.delete()
        System.exec(new File("build/native/pandac/bin/pandac"), "-f", 
                "htmlfragment", src->>(String), "-o", File.TEMP->>(String))
        return postprocess(dest.readAsString())
    }

    @class
    method replaceSources(f:File) {
        def contents := f.readAsString()
        var index := 0
        def result := new MutableString()
        loop {
            def next := contents.indexOf("@SOURCE(", index)
            if next = null {
                result.append(contents[index..])
                break
            }
            result.append(contents[index .. next])
            var count := 1
            index := next + "@SOURCE(".length
            def source := new MutableString()
            loop {
                def char := contents[index]
                switch char {
                    case "(": count += 1
                    case ")": count -= 1
                }
                if count = 0
                    break
                index += 1
                source.append(char)
            }
            index += 1
            var finalCode := source->>(String).trim
            if finalCode.startsWith("<code>") {
                assert finalCode.endsWith("</code>")
                finalCode := finalCode["<code>".length .. 
                        finalCode.length - "</code>".length].trim()
            }
            result.append(highlightSource(source->>(String)))
        }
        f.write(result->>(String))
    }

    @class
    method main() {
        def files := new File("build/docs").list("*.html")
        for file in files
            replaceSources(file)
    }
}
