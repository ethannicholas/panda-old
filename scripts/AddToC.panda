================================================================================
Scans through a tree of .html files, looking for the token `@@@TOC@@@` and
replacing it with the final table of contents (first correcting the table of
contents links to account for the directory depth at which the file was found). 
Expects three command-line arguments: the path to the main ToC file, the path to
the API ToC, and the root path to scan.
================================================================================
class AddToC {
    @class
    method processTree(toc:String, path:File, level:Int) {
        if path.isDirectory() {
            for file in path.list()
                processTree(toc, file, level + 1)
        }
        else if path.name.endsWith(".html") {
            def finalToc := toc.replace('href="', 'href="' + level * "../")
                    .replace('prepareToC("', 'prepareToC("' + level * "../")
            path.write(path.readAsString().replace("@@@TOC@@@", finalToc))
        }
    }

    @class
    method main(args:Array<String>) {
        def api := File(args[1]).readAsString()
        def toc := File(args[0]).readAsString().replace("@@@API@@@", api)
        def path := File(args[2])
        processTree(toc, path, -1)
    }
}
