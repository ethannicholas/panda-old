-- straight port from the Java version, non-idiomatic code and all.

class Record_Type {
    var Record_Comp:Record_Type?
    var Discr:Int
    var Enum_Comp:Int
    var Int_Comp:Int
    var String_Comp:String?
    var Enum_Comp_2:Int
    var String_Comp_2:String?
    var Char_Comp_1:Char
    var Char_Comp_2:Char
} 

class DhrystoneConstants {
    constant Ident_1 := 0
    constant Ident_2 := 1
    constant Ident_3 := 2
    constant Ident_4 := 3
    constant Ident_5 := 4
}

class Variables : DhrystoneConstants {
    -- The Java version used global variables here. I'm using instance fields
    -- instead, since Panda doesn't have globals and there was absolutely no
    -- reason for any of these fields to be global in the first place.
    var Record_Glob:Record_Type?
    var Next_Record_Glob:Record_Type?
    var Int_Glob:Int
    var Bool_Glob:Bit
    var Char_Glob_1:Char
    var Char_Glob_2:Char
    var Array_Glob_1  := new Array<Int>(128)
    var Array_Glob_2  := new Array<Array<Int>>()
    var First_Record  := new Record_Type()
    var Second_Record := new Record_Type()
    var Int_Comp_Ref  := new Array<Int>(1)
    var Int_Ref       := new Array<Int>(1)

    constructor() {
        for i in 0 ... 127
            Array_Glob_2.append(new Array<Int>(128))
    }
}

class Dhrystone : Variables {
    constant numberOfRuns  := 100
    constant numberOfLoops := 100000

    @final
    method execute():Real {
        var Int_Loc_1:Int
        var Int_Loc_2:Int
        var Int_Loc_3:Int
        var Int_Loc_3_Ref := new Array<Int>(1)
        var Int_Loc_1_Ref := new Array<Int>(1)
        var Enum_Loc := new Array<Int>(1)
        var String_Loc_1:String
        var String_Loc_2:String
        var begin_time:Int64
        var end_time:Int64
        var total_time:Int64
        var Meas_Index:Int
        Next_Record_Glob := Second_Record
        Record_Glob := First_Record
        Record_Glob.Record_Comp := Next_Record_Glob
        Record_Glob.Discr := Ident_1
        Record_Glob.Enum_Comp := Ident_3
        Record_Glob.Int_Comp := 40
        Record_Glob.String_Comp := "DHRYSTONE PROGRAM, SOME STRING"
        String_Loc_1 := "DHRYSTONE PROGRAM, 1'ST STRING"
        begin_time := Random.getCurrentTime()
        for RunIndex in 1 ... numberOfLoops {
            Proc_5()
            Proc_4()
            Int_Loc_1 := 2
            Int_Loc_2 := 3
            String_Loc_2 := "DHRYSTONE PROGRAM, 2'ND STRING"
            Enum_Loc[0] := Ident_2
            Bool_Glob := !Func_2(String_Loc_1, String_Loc_2)
            while Int_Loc_1 < Int_Loc_2 {
                Int_Loc_3_Ref[0] := 5 * Int_Loc_1 - Int_Loc_2
                Proc_7(Int_Loc_1, Int_Loc_2, Int_Loc_3_Ref)
                Int_Loc_1 += 1
            }
            Int_Loc_3 := Int_Loc_3_Ref[0]
            Proc_8(Array_Glob_1, Array_Glob_2, Int_Loc_1, Int_Loc_3)
            Proc_1(Record_Glob)
            for Char_Index in 'A' ... Char_Glob_2 by 1 {
                if Enum_Loc[0] = Func_1(Char_Index, 'C') {
                    Proc_6(Ident_1, Enum_Loc)
                }
            }
            Int_Loc_3 := Int_Loc_2 * Int_Loc_1
            Int_Loc_2 := Int_Loc_3 // Int_Loc_1
            Int_Loc_2 := 7 * (Int_Loc_3 - Int_Loc_2) - Int_Loc_1
            Int_Loc_1_Ref[0] := Int_Loc_1
            Proc_2(Int_Loc_1_Ref)
            Int_Loc_1 := Int_Loc_1_Ref[0]
        }
        end_time := Random.getCurrentTime()
        total_time := end_time - begin_time
        Console.writeLine(" (time for " + numberOfLoops + "): " + total_time + " millisec.")
        return total_time
    }

    @final
    method Proc_1(Pointer_Par_Val:Record_Type) {
        var Next_Record := Pointer_Par_Val.Record_Comp
        assert Next_Record != null
        Pointer_Par_Val.Record_Comp := Record_Glob
        Pointer_Par_Val.Int_Comp := 5
        Next_Record.Int_Comp := Pointer_Par_Val.Int_Comp
        var next := Pointer_Par_Val.Record_Comp
        assert next != null
        Next_Record.Record_Comp := next
        Proc_3(next)
        if Next_Record.Discr = Ident_1 {
            Next_Record.Int_Comp := 6
            Int_Ref[0] := Next_Record.Enum_Comp
            Proc_6(Pointer_Par_Val.Enum_Comp, Int_Ref)
            Next_Record.Enum_Comp := Int_Ref[0]
            var glob := Record_Glob
            assert glob != null
            Next_Record.Record_Comp := glob.Record_Comp
            Int_Ref[0] := Next_Record.Int_Comp
            Proc_7(Next_Record.Int_Comp, 10, Int_Ref)
            Next_Record.Int_Comp := Int_Ref[0]
        } 
        else
            Pointer_Par_Val := Pointer_Par_Val.Record_Comp
    }

    @final
    method Proc_2(Int_Par_Ref:Array<Int>) {
        var Int_Loc:Int
        var Enum_Loc:Int
        Int_Loc := Int_Par_Ref[0] + 10
        Enum_Loc := 0
        do {
            if Char_Glob_1 = 'A' {
                Int_Loc -= 1
                Int_Par_Ref[0] := Int_Loc - Int_Glob
                Enum_Loc := Ident_1
           }
        }
        while (Enum_Loc != Ident_1)
    }

    @final
    method Proc_3(Pointer_Par_Ref:Record_Type) {
        var glob := Record_Glob
        if glob != null {
            var comp := glob.Record_Comp
            assert comp != null
            Pointer_Par_Ref := comp
        }
        else
            Int_Glob := 100
        assert glob != null
        Int_Comp_Ref[0] := glob.Int_Comp
        Proc_7(10, Int_Glob, Int_Comp_Ref)
        glob.Int_Comp := Int_Comp_Ref[0]
    }

    @final
    method Proc_4() {
        var Bool_Loc:Bit
        Bool_Loc := Char_Glob_1 = 'A'
        Bool_Loc := Bool_Loc | Bool_Glob
        Char_Glob_2 := 'B'
    }
    
    @final
    method Proc_5() {
        Char_Glob_1 := 'A'
        Bool_Glob := false
    }

    @final
    method Proc_6(Enum_Par_Val:Int, Enum_Par_Ref:Array<Int>) {
        Enum_Par_Ref[0] := Enum_Par_Val
        if !Func_3(Enum_Par_Val)
            Enum_Par_Ref[0] := Ident_4
        switch (Enum_Par_Val) {
            case Ident_1: 
                Enum_Par_Ref[0] := Ident_1
            case Ident_2: {
                if Int_Glob > 100
                    Enum_Par_Ref[0] := Ident_1
                else
                    Enum_Par_Ref[0] := Ident_4
            }
            case Ident_3:
                Enum_Par_Ref[0] := Ident_2

            case Ident_4: { }

            case Ident_5:
                Enum_Par_Ref[0] := Ident_3
        }
    }

    @final
    method Proc_7(Int_Par_Val1:Int, Int_Par_Val2:Int, Int_Par_Ref:Array<Int>) {
        var Int_Loc:Int
        Int_Loc := Int_Par_Val1 + 2
        Int_Par_Ref[0] := Int_Par_Val2 + Int_Loc
    }

    @final
    method Proc_8(Array_Par_1_Ref:Array<Int>, Array_Par_2_Ref:Array<Array<Int>>, 
            Int_Par_Val_1:Int, Int_Par_Val_2:Int) {
        var Int_Loc := Int_Par_Val_1 + 5
        Array_Par_1_Ref[Int_Loc] := Int_Par_Val_2
        Array_Par_1_Ref[Int_Loc + 1] := Array_Par_1_Ref[Int_Loc]
        Array_Par_1_Ref[Int_Loc + 30] := Int_Loc
        for Int_Index in Int_Loc ... Int_Loc + 1
            Array_Par_2_Ref[Int_Loc][Int_Index] := Int_Loc
        Array_Par_2_Ref[Int_Loc][Int_Loc-1] += 1
        Array_Par_2_Ref[Int_Loc + 20][Int_Loc] := Array_Par_1_Ref[Int_Loc]
        Int_Glob := 5
    }

    @final
    function Func_1(Char_Par_1_Val:Char, Char_Par_2_Val:Char):Int {
        var Char_Loc_1:Char
        var Char_Loc_2:Char
        Char_Loc_1 := Char_Par_1_Val
        Char_Loc_2 := Char_Loc_1
        if Char_Loc_2 != Char_Par_2_Val
            return Ident_1
        else
            return Ident_2
    }

    @final
    function compare(s1:String, s2:String):Int {
        var l1 := s1.length
        var l2 := s2.length
        for i in 0 ... l1.min(l2) - 1 {
            var diff := s1[i]->(Int) - s2[i]->(Int)
            if diff != 0
                return diff
        }
        return l1 - l2
    }

    @final
    function Func_2(String_Par_1_Ref:String, String_Par_2_Ref:String):Bit {
        var Int_Loc:Int
        var Char_Loc:Char := 0->(Char) 
        Int_Loc := 2
        while Int_Loc <= 2 {
            if (Func_1(String_Par_1_Ref[Int_Loc], String_Par_2_Ref[Int_Loc + 1]) = Ident_1) {
                Char_Loc := 'A'
                Int_Loc += 1
            }
        }
        if Char_Loc >= 'W' & Char_Loc < 'Z'
            Int_Loc := 7
        if Char_Loc = 'X'
            return true
        else {
            if compare(String_Par_1_Ref, String_Par_2_Ref) > 0 {
                Int_Loc += 7
                return true
            } 
            else
                return false
        }
    }

    @final
    function Func_3(Enum_Par_Val:Int):Bit {
        var Enum_Loc:Int
        Enum_Loc := Enum_Par_Val
        if Enum_Loc = Ident_3
            return true
        else
            return false
    }

    @class
    method main() {
        var d := new Dhrystone()
        d.execute() -- warm up the loop
        var mean_time := 0.0
        for i in 1 ... numberOfRuns {
            Console.write(i + ". Test")
            mean_time += d.execute()
        }
        Console.writeLine("\nAverage Time over " + numberOfRuns + " runs: " +
                mean_time / numberOfRuns + " millisec.")
    }
}