Results from my i7 MacBook Pro, safety checks off:

Dhrystone C:

Dhrystone Panda->native:
3/1/2014 - 127ms (baseline, prior to any optimizations)
3/2/2014 - 73ms  (fixed erroneous bounds check, unnecessary promotions)
3/8/2014 - 12ms  (I don't even remember anymore)
4/19/2014 - 15.66ms (slowdown probably due to less-efficient handling of min())
7/01/2014 - 27.11ms (I can't go months without optimizing again)

Dhrystone Java:
3/2/2014 - 3.2ms

Dhrystone Panda->Java:
3/1/2014 - 12ms (baseline, prior to any optimization)
3/2/2014 - 6ms (fixed string literals to be constant)
3/2/2014 - 3.98ms (fixed array assignment)
7/01/2014 - 5.56ms (I can't go months without optimizing again)

Compiling Hello World
3/7/2014 - 1.2s (baseline, prior to any optimization)
3/8/2014 - 1.1s (reduced allocation in lexer)
3/8/2014 - 0.73s (improved SymbolTable.resolveName)
3/8/2014 - 0.58s (buffered I/O)
3/8/2014 - 0.37s (switched to DFA)
4/16/2014 - 2.5944s (oh god so much has changed and I have no idea what I did)
4/18/2014 - 4.1225s (ok, it's the new array methods. Fix coming soon.)
4/19/2014 - 2.164s (lots of optimizations, array fix still pending)
4/23/2014 - 0.3072s (array fix mostly in place, minimal dead code elimination)
7/01/2014 - so bad I'm not even testing it. New array methods combined with 
        stupid array handling and lack of generics have made this absolutely
        awful. Will not be fixed until generics are in.