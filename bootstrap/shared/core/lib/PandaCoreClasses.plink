-- This file was autogenerated by the Panda compiler --


package panda.core
@final
class Int8Wrapper:panda.core.SignedInteger {
    @class @final
    var MIN:panda.core.Int8

    @class @final
    var MAX:panda.core.Int8

    @class @final
    var BITS:panda.core.Int32

    @final
    var value:panda.core.Int8

    @class
    function [..](left:panda.core.Int8):panda.collections.PrimitiveArray<panda.core.Int8>

    @class
    function [..](left:panda.core.Int8, right:panda.core.Int8):panda.collections.PrimitiveArray<panda.core.Int8>

    @class
    function [..](left:panda.core.Int8, right:panda.core.Int8, step:panda.core.Int8):panda.collections.PrimitiveArray<panda.core.Int8>

    @class
    function [...](left:panda.core.Int8):panda.collections.PrimitiveArray<panda.core.Int8>

    @class
    function [...](left:panda.core.Int8, right:panda.core.Int8):panda.collections.PrimitiveArray<panda.core.Int8>

    @class
    function [...](left:panda.core.Int8, right:panda.core.Int8, step:panda.core.Int8):panda.collections.PrimitiveArray<panda.core.Int8>

    @self
    constructor(value:panda.core.Int8)

    @$wrapperMethod
    function +(x:panda.core.Int8):panda.core.Int8

    @$wrapperMethod
    function -(x:panda.core.Int8):panda.core.Int8

    @$wrapperMethod
    function *(x:panda.core.Int8):panda.core.Int8

    @$wrapperMethod
    function /(x:panda.core.Int8):panda.core.Real32

    @$wrapperMethod
    function //(x:panda.core.Int8):panda.core.Int8

    @$wrapperMethod
    function ^(x:panda.core.UInt8):panda.core.Int8

    @$wrapperMethod
    function ^(x:panda.core.Real32):panda.core.Real32

    @$wrapperMethod
    function ||(x:panda.core.Int8):panda.core.Int8

    @$wrapperMethod
    function &&(x:panda.core.Int8):panda.core.Int8

    @$wrapperMethod
    function ~~(x:panda.core.Int8):panda.core.Int8

    @$wrapperMethod
    function !!():panda.core.Int8

    @$wrapperMethod
    function >(x:panda.core.Int8):panda.core.Bit

    @$wrapperMethod
    function >=(x:panda.core.Int8):panda.core.Bit

    @$wrapperMethod
    function <(x:panda.core.Int8):panda.core.Bit

    @$wrapperMethod
    function <=(x:panda.core.Int8):panda.core.Bit

    @$wrapperMethod
    function max(other:panda.core.Int32):panda.core.Int32

    @$wrapperMethod
    function max(other:panda.core.Int64):panda.core.Int64

    @$wrapperMethod
    function max(other:panda.core.UInt32):panda.core.UInt32

    @$wrapperMethod
    function max(other:panda.core.UInt64):panda.core.UInt64

    @$wrapperMethod
    function max(other:panda.core.Real32):panda.core.Real32

    @$wrapperMethod
    function max(other:panda.core.Real64):panda.core.Real64

    @$wrapperMethod
    function min(other:panda.core.Int32):panda.core.Int32

    @$wrapperMethod
    function min(other:panda.core.Int64):panda.core.Int64

    @$wrapperMethod
    function min(other:panda.core.UInt32):panda.core.Int8

    @$wrapperMethod
    function min(other:panda.core.UInt64):panda.core.Int8

    @$wrapperMethod
    function min(other:panda.core.Real32):panda.core.Real32

    @$wrapperMethod
    function min(other:panda.core.Real64):panda.core.Real64

    @$wrapperMethod
    function sign():panda.core.Int32

    @$wrapperMethod
    function abs():panda.core.Int8

    @$wrapperMethod
    function sqrt():panda.core.Real32

    @$wrapperMethod
    function sin():panda.core.Real32

    @$wrapperMethod
    function cos():panda.core.Real32

    @$wrapperMethod
    function tan():panda.core.Real32

    @$wrapperMethod @pre(index >= 0 & index < BITS)
    function [](index:panda.core.Int32):panda.core.Bit

    @$wrapperMethod @pre(left >= 0 & left < BITS & right >= 0 & right < BITS & step != 0)
    function [..](var left:panda.core.Int32Wrapper?, var right:panda.core.Int32Wrapper?, step:panda.core.Int32):panda.core.Int8

    @external @$wrapperMethod
    function length():panda.core.Int32

    @protected @override
    function convertToString(thousandsSeparator:panda.core.CharWrapper?, minWholeDigits:panda.core.Int32Wrapper?, minFractionDigits:panda.core.Int32Wrapper?, maxFractionDigits:panda.core.Int32Wrapper?, base:panda.core.Int32, baseChars:panda.core.String):panda.core.String

    @override
    function =(o:panda.core.Object):panda.core.Bit

    @override
    function ->>():panda.core.Int8

    @override
    function ->>():panda.core.Int16

    @override
    function ->>():panda.core.Int32

    @override
    function ->>():panda.core.Int64

    @override
    function ->>():panda.core.UInt8

    @override
    function ->>():panda.core.UInt16

    @override
    function ->>():panda.core.UInt32

    @override
    function ->>():panda.core.UInt64

    @override
    function ->>():panda.core.Real32

    @override
    function ->>():panda.core.Real64

    @override
    function ->>():panda.core.String

    @class
    method $classInit()

}
package panda.core
@final
class Int16Wrapper:panda.core.SignedInteger {
    @class @final
    var MIN:panda.core.Int16

    @class @final
    var MAX:panda.core.Int16

    @class @final
    var BITS:panda.core.Int32

    @final
    var value:panda.core.Int16

    @class
    function [..](left:panda.core.Int16):panda.collections.PrimitiveArray<panda.core.Int16>

    @class
    function [..](left:panda.core.Int16, right:panda.core.Int16):panda.collections.PrimitiveArray<panda.core.Int16>

    @class
    function [..](left:panda.core.Int16, right:panda.core.Int16, step:panda.core.Int16):panda.collections.PrimitiveArray<panda.core.Int16>

    @class
    function [...](left:panda.core.Int16):panda.collections.PrimitiveArray<panda.core.Int16>

    @class
    function [...](left:panda.core.Int16, right:panda.core.Int16):panda.collections.PrimitiveArray<panda.core.Int16>

    @class
    function [...](left:panda.core.Int16, right:panda.core.Int16, step:panda.core.Int16):panda.collections.PrimitiveArray<panda.core.Int16>

    @self
    constructor(value:panda.core.Int16)

    @$wrapperMethod
    function +(x:panda.core.Int16):panda.core.Int16

    @$wrapperMethod
    function -(x:panda.core.Int16):panda.core.Int16

    @$wrapperMethod
    function *(x:panda.core.Int16):panda.core.Int16

    @$wrapperMethod
    function /(x:panda.core.Int16):panda.core.Real32

    @$wrapperMethod
    function //(x:panda.core.Int16):panda.core.Int16

    @$wrapperMethod
    function ^(x:panda.core.UInt16):panda.core.Int16

    @$wrapperMethod
    function ^(x:panda.core.Real32):panda.core.Real32

    @$wrapperMethod
    function ||(x:panda.core.Int16):panda.core.Int16

    @$wrapperMethod
    function &&(x:panda.core.Int16):panda.core.Int16

    @$wrapperMethod
    function ~~(x:panda.core.Int16):panda.core.Int16

    @$wrapperMethod
    function !!():panda.core.Int16

    @$wrapperMethod
    function >(x:panda.core.Int16):panda.core.Bit

    @$wrapperMethod
    function >=(x:panda.core.Int16):panda.core.Bit

    @$wrapperMethod
    function <(x:panda.core.Int16):panda.core.Bit

    @$wrapperMethod
    function <=(x:panda.core.Int16):panda.core.Bit

    @$wrapperMethod
    function max(other:panda.core.Int32):panda.core.Int32

    @$wrapperMethod
    function max(other:panda.core.Int64):panda.core.Int64

    @$wrapperMethod
    function max(other:panda.core.UInt32):panda.core.UInt32

    @$wrapperMethod
    function max(other:panda.core.UInt64):panda.core.UInt64

    @$wrapperMethod
    function max(other:panda.core.Real32):panda.core.Real32

    @$wrapperMethod
    function max(other:panda.core.Real64):panda.core.Real64

    @$wrapperMethod
    function min(other:panda.core.Int32):panda.core.Int32

    @$wrapperMethod
    function min(other:panda.core.Int64):panda.core.Int64

    @$wrapperMethod
    function min(other:panda.core.UInt32):panda.core.Int16

    @$wrapperMethod
    function min(other:panda.core.UInt64):panda.core.Int16

    @$wrapperMethod
    function min(other:panda.core.Real32):panda.core.Real32

    @$wrapperMethod
    function min(other:panda.core.Real64):panda.core.Real64

    @$wrapperMethod
    function sign():panda.core.Int32

    @$wrapperMethod
    function abs():panda.core.Int16

    @$wrapperMethod
    function sqrt():panda.core.Real32

    @$wrapperMethod
    function sin():panda.core.Real32

    @$wrapperMethod
    function cos():panda.core.Real32

    @$wrapperMethod
    function tan():panda.core.Real32

    @$wrapperMethod @pre(index >= 0 & index < BITS)
    function [](index:panda.core.Int32):panda.core.Bit

    @$wrapperMethod @pre(left >= 0 & left < BITS & right >= 0 & right < BITS & step != 0)
    function [..](var left:panda.core.Int32Wrapper?, var right:panda.core.Int32Wrapper?, step:panda.core.Int32):panda.core.Int16

    @external @$wrapperMethod
    function length():panda.core.Int32

    @protected @override
    function convertToString(thousandsSeparator:panda.core.CharWrapper?, minWholeDigits:panda.core.Int32Wrapper?, minFractionDigits:panda.core.Int32Wrapper?, maxFractionDigits:panda.core.Int32Wrapper?, base:panda.core.Int32, baseChars:panda.core.String):panda.core.String

    @override
    function =(o:panda.core.Object):panda.core.Bit

    @override
    function ->>():panda.core.Int8

    @override
    function ->>():panda.core.Int16

    @override
    function ->>():panda.core.Int32

    @override
    function ->>():panda.core.Int64

    @override
    function ->>():panda.core.UInt8

    @override
    function ->>():panda.core.UInt16

    @override
    function ->>():panda.core.UInt32

    @override
    function ->>():panda.core.UInt64

    @override
    function ->>():panda.core.Real32

    @override
    function ->>():panda.core.Real64

    @override
    function ->>():panda.core.String

    @class
    method $classInit()

}
package panda.core
@final
class Int32Wrapper:panda.core.SignedInteger {
    @class @final
    var MIN:panda.core.Int32

    @class @final
    var MAX:panda.core.Int32

    @class @final
    var BITS:panda.core.Int32

    @final
    var value:panda.core.Int32

    @class
    function [..](left:panda.core.Int32):panda.collections.PrimitiveArray<panda.core.Int32>

    @class
    function [..](left:panda.core.Int32, right:panda.core.Int32):panda.collections.PrimitiveArray<panda.core.Int32>

    @class
    function [..](left:panda.core.Int32, right:panda.core.Int32, step:panda.core.Int32):panda.collections.PrimitiveArray<panda.core.Int32>

    @class
    function [...](left:panda.core.Int32):panda.collections.PrimitiveArray<panda.core.Int32>

    @class
    function [...](left:panda.core.Int32, right:panda.core.Int32):panda.collections.PrimitiveArray<panda.core.Int32>

    @class
    function [...](left:panda.core.Int32, right:panda.core.Int32, step:panda.core.Int32):panda.collections.PrimitiveArray<panda.core.Int32>

    @self
    constructor(value:panda.core.Int32)

    @$wrapperMethod
    function +(x:panda.core.Int32):panda.core.Int32

    @$wrapperMethod
    function -(x:panda.core.Int32):panda.core.Int32

    @$wrapperMethod
    function *(x:panda.core.Int32):panda.core.Int32

    @$wrapperMethod
    function /(x:panda.core.Int32):panda.core.Real32

    @$wrapperMethod
    function //(x:panda.core.Int32):panda.core.Int32

    @$wrapperMethod
    function ^(x:panda.core.UInt32):panda.core.Int32

    @$wrapperMethod
    function ^(x:panda.core.Real32):panda.core.Real32

    @$wrapperMethod
    function ||(x:panda.core.Int32):panda.core.Int32

    @$wrapperMethod
    function &&(x:panda.core.Int32):panda.core.Int32

    @$wrapperMethod
    function ~~(x:panda.core.Int32):panda.core.Int32

    @$wrapperMethod
    function !!():panda.core.Int32

    @$wrapperMethod
    function >(x:panda.core.Int32):panda.core.Bit

    @$wrapperMethod
    function >=(x:panda.core.Int32):panda.core.Bit

    @$wrapperMethod
    function <(x:panda.core.Int32):panda.core.Bit

    @$wrapperMethod
    function <=(x:panda.core.Int32):panda.core.Bit

    @$wrapperMethod
    function max(other:panda.core.Int32):panda.core.Int32

    @$wrapperMethod
    function max(other:panda.core.Int64):panda.core.Int64

    @$wrapperMethod
    function max(other:panda.core.UInt32):panda.core.UInt32

    @$wrapperMethod
    function max(other:panda.core.UInt64):panda.core.UInt64

    @$wrapperMethod
    function max(other:panda.core.Real32):panda.core.Real32

    @$wrapperMethod
    function max(other:panda.core.Real64):panda.core.Real64

    @$wrapperMethod
    function min(other:panda.core.Int32):panda.core.Int32

    @$wrapperMethod
    function min(other:panda.core.Int64):panda.core.Int64

    @$wrapperMethod
    function min(other:panda.core.UInt32):panda.core.Int32

    @$wrapperMethod
    function min(other:panda.core.UInt64):panda.core.Int32

    @$wrapperMethod
    function min(other:panda.core.Real32):panda.core.Real32

    @$wrapperMethod
    function min(other:panda.core.Real64):panda.core.Real64

    @$wrapperMethod
    function sign():panda.core.Int32

    @$wrapperMethod
    function abs():panda.core.Int32

    @$wrapperMethod
    function sqrt():panda.core.Real32

    @$wrapperMethod
    function sin():panda.core.Real32

    @$wrapperMethod
    function cos():panda.core.Real32

    @$wrapperMethod
    function tan():panda.core.Real32

    @$wrapperMethod @pre(index >= 0 & index < BITS)
    function [](index:panda.core.Int32):panda.core.Bit

    @$wrapperMethod @pre(left >= 0 & left < BITS & right >= 0 & right < BITS & step != 0)
    function [..](var left:panda.core.Int32Wrapper?, var right:panda.core.Int32Wrapper?, step:panda.core.Int32):panda.core.Int32

    @external @$wrapperMethod
    function length():panda.core.Int32

    @protected @override
    function convertToString(thousandsSeparator:panda.core.CharWrapper?, minWholeDigits:panda.core.Int32Wrapper?, minFractionDigits:panda.core.Int32Wrapper?, maxFractionDigits:panda.core.Int32Wrapper?, base:panda.core.Int32, baseChars:panda.core.String):panda.core.String

    @override
    function =(o:panda.core.Object):panda.core.Bit

    @override
    function ->>():panda.core.Int8

    @override
    function ->>():panda.core.Int16

    @override
    function ->>():panda.core.Int32

    @override
    function ->>():panda.core.Int64

    @override
    function ->>():panda.core.UInt8

    @override
    function ->>():panda.core.UInt16

    @override
    function ->>():panda.core.UInt32

    @override
    function ->>():panda.core.UInt64

    @override
    function ->>():panda.core.Real32

    @override
    function ->>():panda.core.Real64

    @override
    function ->>():panda.core.String

    @class
    method $classInit()

}
package panda.core
@final
class Int64Wrapper:panda.core.SignedInteger {
    @class @final
    var MIN:panda.core.Int64

    @class @final
    var MAX:panda.core.Int64

    @class @final
    var BITS:panda.core.Int32

    @final
    var value:panda.core.Int64

    @class
    function [..](left:panda.core.Int64):panda.collections.PrimitiveArray<panda.core.Int64>

    @class
    function [..](left:panda.core.Int64, right:panda.core.Int64):panda.collections.PrimitiveArray<panda.core.Int64>

    @class
    function [..](left:panda.core.Int64, right:panda.core.Int64, step:panda.core.Int64):panda.collections.PrimitiveArray<panda.core.Int64>

    @class
    function [...](left:panda.core.Int64):panda.collections.PrimitiveArray<panda.core.Int64>

    @class
    function [...](left:panda.core.Int64, right:panda.core.Int64):panda.collections.PrimitiveArray<panda.core.Int64>

    @class
    function [...](left:panda.core.Int64, right:panda.core.Int64, step:panda.core.Int64):panda.collections.PrimitiveArray<panda.core.Int64>

    @self
    constructor(value:panda.core.Int64)

    @$wrapperMethod
    function +(x:panda.core.Int64):panda.core.Int64

    @$wrapperMethod
    function -(x:panda.core.Int64):panda.core.Int64

    @$wrapperMethod
    function *(x:panda.core.Int64):panda.core.Int64

    @$wrapperMethod
    function /(x:panda.core.Int64):panda.core.Real64

    @$wrapperMethod
    function //(x:panda.core.Int64):panda.core.Int64

    @$wrapperMethod
    function ^(x:panda.core.UInt64):panda.core.Int64

    @$wrapperMethod
    function ^(x:panda.core.Real32):panda.core.Real64

    @$wrapperMethod
    function ||(x:panda.core.Int64):panda.core.Int64

    @$wrapperMethod
    function &&(x:panda.core.Int64):panda.core.Int64

    @$wrapperMethod
    function ~~(x:panda.core.Int64):panda.core.Int64

    @$wrapperMethod
    function !!():panda.core.Int64

    @$wrapperMethod
    function >(x:panda.core.Int64):panda.core.Bit

    @$wrapperMethod
    function >=(x:panda.core.Int64):panda.core.Bit

    @$wrapperMethod
    function <(x:panda.core.Int64):panda.core.Bit

    @$wrapperMethod
    function <=(x:panda.core.Int64):panda.core.Bit

    @$wrapperMethod
    function max(other:panda.core.Int64):panda.core.Int64

    @$wrapperMethod
    function max(other:panda.core.UInt64):panda.core.UInt64

    @$wrapperMethod
    function max(other:panda.core.Real64):panda.core.Real64

    @$wrapperMethod
    function min(other:panda.core.Int64):panda.core.Int64

    @$wrapperMethod
    function min(other:panda.core.Real64):panda.core.Real64

    @$wrapperMethod
    function sign():panda.core.Int32

    @$wrapperMethod
    function abs():panda.core.Int64

    @$wrapperMethod
    function sqrt():panda.core.Real64

    @$wrapperMethod
    function sin():panda.core.Real64

    @$wrapperMethod
    function cos():panda.core.Real64

    @$wrapperMethod
    function tan():panda.core.Real64

    @$wrapperMethod @pre(index >= 0 & index < BITS)
    function [](index:panda.core.Int32):panda.core.Bit

    @$wrapperMethod @pre(left >= 0 & left < BITS & right >= 0 & right < BITS & step != 0)
    function [..](var left:panda.core.Int32Wrapper?, var right:panda.core.Int32Wrapper?, step:panda.core.Int32):panda.core.Int64

    @external @$wrapperMethod
    function length():panda.core.Int32

    @protected @override
    function convertToString(thousandsSeparator:panda.core.CharWrapper?, minWholeDigits:panda.core.Int32Wrapper?, minFractionDigits:panda.core.Int32Wrapper?, maxFractionDigits:panda.core.Int32Wrapper?, base:panda.core.Int32, baseChars:panda.core.String):panda.core.String

    @override
    function =(o:panda.core.Object):panda.core.Bit

    @override
    function ->>():panda.core.Int8

    @override
    function ->>():panda.core.Int16

    @override
    function ->>():panda.core.Int32

    @override
    function ->>():panda.core.Int64

    @override
    function ->>():panda.core.UInt8

    @override
    function ->>():panda.core.UInt16

    @override
    function ->>():panda.core.UInt32

    @override
    function ->>():panda.core.UInt64

    @override
    function ->>():panda.core.Real32

    @override
    function ->>():panda.core.Real64

    @override
    function ->>():panda.core.String

    @class
    method $classInit()

}
package panda.core
@final
class UInt8Wrapper:panda.core.UnsignedInteger {
    @class @final
    var MIN:panda.core.UInt8

    @class @final
    var MAX:panda.core.UInt8

    @class @final
    var BITS:panda.core.Int32

    @final
    var value:panda.core.UInt8

    @class
    function [..](left:panda.core.UInt8):panda.collections.PrimitiveArray<panda.core.UInt8>

    @class
    function [..](left:panda.core.UInt8, right:panda.core.UInt8):panda.collections.PrimitiveArray<panda.core.UInt8>

    @class
    function [..](left:panda.core.UInt8, right:panda.core.UInt8, step:panda.core.Int8):panda.collections.PrimitiveArray<panda.core.UInt8>

    @class
    function [...](left:panda.core.UInt8):panda.collections.PrimitiveArray<panda.core.UInt8>

    @class
    function [...](left:panda.core.UInt8, right:panda.core.UInt8):panda.collections.PrimitiveArray<panda.core.UInt8>

    @class
    function [...](left:panda.core.UInt8, right:panda.core.UInt8, step:panda.core.Int8):panda.collections.PrimitiveArray<panda.core.UInt8>

    @self
    constructor(value:panda.core.UInt8)

    @$wrapperMethod
    function +(x:panda.core.UInt8):panda.core.UInt8

    @$wrapperMethod
    function -(x:panda.core.UInt8):panda.core.UInt8

    @$wrapperMethod
    function *(x:panda.core.UInt8):panda.core.UInt8

    @$wrapperMethod
    function /(x:panda.core.UInt8):panda.core.Real32

    @$wrapperMethod
    function //(x:panda.core.UInt8):panda.core.UInt8

    @$wrapperMethod
    function ^(x:panda.core.UInt8):panda.core.UInt8

    @$wrapperMethod
    function ^(x:panda.core.Real32):panda.core.Real32

    @$wrapperMethod
    function ||(x:panda.core.UInt8):panda.core.UInt8

    @$wrapperMethod
    function &&(x:panda.core.UInt8):panda.core.UInt8

    @$wrapperMethod
    function ~~(x:panda.core.UInt8):panda.core.UInt8

    @$wrapperMethod
    function !!():panda.core.UInt8

    @$wrapperMethod
    function >(x:panda.core.UInt8):panda.core.Bit

    @$wrapperMethod
    function >=(x:panda.core.UInt8):panda.core.Bit

    @$wrapperMethod
    function <(x:panda.core.UInt8):panda.core.Bit

    @$wrapperMethod
    function <=(x:panda.core.UInt8):panda.core.Bit

    @$wrapperMethod
    function max(other:panda.core.Int32):panda.core.Int32

    @$wrapperMethod
    function max(other:panda.core.Int64):panda.core.Int64

    @$wrapperMethod
    function max(other:panda.core.UInt32):panda.core.UInt32

    @$wrapperMethod
    function max(other:panda.core.UInt64):panda.core.UInt64

    @$wrapperMethod
    function max(other:panda.core.Real32):panda.core.Real32

    @$wrapperMethod
    function max(other:panda.core.Real64):panda.core.Real64

    @$wrapperMethod
    function min(other:panda.core.Int32):panda.core.Int32

    @$wrapperMethod
    function min(other:panda.core.Int64):panda.core.Int64

    @$wrapperMethod
    function min(other:panda.core.UInt32):panda.core.UInt8

    @$wrapperMethod
    function min(other:panda.core.UInt64):panda.core.UInt8

    @$wrapperMethod
    function min(other:panda.core.Real32):panda.core.Real32

    @$wrapperMethod
    function min(other:panda.core.Real64):panda.core.Real64

    @$wrapperMethod
    function sqrt():panda.core.Real32

    @$wrapperMethod
    function sin():panda.core.Real32

    @$wrapperMethod
    function cos():panda.core.Real32

    @$wrapperMethod
    function tan():panda.core.Real32

    @$wrapperMethod @pre(index >= 0 & index < BITS)
    function [](index:panda.core.Int32):panda.core.Bit

    @$wrapperMethod @pre(left >= 0 & left < BITS & right >= 0 & right < BITS & step != 0)
    function [..](var left:panda.core.Int32Wrapper?, var right:panda.core.Int32Wrapper?, step:panda.core.Int32):panda.core.UInt8

    @external @$wrapperMethod
    function length():panda.core.Int32

    @protected @override
    function convertToString(thousandsSeparator:panda.core.CharWrapper?, minWholeDigits:panda.core.Int32Wrapper?, minFractionDigits:panda.core.Int32Wrapper?, maxFractionDigits:panda.core.Int32Wrapper?, base:panda.core.Int32, baseChars:panda.core.String):panda.core.String

    @override
    function =(o:panda.core.Object):panda.core.Bit

    @override
    function ->>():panda.core.Int8

    @override
    function ->>():panda.core.Int16

    @override
    function ->>():panda.core.Int32

    @override
    function ->>():panda.core.Int64

    @override
    function ->>():panda.core.UInt8

    @override
    function ->>():panda.core.UInt16

    @override
    function ->>():panda.core.UInt32

    @override
    function ->>():panda.core.UInt64

    @override
    function ->>():panda.core.Real32

    @override
    function ->>():panda.core.Real64

    @override
    function ->>():panda.core.String

    @class
    method $classInit()

}
package panda.core
@final
class UInt16Wrapper:panda.core.UnsignedInteger {
    @class @final
    var MIN:panda.core.UInt16

    @class @final
    var MAX:panda.core.UInt16

    @class @final
    var BITS:panda.core.Int32

    @final
    var value:panda.core.UInt16

    @class
    function [..](left:panda.core.UInt16):panda.collections.PrimitiveArray<panda.core.UInt16>

    @class
    function [..](left:panda.core.UInt16, right:panda.core.UInt16):panda.collections.PrimitiveArray<panda.core.UInt16>

    @class
    function [..](left:panda.core.UInt16, right:panda.core.UInt16, step:panda.core.Int16):panda.collections.PrimitiveArray<panda.core.UInt16>

    @class
    function [...](left:panda.core.UInt16):panda.collections.PrimitiveArray<panda.core.UInt16>

    @class
    function [...](left:panda.core.UInt16, right:panda.core.UInt16):panda.collections.PrimitiveArray<panda.core.UInt16>

    @class
    function [...](left:panda.core.UInt16, right:panda.core.UInt16, step:panda.core.Int16):panda.collections.PrimitiveArray<panda.core.UInt16>

    @self
    constructor(value:panda.core.UInt16)

    @$wrapperMethod
    function +(x:panda.core.UInt16):panda.core.UInt16

    @$wrapperMethod
    function -(x:panda.core.UInt16):panda.core.UInt16

    @$wrapperMethod
    function *(x:panda.core.UInt16):panda.core.UInt16

    @$wrapperMethod
    function /(x:panda.core.UInt16):panda.core.Real32

    @$wrapperMethod
    function //(x:panda.core.UInt16):panda.core.UInt16

    @$wrapperMethod
    function ^(x:panda.core.UInt16):panda.core.UInt16

    @$wrapperMethod
    function ^(x:panda.core.Real32):panda.core.Real32

    @$wrapperMethod
    function ||(x:panda.core.UInt16):panda.core.UInt16

    @$wrapperMethod
    function &&(x:panda.core.UInt16):panda.core.UInt16

    @$wrapperMethod
    function ~~(x:panda.core.UInt16):panda.core.UInt16

    @$wrapperMethod
    function !!():panda.core.UInt16

    @$wrapperMethod
    function >(x:panda.core.UInt16):panda.core.Bit

    @$wrapperMethod
    function >=(x:panda.core.UInt16):panda.core.Bit

    @$wrapperMethod
    function <(x:panda.core.UInt16):panda.core.Bit

    @$wrapperMethod
    function <=(x:panda.core.UInt16):panda.core.Bit

    @$wrapperMethod
    function max(other:panda.core.Int32):panda.core.Int32

    @$wrapperMethod
    function max(other:panda.core.Int64):panda.core.Int64

    @$wrapperMethod
    function max(other:panda.core.UInt32):panda.core.UInt32

    @$wrapperMethod
    function max(other:panda.core.UInt64):panda.core.UInt64

    @$wrapperMethod
    function max(other:panda.core.Real32):panda.core.Real32

    @$wrapperMethod
    function max(other:panda.core.Real64):panda.core.Real64

    @$wrapperMethod
    function min(other:panda.core.Int32):panda.core.Int32

    @$wrapperMethod
    function min(other:panda.core.Int64):panda.core.Int64

    @$wrapperMethod
    function min(other:panda.core.UInt32):panda.core.UInt32

    @$wrapperMethod
    function min(other:panda.core.UInt64):panda.core.UInt64

    @$wrapperMethod
    function min(other:panda.core.Real32):panda.core.Real32

    @$wrapperMethod
    function min(other:panda.core.Real64):panda.core.Real64

    @pre(index >= 0 & index < BITS)
    function [](index:panda.core.Int32):panda.core.Bit

    @pre(left >= 0 & left < BITS & right >= 0 & right < BITS & step != 0)
    function [..](var left:panda.core.Int32Wrapper?, var right:panda.core.Int32Wrapper?, step:panda.core.Int32):panda.core.UInt16

    @external
    function length():panda.core.Int32

    @protected @override
    function convertToString(thousandsSeparator:panda.core.CharWrapper?, minWholeDigits:panda.core.Int32Wrapper?, minFractionDigits:panda.core.Int32Wrapper?, maxFractionDigits:panda.core.Int32Wrapper?, base:panda.core.Int32, baseChars:panda.core.String):panda.core.String

    @override
    function =(o:panda.core.Object):panda.core.Bit

    @override
    function ->>():panda.core.Int8

    @override
    function ->>():panda.core.Int16

    @override
    function ->>():panda.core.Int32

    @override
    function ->>():panda.core.Int64

    @override
    function ->>():panda.core.UInt8

    @override
    function ->>():panda.core.UInt16

    @override
    function ->>():panda.core.UInt32

    @override
    function ->>():panda.core.UInt64

    @override
    function ->>():panda.core.Real32

    @override
    function ->>():panda.core.Real64

    @override
    function ->>():panda.core.String

    @class
    method $classInit()

}
package panda.core
@final
class UInt32Wrapper:panda.core.UnsignedInteger {
    @class @final
    var MIN:panda.core.UInt32

    @class @final
    var MAX:panda.core.UInt32

    @class @final
    var BITS:panda.core.Int32

    @final
    var value:panda.core.UInt32

    @class
    function [..](left:panda.core.UInt32):panda.collections.PrimitiveArray<panda.core.UInt32>

    @class
    function [..](left:panda.core.UInt32, right:panda.core.UInt32):panda.collections.PrimitiveArray<panda.core.UInt32>

    @class
    function [..](left:panda.core.UInt32, right:panda.core.UInt32, step:panda.core.Int32):panda.collections.PrimitiveArray<panda.core.UInt32>

    @class
    function [...](left:panda.core.UInt32):panda.collections.PrimitiveArray<panda.core.UInt32>

    @class
    function [...](left:panda.core.UInt32, right:panda.core.UInt32):panda.collections.PrimitiveArray<panda.core.UInt32>

    @class
    function [...](left:panda.core.UInt32, right:panda.core.UInt32, step:panda.core.Int32):panda.collections.PrimitiveArray<panda.core.UInt32>

    @self
    constructor(value:panda.core.UInt32)

    @$wrapperMethod
    function +(x:panda.core.UInt32):panda.core.UInt32

    @$wrapperMethod
    function -(x:panda.core.UInt32):panda.core.UInt32

    @$wrapperMethod
    function *(x:panda.core.UInt32):panda.core.UInt32

    @$wrapperMethod
    function /(x:panda.core.UInt32):panda.core.Real32

    @$wrapperMethod
    function //(x:panda.core.UInt32):panda.core.UInt32

    @$wrapperMethod
    function ^(x:panda.core.UInt32):panda.core.UInt32

    @$wrapperMethod
    function ^(x:panda.core.Real32):panda.core.Real32

    @$wrapperMethod
    function ||(x:panda.core.UInt32):panda.core.UInt32

    @$wrapperMethod
    function &&(x:panda.core.UInt32):panda.core.UInt32

    @$wrapperMethod
    function ~~(x:panda.core.UInt32):panda.core.UInt32

    @$wrapperMethod
    function !!():panda.core.UInt32

    @$wrapperMethod
    function >(x:panda.core.UInt32):panda.core.Bit

    @$wrapperMethod
    function >=(x:panda.core.UInt32):panda.core.Bit

    @$wrapperMethod
    function <(x:panda.core.UInt32):panda.core.Bit

    @$wrapperMethod
    function <=(x:panda.core.UInt32):panda.core.Bit

    @$wrapperMethod
    function max(other:panda.core.Int64):panda.core.Int64

    @$wrapperMethod
    function max(other:panda.core.UInt32):panda.core.UInt32

    @$wrapperMethod
    function max(other:panda.core.UInt64):panda.core.UInt64

    @$wrapperMethod
    function max(other:panda.core.Real32):panda.core.Real32

    @$wrapperMethod
    function max(other:panda.core.Real64):panda.core.Real64

    @$wrapperMethod
    function min(other:panda.core.Int64):panda.core.Int64

    @$wrapperMethod
    function min(other:panda.core.UInt32):panda.core.UInt32

    @$wrapperMethod
    function min(other:panda.core.UInt64):panda.core.UInt64

    @$wrapperMethod
    function min(other:panda.core.Real32):panda.core.Real32

    @$wrapperMethod
    function min(other:panda.core.Real64):panda.core.Real64

    @$wrapperMethod
    function sqrt():panda.core.Real32

    @$wrapperMethod
    function sin():panda.core.Real32

    @$wrapperMethod
    function cos():panda.core.Real32

    @$wrapperMethod
    function tan():panda.core.Real32

    @pre(index >= 0 & index < BITS)
    function [](index:panda.core.Int32):panda.core.Bit

    @pre(left >= 0 & left < BITS & right >= 0 & right < BITS & step != 0)
    function [..](var left:panda.core.Int32Wrapper?, var right:panda.core.Int32Wrapper?, step:panda.core.Int32):panda.core.UInt32

    @external
    function length():panda.core.Int32

    @protected @override
    function convertToString(thousandsSeparator:panda.core.CharWrapper?, minWholeDigits:panda.core.Int32Wrapper?, minFractionDigits:panda.core.Int32Wrapper?, maxFractionDigits:panda.core.Int32Wrapper?, base:panda.core.Int32, baseChars:panda.core.String):panda.core.String

    @override
    function =(o:panda.core.Object):panda.core.Bit

    @override
    function ->>():panda.core.Int8

    @override
    function ->>():panda.core.Int16

    @override
    function ->>():panda.core.Int32

    @override
    function ->>():panda.core.Int64

    @override
    function ->>():panda.core.UInt8

    @override
    function ->>():panda.core.UInt16

    @override
    function ->>():panda.core.UInt32

    @override
    function ->>():panda.core.UInt64

    @override
    function ->>():panda.core.Real32

    @override
    function ->>():panda.core.Real64

    @override
    function ->>():panda.core.String

    @class
    method $classInit()

}
package panda.core
@final
class UInt64Wrapper:panda.core.UnsignedInteger {
    @class @final
    var MIN:panda.core.UInt64

    @class @final
    var MAX:panda.core.UInt64

    @class @final
    var BITS:panda.core.Int32

    @final
    var value:panda.core.UInt64

    @class
    function [..](left:panda.core.UInt64):panda.collections.PrimitiveArray<panda.core.UInt64>

    @class
    function [..](left:panda.core.UInt64, right:panda.core.UInt64):panda.collections.PrimitiveArray<panda.core.UInt64>

    @class @math(overflow)
    function [..](left:panda.core.UInt64, right:panda.core.UInt64, step:panda.core.Int64):panda.collections.PrimitiveArray<panda.core.UInt64>

    @class @math(overflow)
    function [..](left:panda.core.UInt64, right:panda.core.UInt64, step:panda.core.UInt64):panda.collections.PrimitiveArray<panda.core.UInt64>

    @class
    function [...](left:panda.core.UInt64):panda.collections.PrimitiveArray<panda.core.UInt64>

    @class
    function [...](left:panda.core.UInt64, right:panda.core.UInt64):panda.collections.PrimitiveArray<panda.core.UInt64>

    @class @math(overflow)
    function [...](left:panda.core.UInt64, right:panda.core.UInt64, step:panda.core.Int64):panda.collections.PrimitiveArray<panda.core.UInt64>

    @class @math(overflow)
    function [...](left:panda.core.UInt64, right:panda.core.UInt64, step:panda.core.UInt64):panda.collections.PrimitiveArray<panda.core.UInt64>

    @self
    constructor(value:panda.core.UInt64)

    @$wrapperMethod
    function +(x:panda.core.UInt64):panda.core.UInt64

    @$wrapperMethod
    function -(x:panda.core.UInt64):panda.core.UInt64

    @$wrapperMethod
    function *(x:panda.core.UInt64):panda.core.UInt64

    @$wrapperMethod
    function /(x:panda.core.UInt64):panda.core.Real64

    @$wrapperMethod
    function //(x:panda.core.UInt64):panda.core.UInt64

    @$wrapperMethod
    function ^(x:panda.core.UInt64):panda.core.UInt64

    @$wrapperMethod
    function ^(x:panda.core.Real64):panda.core.Real64

    @$wrapperMethod
    function ||(x:panda.core.UInt64):panda.core.UInt64

    @$wrapperMethod
    function &&(x:panda.core.UInt64):panda.core.UInt64

    @$wrapperMethod
    function ~~(x:panda.core.UInt64):panda.core.UInt64

    @$wrapperMethod
    function !!():panda.core.UInt64

    @$wrapperMethod
    function >(x:panda.core.UInt64):panda.core.Bit

    @$wrapperMethod
    function >=(x:panda.core.UInt64):panda.core.Bit

    @$wrapperMethod
    function <(x:panda.core.UInt64):panda.core.Bit

    @$wrapperMethod
    function <=(x:panda.core.UInt64):panda.core.Bit

    @$wrapperMethod
    function max(other:panda.core.UInt64):panda.core.UInt64

    @$wrapperMethod
    function max(other:panda.core.Real64):panda.core.Real64

    @$wrapperMethod
    function min(other:panda.core.UInt64):panda.core.UInt64

    @$wrapperMethod
    function min(other:panda.core.Real64):panda.core.Real64

    @$wrapperMethod
    function sqrt():panda.core.Real64

    @$wrapperMethod
    function sin():panda.core.Real64

    @$wrapperMethod
    function cos():panda.core.Real64

    @$wrapperMethod
    function tan():panda.core.Real64

    @pre(index >= 0 & index < BITS)
    function [](index:panda.core.Int32):panda.core.Bit

    @pre(left >= 0 & left < BITS & right >= 0 & right < BITS & step != 0)
    function [..](var left:panda.core.Int32Wrapper?, var right:panda.core.Int32Wrapper?, step:panda.core.Int32):panda.core.UInt64

    @external
    function length():panda.core.Int32

    @protected @override
    function convertToString(thousandsSeparator:panda.core.CharWrapper?, minWholeDigits:panda.core.Int32Wrapper?, minFractionDigits:panda.core.Int32Wrapper?, maxFractionDigits:panda.core.Int32Wrapper?, base:panda.core.Int32, baseChars:panda.core.String):panda.core.String

    @override
    function =(o:panda.core.Object):panda.core.Bit

    @override
    function ->>():panda.core.Int8

    @override
    function ->>():panda.core.Int16

    @override
    function ->>():panda.core.Int32

    @override
    function ->>():panda.core.Int64

    @override
    function ->>():panda.core.UInt8

    @override
    function ->>():panda.core.UInt16

    @override
    function ->>():panda.core.UInt32

    @override
    function ->>():panda.core.UInt64

    @override
    function ->>():panda.core.Real32

    @override
    function ->>():panda.core.Real64

    @override
    function ->>():panda.core.String

    @class
    method $classInit()

}
package panda.core
@final
class Real32Wrapper:panda.core.RealNumber {
    @final
    var value:panda.core.Real32

    @class
    function [..](left:panda.core.Real32, right:panda.core.Real32):panda.collections.PrimitiveArray<panda.core.Real32>

    @class
    function [..](left:panda.core.Real32, right:panda.core.Real32, step:panda.core.Real32):panda.collections.PrimitiveArray<panda.core.Real32>

    @class
    function [...](left:panda.core.Real32, right:panda.core.Real32):panda.collections.PrimitiveArray<panda.core.Real32>

    @class
    function [...](left:panda.core.Real32, right:panda.core.Real32, step:panda.core.Real32):panda.collections.PrimitiveArray<panda.core.Real32>

    @self
    constructor(value:panda.core.Real32)

    @$wrapperMethod
    function +(x:panda.core.Real32):panda.core.Real32

    @$wrapperMethod
    function -(x:panda.core.Real32):panda.core.Real32

    @$wrapperMethod
    function *(x:panda.core.Real32):panda.core.Real32

    @$wrapperMethod
    function /(x:panda.core.Real32):panda.core.Real32

    @$wrapperMethod
    function ^(x:panda.core.Real32):panda.core.Real32

    @$wrapperMethod
    function >(x:panda.core.Real32):panda.core.Bit

    @$wrapperMethod
    function >=(x:panda.core.Real32):panda.core.Bit

    @$wrapperMethod
    function <(x:panda.core.Real32):panda.core.Bit

    @$wrapperMethod
    function <=(x:panda.core.Real32):panda.core.Bit

    @$wrapperMethod
    function max(other:panda.core.Real32):panda.core.Real32

    @$wrapperMethod
    function max(other:panda.core.Real64):panda.core.Real64

    @$wrapperMethod
    function min(other:panda.core.Real32):panda.core.Real32

    @$wrapperMethod
    function min(other:panda.core.Real64):panda.core.Real64

    @$wrapperMethod
    function sign():panda.core.Int32

    @$wrapperMethod
    function abs():panda.core.Real32

    @external @$wrapperMethod
    function isInfinite():panda.core.Bit

    @external @$wrapperMethod
    function isNaN():panda.core.Bit

    @external @$wrapperMethod
    function sqrt():panda.core.Real32

    @external @$wrapperMethod
    function sin():panda.core.Real32

    @external @$wrapperMethod
    function cos():panda.core.Real32

    
    function tan():panda.core.Real32

    @protected @override
    function convertToString(thousandsSeparator:panda.core.CharWrapper?, minWholeDigits:panda.core.Int32Wrapper?, minFractionDigits:panda.core.Int32Wrapper?, maxFractionDigits:panda.core.Int32Wrapper?, base:panda.core.Int32, baseChars:panda.core.String):panda.core.String

    @override
    function =(o:panda.core.Object):panda.core.Bit

    @override
    function ->>():panda.core.Int8

    @override
    function ->>():panda.core.Int16

    @override
    function ->>():panda.core.Int32

    @override
    function ->>():panda.core.Int64

    @override
    function ->>():panda.core.UInt8

    @override
    function ->>():panda.core.UInt16

    @override
    function ->>():panda.core.UInt32

    @override
    function ->>():panda.core.UInt64

    @override
    function ->>():panda.core.Real32

    @override
    function ->>():panda.core.Real64
}
package panda.core
@final
class Real64Wrapper:panda.core.RealNumber {
    @class @final
    var E:panda.core.Real64

    @class @final
    var PI:panda.core.Real64

    @final
    var value:panda.core.Real64

    @class
    function [..](left:panda.core.Real64, right:panda.core.Real64):panda.collections.PrimitiveArray<panda.core.Real64>

    @class
    function [..](left:panda.core.Real64, right:panda.core.Real64, step:panda.core.Real64):panda.collections.PrimitiveArray<panda.core.Real64>

    @class
    function [...](left:panda.core.Real64, right:panda.core.Real64):panda.collections.PrimitiveArray<panda.core.Real64>

    @class
    function [...](left:panda.core.Real64, right:panda.core.Real64, step:panda.core.Real64):panda.collections.PrimitiveArray<panda.core.Real64>

    @class @external
    function atan2(y:panda.core.Real64, x:panda.core.Real64):panda.core.Real64

    @self
    constructor(value:panda.core.Real64)

    @$wrapperMethod
    function +(x:panda.core.Real64):panda.core.Real64

    @$wrapperMethod
    function -(x:panda.core.Real64):panda.core.Real64

    @$wrapperMethod
    function *(x:panda.core.Real64):panda.core.Real64

    @$wrapperMethod
    function /(x:panda.core.Real64):panda.core.Real64

    @$wrapperMethod
    function ^(x:panda.core.Real64):panda.core.Real64

    @$wrapperMethod
    function >(x:panda.core.Real64):panda.core.Bit

    @$wrapperMethod
    function >=(x:panda.core.Real64):panda.core.Bit

    @$wrapperMethod
    function <(x:panda.core.Real64):panda.core.Bit

    @$wrapperMethod
    function <=(x:panda.core.Real64):panda.core.Bit

    @$wrapperMethod
    function max(other:panda.core.Real64):panda.core.Real64

    @$wrapperMethod
    function min(other:panda.core.Real64):panda.core.Real64

    @$wrapperMethod
    function sign():panda.core.Int32

    @$wrapperMethod
    function abs():panda.core.Real64

    @external @$wrapperMethod
    function isInfinite():panda.core.Bit

    @external @$wrapperMethod
    function isNaN():panda.core.Bit

    @external @$wrapperMethod
    function sqrt():panda.core.Real64

    @external @$wrapperMethod
    function sin():panda.core.Real64

    @external @$wrapperMethod
    function cos():panda.core.Real64

    
    function tan():panda.core.Real64

    @protected @override
    function convertToString(thousandsSeparator:panda.core.CharWrapper?, minWholeDigits:panda.core.Int32Wrapper?, minFractionDigits:panda.core.Int32Wrapper?, maxFractionDigits:panda.core.Int32Wrapper?, base:panda.core.Int32, baseChars:panda.core.String):panda.core.String

    @override
    function =(o:panda.core.Object):panda.core.Bit

    @override
    function ->>():panda.core.Int8

    @override
    function ->>():panda.core.Int16

    @override
    function ->>():panda.core.Int32

    @override
    function ->>():panda.core.Int64

    @override
    function ->>():panda.core.UInt8

    @override
    function ->>():panda.core.UInt16

    @override
    function ->>():panda.core.UInt32

    @override
    function ->>():panda.core.UInt64

    @override
    function ->>():panda.core.Real32

    @override
    function ->>():panda.core.Real64

    @override
    function ->>():panda.core.String

    @class
    method $classInit()

}
package panda.core
@final
class BitWrapper:panda.core.Primitive {
    @final
    var value:panda.core.Bit

    @self
    constructor(value:panda.core.Bit)

    @override
    function =(o:panda.core.Object):panda.core.Bit

    @override @preOr(fmt = "" | fmt = "panda")
    function format(fmt:panda.core.String):panda.core.String

    
    function ->>():panda.core.Bit
}
package panda.core
@final
class CharWrapper:panda.core.Primitive {
    @class @final
    var MIN:panda.core.Char

    @class @final
    var MAX:panda.core.Char

    @final
    var value:panda.core.Char

    @class
    function [..](left:panda.core.Char):panda.collections.PrimitiveArray<panda.core.Char>

    @class
    function [..](left:panda.core.Char, right:panda.core.Char):panda.collections.PrimitiveArray<panda.core.Char>

    @class
    function [..](left:panda.core.Char, right:panda.core.Char, step:panda.core.Int16):panda.collections.PrimitiveArray<panda.core.Char>

    @class
    function [...](left:panda.core.Char):panda.collections.PrimitiveArray<panda.core.Char>

    @class
    function [...](left:panda.core.Char, right:panda.core.Char):panda.collections.PrimitiveArray<panda.core.Char>

    @class
    function [...](left:panda.core.Char, right:panda.core.Char, step:panda.core.Int16):panda.collections.PrimitiveArray<panda.core.Char>

    @self
    constructor(value:panda.core.Char)

    
    function isWhitespace():panda.core.Bit

    @$wrapperMethod
    function *(n:panda.core.Int32):panda.core.String

    @class
    function *(n:panda.core.Int32, c:panda.core.Char):panda.core.String

    @override
    function =(o:panda.core.Object):panda.core.Bit

    @override
    function ->>():panda.core.String

    
    function ->>():panda.core.Char

    @override @preOr(fmt = "" | fmt = "panda")
    function format(fmt:panda.core.String):panda.core.String

    @class
    method $classInit()

}
package panda.core

class AssertionError:panda.core.SafetyError {
    @self
    constructor()

    @self
    constructor(message:panda.core.String)
}
package panda.core

class CastError:panda.core.Error {
    @self
    constructor(message:panda.core.String)
}
package panda.core
@final
class Class:panda.core.Immutable {
    @final
    var name:panda.core.String

    @final
    var superclass:panda.core.Class

    @private @final
    var containsPointers:panda.core.Bit

    @private @final
    var overridesFinalize:panda.core.Bit

    @private @self
    constructor()

    
    function simpleName():panda.core.String

    @override
    function format(fmt:panda.core.String):panda.core.String
}
package panda.core
@abstract
class Enumeration:panda.core.Value {
    @self
    constructor()
}
package panda.core

class StackTraceEntry:panda.core.Value {
    @final
    var fileName:panda.core.String

    @final
    var className:panda.core.String

    @final
    var methodName:panda.core.String

    @final
    var line:panda.core.Int32

    @override
    function format(fmt:panda.core.String):panda.core.String

    @self
    constructor()
}
package panda.core

class Error:panda.core.Immutable {
    @final
    var message:panda.core.String

    @final
    var stack:panda.collections.ImmutablePrimitiveArray<panda.core.StackTraceEntry>

    @self
    constructor()

    @self
    constructor(message:panda.core.String)

    @override
    function format(fmt:panda.core.String):panda.core.String

    @protected @external
    function getStackTrace():panda.collections.ImmutablePrimitiveArray<panda.core.StackTraceEntry>
}
package panda.core

class Exception:panda.core.Error {
    @self
    constructor()

    @self
    constructor(message:panda.core.String)
}
package panda.core
@abstract
class Immutable:panda.core.Object {
    @self
    constructor()
}
package panda.core
@abstract
class Integer:panda.core.Number {
    @self
    constructor()
}
package panda.core

class InternalError:panda.core.AssertionError {
    @self
    constructor()

    @self
    constructor(message:panda.core.String)
}
package panda.core

class InvariantError:panda.core.AssertionError {
    @self
    constructor()

    @self
    constructor(message:panda.core.String)
}
package panda.core
@final
class Matcher:panda.core.Object {
    @private @class @final
    var REPLACEMENT_GROUPS:panda.core.RegularExpression

    @private
    var _searchText:panda.core.String

    @private
    var regex:panda.core.RegularExpression

    @private
    var matched:panda.core.Bit

    @private
    var replacementIndex:panda.core.Int32

    @self
    constructor(regex:panda.core.RegularExpression, searchText:panda.core.String)

    @self
    method searchText:=(text:panda.core.String)

    @self
    method matches():panda.core.Bit

    @self @pre(matched | replacementIndex = 0)
    method find():panda.core.Bit

    @self
    method find(start:panda.core.Int32):panda.core.Bit

    @pre(matched)
    function group(i:panda.core.Int32):panda.core.String

    @pre(matched)
    function groupCount():panda.core.Int32

    @pre(matched)
    function start():panda.core.Int32

    @pre(matched)
    function end():panda.core.Int32

    @limited @pre(matched)
    method appendReplacement(target:panda.core.MutableString, replacement:panda.core.String)

    @limited
    method appendReplacement(target:panda.core.MutableString, replacement:panda.core.String, allowGroupReferences:panda.core.Bit)

    @limited
    method appendTail(target:panda.core.MutableString)

    
    method close()

    @private @class @external
    method setText(nativeHandle:$NativePointer, text:panda.core.String)

    @private @class @external
    method matches(nativeHandle:$NativePointer):panda.core.Bit

    @private @class @external
    method find(nativeHandle:$NativePointer, startIndex:panda.core.Int32):panda.core.Bit

    @private @class @external
    function group(nativeHandle:$NativePointer, group:panda.core.Int32):panda.core.String

    @private @class @external
    function groupCount(nativeHandle:$NativePointer):panda.core.Int32

    @private @class @external
    function start(nativeHandle:$NativePointer):panda.core.Int32

    @private @class @external
    function end(nativeHandle:$NativePointer):panda.core.Int32

    
    function searchText():panda.core.String

    @class
    method $classInit()

}
package panda.core

class MathError:panda.core.SafetyError {
    @self
    constructor()

    @self
    constructor(message:panda.core.String)
}
package panda.core

class Method:panda.core.Immutable {
    @protected @final
    var $mutableVersion:panda.core.MutableMethod

    @self
    constructor($mutableVersion:panda.core.MutableMethod)

    
    function ->>():panda.core.MutableMethod
}
package panda.core

class MutableMethod:panda.core.Object {
    @self
    constructor()

    
    method dummy()
}
package panda.core
@final
class MutableString:panda.collections.Array<panda.core.Char> {
    @self
    constructor()

    @self
    constructor(s:panda.core.String)

    @self
    method [..]:=(start:panda.core.Int32, end:panda.core.Int32, step:panda.core.Int32, s:panda.core.String)

    @self
    method [..]:=(start:panda.core.Int32Wrapper?, end:panda.core.Int32Wrapper?, step:panda.core.Int32, s:panda.core.String)

    @self
    method [...]:=(start:panda.core.Int32, end:panda.core.Int32, step:panda.core.Int32, s:panda.core.String)

    @self
    method [...]:=(start:panda.core.Int32Wrapper?, end:panda.core.Int32Wrapper?, step:panda.core.Int32, s:panda.core.String)

    @self
    method insert(s:panda.core.String, index:panda.core.Int32)

    @override @self
    method insert(c:panda.core.Char, index:panda.core.Int32)

    @self
    method remove(start:panda.core.Int32, end:panda.core.Int32)

    @self
    method replaceInPlace(search:panda.core.String, replacement:panda.core.String)

    @self
    method replaceInPlace(regex:panda.core.RegularExpression, replacement:panda.core.String)

    @self
    method replaceInPlace(regex:panda.core.RegularExpression, replacement:panda.core.String, allowGroupReferences:panda.core.Bit)

    @self
    method replaceInPlace(search:panda.core.RegularExpression, replacement:(panda.core.String)=>(panda.core.Object))

    @self
    method replaceInPlace(search:panda.core.RegularExpression, replacement:(panda.collections.PrimitiveArray<panda.core.String>)=>(panda.core.Object))

    @self
    method delete(search:panda.core.String)

    @self
    method delete(regex:panda.core.RegularExpression)

    @self
    method append(c:panda.core.Char)

    @self
    method append(s->>panda.core.String)
@post(length = @pre(length) + s.length)

    
    function startsWith(s:panda.core.String):panda.core.Bit

    
    function endsWith(s:panda.core.String):panda.core.Bit

    
    function contains(s:panda.core.String):panda.core.Bit

    
    function indexOf(s:panda.core.String):panda.core.Int32Wrapper?

    @pre(start >= 0) @pre(start <= length)
    function indexOf(s:panda.core.String, start:panda.core.Int32):panda.core.Int32Wrapper?
@post(@return = null | @return < length)

    
    function [..](start:panda.core.Int32, end:panda.core.Int32):panda.core.String

    @override
    function [..](start:panda.core.Int32, end:panda.core.Int32, step:panda.core.Int32):panda.core.String

    @override
    function [..](start:panda.core.Int32Wrapper?, end:panda.core.Int32Wrapper?, step:panda.core.Int32):panda.core.String

    
    function [...](start:panda.core.Int32, end:panda.core.Int32):panda.core.String

    @override
    function [...](start:panda.core.Int32, end:panda.core.Int32, step:panda.core.Int32):panda.core.String

    @override
    function [...](start:panda.core.Int32Wrapper?, end:panda.core.Int32Wrapper?, step:panda.core.Int32):panda.core.String

    @override @math(overflow)
    function hash():panda.core.Int32

    @override
    function =(o:panda.core.Object):panda.core.Bit

    @override
    function ->>():panda.core.String

    @override
    function format(fmt:panda.core.String):panda.core.String

    @class @safeReturn
    function ->>(s->>panda.core.String):panda.core.MutableString
}
package panda.core

class NotSupportedException:panda.core.Exception {
    @self
    constructor()

    @self
    constructor(message:panda.core.String)
}
package panda.core
@abstract
class Number:panda.core.Primitive {
    @private @class @final
    var FORMAT_PATTERN:panda.core.RegularExpression

    @abstract
    function convertToString(thousandsSeparator:panda.core.CharWrapper?, minWholeDigits:panda.core.Int32Wrapper?, minFractionDigits:panda.core.Int32Wrapper?, maxFractionDigits:panda.core.Int32Wrapper?, base:panda.core.Int32, baseChars:panda.core.String):panda.core.String

    @protected @class
    function convertToString(var value:panda.core.Int64, thousandsSeparator:panda.core.CharWrapper?, var minWholeDigits:panda.core.Int32Wrapper?, minFractionDigits:panda.core.Int32Wrapper?, maxFractionDigits:panda.core.Int32Wrapper?, base:panda.core.Int32, baseChars:panda.core.String):panda.core.String

    @protected @class
    function convertToString(var value:panda.core.UInt64, thousandsSeparator:panda.core.CharWrapper?, var minWholeDigits:panda.core.Int32Wrapper?, minFractionDigits:panda.core.Int32Wrapper?, maxFractionDigits:panda.core.Int32Wrapper?, base:panda.core.Int32, baseChars:panda.core.String):panda.core.String

    @private @class @limited
    method roundUp(m:panda.core.MutableString, i:panda.core.Int32)

    @protected @class
    function convertToString(value:panda.core.Real64, thousandsSeparator:panda.core.CharWrapper?, minWholeDigits:panda.core.Int32Wrapper?, minFractionDigits:panda.core.Int32Wrapper?, maxFractionDigits:panda.core.Int32Wrapper?, base:panda.core.Int32, baseChars:panda.core.String):panda.core.String

    @override @preOr(true)
    function format(var fmt:panda.core.String):panda.core.String

    @abstract
    function ->>():panda.core.Int8

    @abstract
    function ->>():panda.core.Int16

    @abstract
    function ->>():panda.core.Int32

    @abstract
    function ->>():panda.core.Int64

    @abstract
    function ->>():panda.core.UInt8

    @abstract
    function ->>():panda.core.UInt16

    @abstract
    function ->>():panda.core.UInt32

    @abstract
    function ->>():panda.core.UInt64

    @abstract
    function ->>():panda.core.Real32

    @abstract
    function ->>():panda.core.Real64

    @override
    function hash():panda.core.Int32

    @self
    constructor()

    @class
    method $classInit()

}
package panda.core
@abstract
class Object {
    @private
    var cl:panda.core.Class

    @final
    function $class():panda.core.Class

    @external
    function hash():panda.core.Int32

    
    function =(o:panda.core.Object):panda.core.Bit

    
    function ->>():panda.core.String

    @pre(fmt.length = 0)
    function format(fmt:panda.core.String):panda.core.String

    
    method finalize()

    @class
    function parse(inStream:panda.io.InputStream):panda.core.Object?

    @self
    constructor()
}
package panda.core

class OverflowError:panda.core.SafetyError {
    @self
    constructor()

    @self
    constructor(message:panda.core.String)
}
package panda.core
@final
class Panda:panda.core.Object {
    @class
    method format(o:panda.core.Object?, fmt:panda.core.String):panda.core.String

    @class @external
    method currentTime():panda.core.Int64

    @class
    function pow(var a:panda.core.Int32, var b:panda.core.UInt32):panda.core.Int32

    @class
    function pow(var a:panda.core.Int64, var b:panda.core.UInt32):panda.core.Int64

    @class
    function pow(var a:panda.core.UInt32, var b:panda.core.UInt32):panda.core.UInt32

    @class
    function pow(var a:panda.core.UInt64, var b:panda.core.UInt64):panda.core.UInt64

    @class @external
    function pow(a:panda.core.Real32, b:panda.core.Int32):panda.core.Real32

    @class @external
    function pow(a:panda.core.Real32, b:panda.core.Real32):panda.core.Real32

    @class @external
    function pow(a:panda.core.Real64, b:panda.core.Int32):panda.core.Real64

    @class @external
    function pow(a:panda.core.Real64, b:panda.core.Real64):panda.core.Real64

    @class
    method nullableEquals(o1:panda.core.Object?, o2:panda.core.Object?):panda.core.Bit

    @class
    function id(o:panda.core.Object):panda.core.String

    @class
    method dumpStack()

    @class
    method log(o:panda.core.Object)

    @class @external
    method debugWrite(i:panda.core.Int32)

    @class @external
    method debugWrite(o:panda.core.Object)

    @class @external
    method debugWritePointer(o:panda.core.Object)

    @class
    function instanceOfInt8(i:panda.core.Int64):panda.core.Bit

    @class
    function instanceOfInt8(i:panda.core.UInt64):panda.core.Bit

    @class
    function instanceOfInt8(o:panda.core.Object?, nullable:panda.core.Bit):panda.core.Bit

    @class
    function instanceOfInt16(i:panda.core.Int64):panda.core.Bit

    @class
    function instanceOfInt16(i:panda.core.UInt64):panda.core.Bit

    @class
    function instanceOfInt16(o:panda.core.Object?, nullable:panda.core.Bit):panda.core.Bit

    @class
    function instanceOfInt32(i:panda.core.Int64):panda.core.Bit

    @class
    function instanceOfInt32(i:panda.core.UInt64):panda.core.Bit

    @class
    function instanceOfInt32(o:panda.core.Object?, nullable:panda.core.Bit):panda.core.Bit

    @class
    function instanceOfInt64(i:panda.core.Int64):panda.core.Bit

    @class
    function instanceOfInt64(i:panda.core.UInt64):panda.core.Bit

    @class
    function instanceOfInt64(o:panda.core.Object?, nullable:panda.core.Bit):panda.core.Bit

    @class
    function instanceOfUInt8(i:panda.core.Int64):panda.core.Bit

    @class
    function instanceOfUInt8(i:panda.core.UInt64):panda.core.Bit

    @class
    function instanceOfUInt8(o:panda.core.Object?, nullable:panda.core.Bit):panda.core.Bit

    @class
    function instanceOfUInt16(i:panda.core.Int64):panda.core.Bit

    @class
    function instanceOfUInt16(i:panda.core.UInt64):panda.core.Bit

    @class
    function instanceOfUInt16(o:panda.core.Object?, nullable:panda.core.Bit):panda.core.Bit

    @class
    function instanceOfUInt32(i:panda.core.Int64):panda.core.Bit

    @class
    function instanceOfUInt32(i:panda.core.UInt64):panda.core.Bit

    @class
    function instanceOfUInt32(o:panda.core.Object?, nullable:panda.core.Bit):panda.core.Bit

    @class
    function instanceOfUInt64(i:panda.core.Int64):panda.core.Bit

    @class
    function instanceOfUInt64(i:panda.core.UInt64):panda.core.Bit

    @class
    function instanceOfUInt64(o:panda.core.Object?, nullable:panda.core.Bit):panda.core.Bit

    @class
    function instanceOfReal32(o:panda.core.Object?, nullable:panda.core.Bit):panda.core.Bit

    @class
    function instanceOfReal64(o:panda.core.Object?, nullable:panda.core.Bit):panda.core.Bit

    @class
    function instanceOfBit(b:panda.core.Bit):panda.core.Bit

    @class
    function instanceOfBit(o:panda.core.Object?, nullable:panda.core.Bit):panda.core.Bit

    @class
    function instanceOfChar(i:panda.core.Int64):panda.core.Bit

    @class
    function instanceOfChar(i:panda.core.UInt64):panda.core.Bit

    @class
    function instanceOfChar(c:panda.core.Char):panda.core.Bit

    @class
    function instanceOfChar(o:panda.core.Object?, nullable:panda.core.Bit):panda.core.Bit

    @class
    method checkCast(o:panda.core.Object?, c:panda.core.Class, nullable:panda.core.Bit)

    @private @class @limited
    method swap(a:panda.collections.PrimitiveArray<panda.core.Object>, i1:panda.core.Int32, i2:panda.core.Int32)

    @private @class @limited
    method sort(a:panda.collections.PrimitiveArray<panda.core.Object>, left:panda.core.Int32, right:panda.core.Int32, greater:(panda.core.Object,panda.core.Object)=>(panda.core.Bit))

    @class @limited
    method sort(a:panda.collections.PrimitiveArray<panda.core.Object>, greater:(panda.core.Object,panda.core.Object)=>(panda.core.Bit))

    @class
    method getThreadLocalBit(index:panda.core.Int32, initializer:()=>(panda.core.Bit)):panda.core.Bit

    @class
    method getThreadLocalInt8(index:panda.core.Int32, initializer:$NativePointer):panda.core.Int8

    @class
    method getThreadLocalInt16(index:panda.core.Int32, initializer:$NativePointer):panda.core.Int16

    @class
    method getThreadLocalInt32(index:panda.core.Int32, initializer:$NativePointer):panda.core.Int32

    @class
    method getThreadLocalInt64(index:panda.core.Int32, initializer:$NativePointer):panda.core.Int64

    @class
    method getThreadLocalChar(index:panda.core.Int32, initializer:$NativePointer):panda.core.Char

    @class
    method getThreadLocalReal32(index:panda.core.Int32, initializer:$NativePointer):panda.core.Real32

    @class
    method getThreadLocalReal64(index:panda.core.Int32, initializer:$NativePointer):panda.core.Real64

    @class
    method getThreadLocalObject(index:panda.core.Int32, initializer:$NativePointer):panda.core.Object?

    @class
    method setThreadLocalBit(index:panda.core.Int32, value:panda.core.Bit)

    @class
    method setThreadLocalInt8(index:panda.core.Int32, value:panda.core.Int8)

    @class
    method setThreadLocalInt16(index:panda.core.Int32, value:panda.core.Int16)

    @class
    method setThreadLocalInt32(index:panda.core.Int32, value:panda.core.Int32)

    @class
    method setThreadLocalInt64(index:panda.core.Int32, value:panda.core.Int64)

    @class
    method setThreadLocalChar(index:panda.core.Int32, value:panda.core.Char)

    @class
    method setThreadLocalReal32(index:panda.core.Int32, value:panda.core.Real32)

    @class
    method setThreadLocalReal64(index:panda.core.Int32, value:panda.core.Real64)

    @class
    method setThreadLocalObject(index:panda.core.Int32, value:panda.core.Object?)

    @class
    method failAssert(message:panda.core.String?)

    @class @external
    method debugAllocations()

    @class @external
    method allocThreadLocal():panda.core.Int32

    @class @external
    method getThreadLocals(t:panda.threads.Thread):panda.collections.HashMap<panda.core.Int32,panda.core.Object?>

    @class @external
    function instanceOf(o:panda.core.Object?, c:panda.core.Class, nullable:panda.core.Bit):panda.core.Bit

    @class @external
    method real32Bits(r:panda.core.Real32):panda.core.Int32

    @class @external
    method real64Bits(r:panda.core.Real64):panda.core.Int64

    @class @external
    method callBitFunction(f:$NativePointer):panda.core.Bit

    @class @external
    method callInt8Function(f:$NativePointer):panda.core.Int8

    @class @external
    method callInt16Function(f:$NativePointer):panda.core.Int16

    @class @external
    method callInt32Function(f:$NativePointer):panda.core.Int32

    @class @external
    method callInt64Function(f:$NativePointer):panda.core.Int64

    @class @external
    method callCharFunction(f:$NativePointer):panda.core.Char

    @class @external
    method callReal32Function(f:$NativePointer):panda.core.Real32

    @class @external
    method callReal64Function(f:$NativePointer):panda.core.Real64

    @class @external
    method callObjectFunction(f:$NativePointer):panda.core.Object?

    @self
    constructor()
}
package panda.core

class PandaDataParser:panda.core.Object {
    
    var data:panda.io.PushbackInputStream

    
    var index:panda.core.Int32

    @self
    constructor(data:panda.core.String)

    @self
    constructor(data:panda.io.InputStream)

    
    method peek():panda.core.Char

    
    method readOptional():panda.core.CharWrapper?

    
    method read():panda.core.Char

    
    method checkNext(c:panda.core.Char):panda.core.Bit

    
    method expect(c:panda.core.Char)

    
    method skipWhitespace()

    @self
    method parse():panda.core.Immutable?

    @private
    method readValue():panda.core.Immutable?

    @private
    method readPrimitiveArray():panda.collections.ImmutablePrimitiveArray<panda.core.Immutable?>

    @private
    method readNull():panda.core.Immutable?

    @private
    method readTrue():panda.core.Bit

    @private
    method readFalse():panda.core.Bit

    @private
    method readString():panda.core.String

    @private @pre(base >= 2 & base <= 36)
    function parseInt(s:panda.core.String, base:panda.core.Int32):panda.core.Int64

    @private
    function isDigit(c:panda.core.Char, base:panda.core.Int32):panda.core.Bit

    @private
    method readNumber():panda.core.Number
}
package panda.core

class ParameterError:panda.core.SafetyError {
    @self
    constructor()

    @self
    constructor(message:panda.core.String)
}
package panda.core

class ParseException:panda.core.Exception {
    @self
    constructor()

    @self
    constructor(message:panda.core.String)
}
package panda.core

class PostconditionError:panda.core.AssertionError {
    @self
    constructor()

    @self
    constructor(message:panda.core.String)
}
package panda.core

class PreconditionError:panda.core.AssertionError {
    @self
    constructor()

    @self
    constructor(message:panda.core.String)
}
package panda.core
@abstract
class Primitive:panda.core.Value {
    @self
    constructor()
}
package panda.core
@abstract
class RealNumber:panda.core.Number {
    @self
    constructor()
}
package panda.core
@final
class RegularExpression:panda.core.Immutable {
    @class @final
    var MULTILINE:panda.core.Int32

    @final
    var pattern:panda.core.String

    @final
    var nativeHandle:$NativePointer

    @self
    constructor(pattern:panda.core.String)

    @self
    constructor(pattern:panda.core.String, flags:panda.core.Int32)

    @safeReturn
    function matcher(text:panda.core.String):panda.core.Matcher

    @override
    function format(fmt:panda.core.String):panda.core.String

    @override
    method finalize()

    @class
    method escape(s:panda.core.String):panda.core.String

    @external
    function clone():panda.core.RegularExpression

    @private @external
    method compile(regex:panda.core.String, flags:panda.core.Int32)

    @external
    method close()

    @class
    method $classInit()

}
package panda.core

class SafetyError:panda.core.Error {
    @self
    constructor()

    @self
    constructor(message:panda.core.String)
}
package panda.core
@abstract
class SignedInteger:panda.core.Integer {
    @self
    constructor()
}
package panda.core
@final
class String:panda.core.Value (panda.collections.ListView<panda.core.Char>) {
    @private @final
    var chars:panda.collections.ImmutablePrimitiveArray<panda.core.Char>

    @self
    constructor(chars:panda.collections.ImmutablePrimitiveArray<panda.core.Char>)

    @self
    constructor(chars:panda.collections.PrimitiveArray<panda.core.Char>)

    @self
    constructor(chars:panda.collections.Array<panda.core.Char>)

    @override
    function length():panda.core.Int32

    @override
    function [](i:panda.core.Int32):panda.core.Char

    @safeReturn @pre(maxResults > 0)
    function split(delimiter:panda.core.String, maxResults:panda.core.Int32):panda.collections.PrimitiveArray<panda.core.String>

    @safeReturn
    function split(delimiter:panda.core.String):panda.collections.PrimitiveArray<panda.core.String>

    @safeReturn @pre(maxResults > 0)
    function split(delimiter:panda.core.RegularExpression, maxResults:panda.core.Int32):panda.collections.PrimitiveArray<panda.core.String>

    @safeReturn
    function split(delimiter:panda.core.RegularExpression):panda.collections.PrimitiveArray<panda.core.String>

    
    function matches(regex:panda.core.RegularExpression):panda.core.Bit

    
    function contains(needle:panda.core.RegularExpression):panda.core.Bit

    @safeReturn
    function parse(regex:panda.core.RegularExpression):panda.collections.PrimitiveArray<panda.core.String>?

    @pre(search.length > 0)
    function replace(search:panda.core.String, replacement:panda.core.String):panda.core.String

    
    function replace(search:panda.core.RegularExpression, replacement:panda.core.String):panda.core.String

    
    function replace(search:panda.core.RegularExpression, replacement:panda.core.String, allowGroupReferences:panda.core.Bit):panda.core.String

    
    function replace(search:panda.core.RegularExpression, replacement:(panda.core.String)=>(panda.core.Object)):panda.core.String

    
    function replace(search:panda.core.RegularExpression, replacement:(panda.collections.PrimitiveArray<panda.core.String>)=>(panda.core.Object)):panda.core.String

    
    function trim():panda.core.String

    
    function reverse():panda.core.String

    
    function startsWith(s:panda.core.String):panda.core.Bit

    
    function startsWith(c:panda.core.Char):panda.core.Bit

    
    function endsWith(s:panda.core.String):panda.core.Bit

    
    function endsWith(c:panda.core.Char):panda.core.Bit

    
    function contains(needle:panda.core.String):panda.core.Bit

    @override
    function contains(needle:panda.core.Char):panda.core.Bit

    
    function indexOf(s:panda.core.String):panda.core.Int32Wrapper?

    @pre(start >= 0) @pre(start <= length)
    function indexOf(s:panda.core.String, start:panda.core.Int32):panda.core.Int32Wrapper?
@post(@return = null | @return < length)

    
    function [..](start:panda.core.Int32):panda.core.String

    
    function [..](start:panda.core.Int32, end:panda.core.Int32):panda.core.String

    
    function [..](start:panda.core.Int32Wrapper?, end:panda.core.Int32Wrapper?):panda.core.String

    @override
    function [..](start:panda.core.Int32, end:panda.core.Int32, step:panda.core.Int32):panda.core.String

    @override
    function [..](start:panda.core.Int32Wrapper?, end:panda.core.Int32Wrapper?, step:panda.core.Int32):panda.core.String

    
    function [...](start:panda.core.Int32):panda.core.String

    
    function [...](start:panda.core.Int32, end:panda.core.Int32):panda.core.String

    
    function [...](start:panda.core.Int32Wrapper?, end:panda.core.Int32Wrapper?):panda.core.String

    @override
    function [...](start:panda.core.Int32, end:panda.core.Int32, step:panda.core.Int32):panda.core.String

    @override
    function [...](start:panda.core.Int32Wrapper?, end:panda.core.Int32Wrapper?, step:panda.core.Int32):panda.core.String

    @override @safeReturn
    function iterator():panda.collections.Iterator<panda.core.Char>

    @override
    function filter(f:(panda.core.Char)=>(panda.core.Bit)):panda.core.String

    
    function left(width:panda.core.Int32):panda.core.String

    
    function left(width:panda.core.Int32, fill:panda.core.Char):panda.core.String
@post(@return.length >= width)

    
    function right(width:panda.core.Int32):panda.core.String

    
    function right(width:panda.core.Int32, fill:panda.core.Char):panda.core.String
@post(@return.length >= width)

    
    function center(width:panda.core.Int32):panda.core.String

    
    function center(width:panda.core.Int32, fill:panda.core.Char):panda.core.String
@post(@return.length >= width)

    @override @math(overflow)
    function hash():panda.core.Int32

    @override
    function =(o:panda.core.Object):panda.core.Bit

    
    function >(s:panda.core.String):panda.core.Bit

    
    function >=(s:panda.core.String):panda.core.Bit

    
    function <(s:panda.core.String):panda.core.Bit

    
    function <=(s:panda.core.String):panda.core.Bit

    @class
    function +(s1->>panda.core.String, s2->>panda.core.String):panda.core.String
@post(@return.length = s1.length + s2.length)

    @pre(count >= 0)
    function *(count:panda.core.Int32):panda.core.String
@post(@return.length = length * count)

    @class @pre(count >= 0)
    function *(count:panda.core.Int32, s:panda.core.String):panda.core.String

    @override
    function ->>():panda.core.String

    @override @preOr(fmt = "panda")
    function format(fmt:panda.core.String):panda.core.String

    @override
    function ->>():panda.collections.Array<panda.core.Char>
@postAnd(@return.length = length)

    
    function ->>():panda.collections.PrimitiveArray<panda.core.Int8>
@post(@return.length = length)

    
    function ->>():panda.collections.PrimitiveArray<panda.core.Char>
@post(@return.length = length)

    @pre(length = 1)
    function ->>():panda.core.Char

    @class
    function ->>(value:panda.core.Bit):panda.core.String

    
    function ->>():panda.core.Bit

    @class
    function ->>(var value:panda.core.Int64):panda.core.String

    @class
    function ->>(var value:panda.core.UInt64):panda.core.String

    @class
    function ->>(c:panda.core.Char):panda.core.String
@post(@return.length = 1)

    
    function ->>():panda.core.Int64Wrapper?

    
    function ->>():panda.core.Int64

    
    function ->>():panda.core.Int32Wrapper?

    
    function ->>():panda.core.Int32

    
    function ->>():panda.core.Int16Wrapper?

    
    function ->>():panda.core.Int16

    
    function ->>():panda.core.Int8Wrapper?

    
    function ->>():panda.core.Int8

    
    function ->>():panda.core.UInt64Wrapper?

    
    function ->>():panda.core.UInt64

    
    function ->>():panda.core.UInt32Wrapper?

    
    function ->>():panda.core.UInt32

    
    function ->>():panda.core.UInt16Wrapper?

    
    function ->>():panda.core.UInt16

    
    function ->>():panda.core.UInt8Wrapper?

    
    function ->>():panda.core.UInt8

    @class
    function ->>(r:panda.core.Real32):panda.core.String

    @class
    function ->>(r:panda.core.Real64):panda.core.String

    
    function ->>():panda.core.Real32Wrapper?

    
    function ->>():panda.core.Real32

    
    function ->>():panda.core.Real64Wrapper?

    
    function ->>():panda.core.Real64

    @class
    function format(s:panda.core.String, params:panda.core.Object...):panda.core.String

    @private @class @external
    function pandaReal32ToString(r:panda.core.Real32):panda.core.String

    @private @class @external
    function pandaReal64ToString(r:panda.core.Real64):panda.core.String

    @private @class @external
    function pandaStringToReal32(s:panda.core.String):panda.core.Real32

    @private @class @external
    function pandaStringToReal64(s:panda.core.String):panda.core.Real64
}
package panda.core
@private
class Environment:panda.core.Immutable {
    
    function [](key:panda.core.String):panda.core.String?

    @private @class @external
    function pandaGetEnv(key:panda.core.String):panda.core.String?

    @self
    constructor()
}
package panda.core
@final
class OperatingSystemType:panda.core.Enumeration {
    @final
    var name:panda.core.String

    @final
    var value:panda.core.Int32

    @private @self
    constructor(name:panda.core.String, value:panda.core.Int32)

    
    function ->>():panda.core.Int32

    @override
    function format(fmt:panda.core.String):panda.core.String

    @override
    function =(o:panda.core.Object):panda.core.Bit

    @override
    function hash():panda.core.Int32

    @class @final
    var MACOSX:panda.core.OperatingSystemType

    @class @final
    var LINUX:panda.core.OperatingSystemType

    @class @final
    var OTHER_UNIX:panda.core.OperatingSystemType

    @class @final
    var WINDOWS:panda.core.OperatingSystemType

    @class
    function ->>(i:panda.core.Int32):panda.core.OperatingSystemType

    @class
    function ->>(name:panda.core.String):panda.core.OperatingSystemType

    @private @class @final
    var NAME_MAP:panda.collections.ImmutableHashMap<panda.core.String,panda.core.OperatingSystemType>

    @class
    method $classInit()

}
package panda.core

class OperatingSystemInfo:panda.core.Value {
    @final
    var type:panda.core.OperatingSystemType

    @private @self
    constructor(type:panda.core.OperatingSystemType)
}
package panda.core
@final
class System:panda.core.Object {
    @class @final
    var environment:panda.core.Environment

    @private @self
    constructor()

    @class @external
    function operatingSystem():panda.core.OperatingSystemInfo

    @class
    method exit()

    @class @external
    method exit(exitCode:panda.core.Int32)

    @class
    method exec(command:panda.io.File, args:panda.core.String...)

    @class @external
    method exec(command:panda.io.File, dir:panda.io.File, args:panda.core.String...)

    @class
    method exec(command:panda.io.File, inputStream:panda.io.InputStream?, outputStream:panda.io.OutputStream?, errorStream:panda.io.OutputStream?, args:panda.core.String...)

    @class @pre(inputStream = null | inputStream-?>(FileInputStream)) @pre(outputStream-?>(FileOutputStream)) @pre(errorStream = null)
    method exec(command:panda.io.File, dir:panda.io.File, inputStream:panda.io.InputStream?, outputStream:panda.io.OutputStream?, errorStream:panda.io.OutputStream?, args:panda.core.String...)

    @private @class @external
    method execStream(path:panda.core.String, dir:panda.core.String, inHandle:$NativePointer, outHandle:$NativePointer, args:panda.collections.PrimitiveArray<panda.core.String>)

    @class
    method $classInit()

}
package panda.core
@abstract
class UnsignedInteger:panda.core.Integer {
    @self
    constructor()
}
package panda.core
@abstract
class Value:panda.core.Immutable {
    @self
    constructor()
}
package panda.collections

class Array<T:panda.core.Object?>:panda.core.Object (panda.collections.List<panda.collections.Array.T>) {
    @private @class @final
    var DEFAULT_LENGTH:panda.core.Int32

    @private
    var contents := new PrimitiveArray<T>(DEFAULT_LENGTH)

    @private
    var _length := 0

    @self
    constructor()
{ }

    @self
    constructor(contents:CollectionView<T>)
{ addAll(contents) }

    @override @preOr(index < _length)
    function [](index:Int):T
{ return contents[index] }

    @override
    function length():Int
{ return _length }

    @override @self @preOr(index < _length)
    method []:=(index:Int, value:T)
{ contents[index] := value }

    @override @self
    method add(value:T)
{ ensureCapacity(_length + 1) _length += 1 self[_length - 1] := value }

    @override @self
    method remove(object:T)
{ for i in 0 .. length if self[i] = object removeIndex(i) }

    @override @self
    method removeIndex(index:Int)
{ for i in index .. length - 1 self[i] := self[i + 1] _length -= 1 }

    @override @self
    method clear()
{ contents := new PrimitiveArray<T>(DEFAULT_LENGTH) _length := 0 }

    @override
    function contains(object:T):Bit
{ for v in self { if object = v return true } return false }

    @private @self
    method ensureCapacity(maxLength:Int)
{ if maxLength > contents.length { def newContents := new PrimitiveArray<T>(contents.length * 2) for i in 0 .. length newContents[i] := contents[i] contents := newContents } }

    @override
    function =(o:Object):Bit
{ if o-!>(ListView<T>) return false def list := o->(ListView<T>) if length != list.length return false for i, v in self { if v != list[i] return false } return true }

    @override @math(overflow)
    function hash():Int
{ var result := 0 constant MULTIPLIER := 53 for v in self { result *= MULTIPLIER if v != null result += v.hash } return result }

    @override @preOr(true)
    function format(fmt:String):String
{ def result := new MutableString("[") for i, v in self { if i > 0 result.append(", ") if v != null result.append(v.format(fmt)) else result.append("<null>") } result.append("]") return result->>(String) }

    @class
    method $classInit()

}
package panda.collections

interface Collection<T:panda.core.Object?> : panda.collections.CollectionView<panda.collections.Collection.T>, panda.collections.CollectionWriter<panda.collections.Collection.T> {
}
package panda.collections

interface CollectionView<T:panda.core.Object?> : panda.collections.Iterable<panda.collections.CollectionView.T> {
    
    function length():Int

    
    function contains(object:T):Bit
{ for v in self { if object = v return true } return false }

    
    function filter(f:(T)=>(Bit)):CollectionView<T>
{ def result := new Array<T>() for v in self { if f(v) result.add(v) } return result }

    @pre(length > 0)
    function fold(f:(T,T)=>(T)):T
{ def i := iterator var result := i.next() while !i.done result := f(result, i.next()) return result }

    
    function fold(f:(T,T)=>(T), start:T):T
{ var result := start for v in self result := f(result, v) return result }

    
    method apply(m:(T)=&>())
{ for v in self m(v) }

    
    function ->>():Array<T>
{ def result := new Array<T>() for v in self result.add(v) return result }
}
package panda.collections

interface CollectionWriter<T:panda.core.Object?> {
    
    function length():Int

    @self
    method add(object:T)

    @self
    method addAll(c:CollectionView<T>)
{ for v in c add(v) }

    @self
    method remove(object:T)

    @self
    method clear()
}
package panda.collections
@private
class MutableMapEntry<K:panda.core.Object?, V:panda.core.Object?>:panda.core.Object {
    @final
    var key:panda.collections.MutableMapEntry.K

    
    var value:panda.collections.MutableMapEntry.V

    
    var next:panda.collections.MutableMapEntry<panda.collections.MutableMapEntry.K,panda.collections.MutableMapEntry.V>?

    @private @self
    constructor(key:K, value:V)
{ self.key := key self.value := value }
}
package panda.collections
@abstract @private
class HashMapIterator<K:panda.core.Object?, V:panda.core.Object?, R:panda.core.Object?>:panda.core.Object (panda.collections.Iterator<panda.collections.HashMapIterator.R>) {
    @final
    var map:panda.collections.HashMap<panda.collections.HashMapIterator.K,panda.collections.HashMapIterator.V>

    
    var index := 0

    
    var entry:panda.collections.MutableMapEntry<panda.collections.HashMapIterator.K,panda.collections.HashMapIterator.V>?

    @self
    constructor(map:HashMap<K,V>)
{ self.map := map entry := map.contents[0] while entry = null { index += 1 if index >= map.contents.length break entry := map.contents[index] } }

    @override
    function done():Bit
{ return index >= map.contents.length }

    @abstract
    function result(e:MutableMapEntry<K,V>):R

    @override @self
    method next():R
{ assert entry != null def result := result(entry) entry := entry.next while entry = null { index += 1 if index >= map.contents.length break entry := map.contents[index] } return result }
}
package panda.collections
@private
class HashMapEntryIterator<K:panda.core.Object?, V:panda.core.Object?>:panda.collections.HashMapIterator<panda.collections.HashMapEntryIterator.K,panda.collections.HashMapEntryIterator.V,(panda.collections.HashMapEntryIterator.K,panda.collections.HashMapEntryIterator.V)> {
    @self
    constructor(map:HashMap<K,V>)
{ super.constructor(map) }

    @override
    function result(e:MutableMapEntry<K,V>):(K,V)
{ return (e.key, e.value) }
}
package panda.collections
@private
class HashMapKeyIterator<K:panda.core.Object?, V:panda.core.Object?>:panda.collections.HashMapIterator<panda.collections.HashMapKeyIterator.K,panda.collections.HashMapKeyIterator.V,panda.collections.HashMapKeyIterator.K> {
    @self
    constructor(map:HashMap<K,V>)
{ super.constructor(map) }

    @override
    function result(e:MutableMapEntry<K,V>):K
{ return e.key }
}
package panda.collections
@private
class HashMapValueIterator<K:panda.core.Object?, V:panda.core.Object?>:panda.collections.HashMapIterator<panda.collections.HashMapValueIterator.K,panda.collections.HashMapValueIterator.V,panda.collections.HashMapValueIterator.V> {
    @self
    constructor(map:HashMap<K,V>)
{ super.constructor(map) }

    @override
    function result(e:MutableMapEntry<K,V>):V
{ return e.value }
}
package panda.collections

class HashMap<K:panda.core.Object?, V:panda.core.Object?>:panda.core.Object (panda.collections.Map<panda.collections.HashMap.K,panda.collections.HashMap.V>) {
    @private @class @final
    var DEFAULT_LENGTH:panda.core.Int32

    @private @class @final
    var LOAD_FACTOR:panda.core.Real64

    @private @readonly
    var _length:panda.core.Int32

    @private
    var contents:panda.collections.PrimitiveArray<panda.collections.MutableMapEntry<panda.collections.HashMap.K,panda.collections.HashMap.V>?>

    @private
    var threshold:panda.core.Int32

    @self
    constructor()
{ clear() }

    @self @pre(keys.length = values.length)
    constructor(keys:PrimitiveArray<K>, values:PrimitiveArray<V>)
{ constructor() for i, key in keys self[key] := values[i] }

    @self @pre(keys.length = values.length)
    constructor(keys:ListView<K>, values:ListView<V>)
{ constructor() for i, key in keys self[key] := values[i] }

    @self
    constructor(map:MapView<K,V>)
{ constructor() for (key, value) in map self[key] := value }

    @private @math(overflow)
    function indexFor(key:K):Int32
{ var h:Int32 if key = null h := 0 else h := key.hash h ~~= (h >> 20) ~~ (h >> 12) ~~ (h >> 7) ~~ (h >> 4) return h && (contents.length - 1) }

    @override
    function [](key:K):V?
{ var index := indexFor(key) var e := contents[index] while e != null & e.key != key e := e.next if e != null return e.value else return null }

    @override
    function contains(key:K):Bit
{ var index := indexFor(key) var e := contents[index] while e != null & e.key != key e := e.next return e != null }

    @override @self
    method []:=(key:K, value:V)
{ var index := indexFor(key) var e := contents[index] while e != null & e.key != key e := e.next if e = null { var old := contents[index] e := new MutableMapEntry<K, V>(key, value) e.next := old contents[index] := e assert contents[index] == e incrementLength() } else e.value := value }

    @override @self
    method remove(key:K)
{ def index := indexFor(key) var e := contents[index] if e = null return if e.key = key { contents[index] := e.next _length -= 1 return } loop { def next := e.next if next = null { return } if next.key = key { break } e := next } def next := e.next assert next != null e.next := next.next _length -= 1 }

    @override @self
    method clear()
{ _length := 0 contents := new PrimitiveArray<MutableMapEntry<K, V>?>( DEFAULT_LENGTH) threshold := (contents.length * LOAD_FACTOR)->>(Int32) }

    @override @safeReturn
    function iterator():Iterator<(K,V)>
{ return new HashMapEntryIterator<K, V>(self) }

    @override @self
    method addAll(map:MapView<K,V>)
{ for (key, value) in map self[key] := value }

    @private
    method incrementLength()
{ _length += 1 if length >= threshold { _length := 0 var oldContents := contents contents := new PrimitiveArray<MutableMapEntry<K, V>?>(contents.length * 2) threshold *= 2 for i in oldContents.length - 1 ... 0 by -1 { var e := oldContents[i] while e != null { self[e.key] := e.value e := e.next } } } }

    @override
    function =(o:Object):Bit
{ if o-!>(Map<K, V>) return false var m := o->(Map<K, V>) if length != m.length return false for (key, value) in self { if value != m[key] return false } return true }

    @override @preOr(fmt = "" | fmt = "panda")
    function format(fmt:String):String
{ def result := new MutableString() result.append("{") var first := true for (key, value) in self { if !first result.append(", ") else first := false if key != null result.append(key.format(fmt)) else result.append("null") result.append(": ") if value != null result.append(value.format(fmt)) else result.append("null") } result.append("}") return result->>(String) }

    @override
    function length():panda.core.Int32
{ return self._length }

    @class
    method $classInit()

}
package panda.collections

class HashSet<T:panda.core.Object?>:panda.core.Object (panda.collections.Set<panda.collections.HashSet.T>) {
    @final
    var contents := new HashMap<T, T>()

    @self
    constructor()
{ }

    @self
    constructor(contents:CollectionView<T>)
{ throw new NotSupportedException() }

    @override
    function length():Int
{ return contents.length }

    @override
    function contains(object:T):Bit
{ return contents[object] != null }

    @override @safeReturn
    function iterator():Iterator<T>
{ throw new NotSupportedException() }

    @override @self
    method add(object:T)
{ contents[object] := object }

    @override @self
    method remove(object:T)
{ contents.remove(object) }

    @override @self
    method clear()
{ contents.clear() }
}
package panda.collections

class ImmutableArray<T:panda.core.Immutable>:panda.core.Immutable (panda.collections.ListView<panda.collections.ImmutableArray.T>) {
    @private @final
    var contents:panda.collections.PrimitiveArray<panda.collections.ImmutableArray.T>

    @self
    constructor(contents:Array<T>)
{ self.contents := new PrimitiveArray<T>() for v in contents self.contents.append(v) }

    @override @preOr(index < _length)
    function [](index:Int):T
{ return contents[index] }

    @override
    function length():Int
{ return contents.length }

    @override
    function =(o:Object):Bit
{ if o-!>(ListView<T>) return false def list := o->(ListView<T>) if length != list.length return false for i, v in self { if v != list[i] return false } return true }

    @override @math(overflow)
    function hash():Int
{ var result := 0 constant MULTIPLIER := 53 for v in self result := result * MULTIPLIER + v.hash return result }

    @override @preOr(true)
    function format(fmt:String):String
{ def result := new MutableString("[") for i, v in self { if i > 0 result.append(", ") result.append(v.format(fmt)) } result.append("]") return result->>(String) }
}
package panda.collections
@private
class ImmutableMapEntry<K:panda.core.Immutable, V:panda.core.Immutable>:panda.core.Immutable {
    @final
    var key:panda.collections.ImmutableMapEntry.K

    @final
    var value:panda.collections.ImmutableMapEntry.V

    @final
    var next:panda.collections.ImmutableMapEntry<panda.collections.ImmutableMapEntry.K,panda.collections.ImmutableMapEntry.V>?

    @private @self
    constructor(key:K, value:V, next:ImmutableMapEntry<K,V>?)
{ self.key := key self.value := value self.next := next }
}
package panda.collections
@abstract @private
class ImmutableHashMapIterator<K:panda.core.Immutable, V:panda.core.Immutable, R:panda.core.Immutable>:panda.core.Object (panda.collections.Iterator<panda.collections.ImmutableHashMapIterator.R>) {
    @final
    var map:panda.collections.ImmutableHashMap<panda.collections.ImmutableHashMapIterator.K,panda.collections.ImmutableHashMapIterator.V>

    
    var index := 0

    
    var entry:panda.collections.ImmutableMapEntry<panda.collections.ImmutableHashMapIterator.K,panda.collections.ImmutableHashMapIterator.V>?

    @self
    constructor(map:ImmutableHashMap<K,V>)
{ self.map := map entry := map.contents[0] while entry = null { index += 1 if index >= map.contents.length break entry := map.contents[index] } }

    @override
    function done():Bit
{ return index >= map.contents.length }

    @abstract
    function result(e:ImmutableMapEntry<K,V>):R

    @override @self
    method next():R
{ assert entry != null def result := result(entry) entry := entry.next while entry = null { index += 1 if index >= map.contents.length break entry := map.contents[index] } return result }
}
package panda.collections
@private
class ImmutableHashMapEntryIterator<K:panda.core.Immutable, V:panda.core.Immutable>:panda.collections.ImmutableHashMapIterator<panda.collections.ImmutableHashMapEntryIterator.K,panda.collections.ImmutableHashMapEntryIterator.V,(panda.collections.ImmutableHashMapEntryIterator.K,panda.collections.ImmutableHashMapEntryIterator.V)> {
    @self
    constructor(map:ImmutableHashMap<K,V>)
{ super.constructor(map) }

    @override
    function result(e:ImmutableMapEntry<K,V>):(K,V)
{ return (e.key, e.value) }
}
package panda.collections
@private
class ImmutableHashMapKeyIterator<K:panda.core.Immutable, V:panda.core.Immutable>:panda.collections.ImmutableHashMapIterator<panda.collections.ImmutableHashMapKeyIterator.K,panda.collections.ImmutableHashMapKeyIterator.V,panda.collections.ImmutableHashMapKeyIterator.K> {
    @self
    constructor(map:ImmutableHashMap<K,V>)
{ super.constructor(map) }

    @override
    function result(e:ImmutableMapEntry<K,V>):K
{ return e.key }
}
package panda.collections
@private
class ImmutableHashMapValueIterator<K:panda.core.Immutable, V:panda.core.Immutable>:panda.collections.ImmutableHashMapIterator<panda.collections.ImmutableHashMapValueIterator.K,panda.collections.ImmutableHashMapValueIterator.V,panda.collections.ImmutableHashMapValueIterator.V> {
    @self
    constructor(map:ImmutableHashMap<K,V>)
{ super.constructor(map) }

    @override
    function result(e:ImmutableMapEntry<K,V>):V
{ return e.value }
}
package panda.collections

class ImmutableHashMap<K:panda.core.Immutable, V:panda.core.Immutable>:panda.core.Immutable (panda.collections.MapView<panda.collections.ImmutableHashMap.K,panda.collections.ImmutableHashMap.V>) {
    @private @final
    var _length:panda.core.Int32

    @private @final
    var contents:panda.collections.ImmutablePrimitiveArray<panda.collections.ImmutableMapEntry<panda.collections.ImmutableHashMap.K,panda.collections.ImmutableHashMap.V>?>

    @self
    constructor(m:MapView<K,V>)
{ def h:HashMap<K, V> if m-?>(HashMap<K, V>) h := m->(HashMap<K, V>) else h := new HashMap<K, V>(m) def contentsTemp := new PrimitiveArray<ImmutableMapEntry<K, V>?>() for e in h.contents contentsTemp.append(copy(e)) contents := new ImmutablePrimitiveArray<ImmutableMapEntry<K, V>?>( contentsTemp, 0, contentsTemp.length) _length := h.length }

    @self
    constructor(keys:ListView<K>, values:ListView<V>)
{ constructor(new HashMap<K, V>(keys, values)) }

    @self
    constructor(keys:PrimitiveArray<K>, values:PrimitiveArray<V>)
{ constructor(new HashMap<K, V>(keys, values)) }

    @private
    function copy(m:MutableMapEntry<K,V>?):ImmutableMapEntry<K,V>?
{ if m = null return null return new ImmutableMapEntry<K, V>(m.key, m.value, copy(m.next)) }

    @private @math(overflow)
    function indexFor(key:K):Int32
{ var h:Int32 if key = null h := 0 else h := key.hash h ~~= (h >> 20) ~~ (h >> 12) ~~ (h >> 7) ~~ (h >> 4) return h && (contents.length - 1) }

    @override
    function [](key:K):V?
{ var index := indexFor(key) var e := contents[index] while e != null & e.key != key { e := e.next } if e != null return e.value else return null }

    @override
    function length():Int
{ return _length }

    @override
    function contains(key:K):Bit
{ def index := indexFor(key) var e := contents[index] while e != null & e.key != key e := e.next return e != null }

    @override @safeReturn
    function iterator():Iterator<(K,V)>
{ return new ImmutableHashMapEntryIterator<K, V>(self) }

    @override @preOr(fmt = "" | fmt = "panda")
    function format(fmt:String):String
{ def result := new MutableString() result.append("{") var first := true for e in contents { var current := e while current != null { if !first result.append(", ") else first := false def key := current.key if key != null result.append(key.format(fmt)) else result.append("null") result.append(": ") def value := current.value if value != null result.append(value.format(fmt)) else result.append("null") current := current.next } } result.append("}") return result->>(String) }
}
package panda.collections

class ImmutablePrimitiveArray:panda.core.Immutable {
    @self
    constructor()
}
package panda.collections

class ImmutableTuple:panda.core.Value {
    @self
    constructor()
}
package panda.collections

class IndexOutOfBoundsError:panda.core.SafetyError {
    @self
    constructor(message:panda.core.String)
}
package panda.collections

interface Iterable<T:panda.core.Object?> {
    @safeReturn
    function iterator():Iterator<T>
}
package panda.collections

interface Iterator<T:panda.core.Object?> {
    
    function done():Bit

    @self @pre(!done)
    method next():T
}
package panda.collections

interface List<T:panda.core.Object?> : panda.collections.ListView<panda.collections.List.T>, panda.collections.ListWriter<panda.collections.List.T> {
    @self
    method mapInPlace(f:(T)=>(T))
{ for i in 0 .. length self[i] := f(self[i]) }

    @self
    method filterInPlace(f:(T)=>(Bit))
{ for i in length - 1 ... 0 by -1 { if !f(self[i]) removeIndex(i) } }

    @override @self
    method insert(value:T, index:Int)
{ add(value) for i in length - 1 .. index by -1 self[i] := self[i - 1] self[index] := value }

    
    method []:=(i:Int, object:T)

    @self @pre(step != 0)
    method [..]:=(var start:Int?, var end:Int?, step:Int, list:ListView<T>)
{ if start = null { if step > 0 start := 0 else start := length - 1 } if end = null { if step > 0 end := length else end := -1 } self[start->(Int) .. end->(Int) by step] := list }

    @self @pre(step != 0)
    method [..]:=(start:Int, end:Int, step:Int, list:ListView<T>)
{ if step = 1 { def oldLength := end - start def newLength := list.length def delta := newLength - oldLength if delta < 0 { for i in 0 .. -delta removeIndex(start) for i in start .. start + list.length self[i] := list[i - start] } else if delta > 0 { for i in 0 .. delta insert(list[i], start + i) for i in delta .. list.length self[start + i] := list[i] } } else { var src := 0 for dest in start .. end by step { self[dest] := list[src] src += 1 } assert src = list.length : new PreconditionError( "slice source and destination lengths do not match") } }

    @self @pre(step != 0)
    method [...]:=(var start:Int?, var end:Int?, step:Int, list:ListView<T>)
{ if start = null { if step > 0 start := 0 else start := length - 1 } if end = null { if step > 0 end := length - 1 else end := 0 } self[start->(Int) ... end->(Int) by step] := list }

    @self @pre(step != 0)
    method [...]:=(start:Int, end:Int, step:Int, list:ListView<T>)
{ if step > 0 self[start .. end + 1 by step] := list else self[start .. end - 1 by step] := list }
}
package panda.collections

class ListIterator<T:panda.core.Object?>:panda.core.Object (panda.collections.Iterator<panda.collections.ListIterator.T>) {
    @final
    var list:panda.collections.ListView<panda.collections.ListIterator.T>

    
    var index := 0

    @self
    constructor(list:ListView<T>)
{ self.list := list }

    @override
    function done():Bit
{ return index >= list.length }

    @override @self
    method next():T
{ def result := list[index] index += 1 return result }
}
package panda.collections

interface ListView<T:panda.core.Object?> : panda.collections.CollectionView<panda.collections.ListView.T> {
    
    function [](i:Int):T

    
    function [..](var start:Int?, var end:Int?, step:Int):ListView<T>
{ if start = null { if step > 0 start := 0 else start := length - 1 } if end = null { if step > 0 end := length else end := -1 } return self[start->(Int) .. end->(Int) by step] }

    
    function [..](start:Int, end:Int, step:Int):ListView<T>
{ def result := new Array<T>() for i in start .. end by step result.add(self[i]) return result }

    
    function [...](var start:Int?, var end:Int?, step:Int):ListView<T>
{ if start = null { if step > 0 start := 0 else start := length - 1 } if end = null { if step > 0 end := length - 1 else end := 0 } return self[start->(Int) ... end->(Int) by step] }

    
    function [...](start:Int, end:Int, step:Int):ListView<T>
{ def result := new Array<T>() for i in start ... end by step result.add(self[i]) return result }

    @override
    function contains(value:T):Bit
{ return indexOf(value) != null }

    
    function indexOf(value:T):Int?
{ for i, test in self { if test = value return i } return null }

    
    function indexOf(value:T, start:Int):Int?
{ for i in start .. length { if self[i] = value return i } return null }

    
    function lastIndexOf(value:T):Int?
{ for i in length - 1 ... 0 by -1 { if self[i] = value return i } return null }

    
    function lastIndexOf(value:T, start:Int):Int?
{ for i in start ... 0 by -1 { if self[i] = value return i } return null }

    @override @safeReturn
    function iterator():Iterator<T>
{ return new ListIterator<T>(self) }

    
    function join(delimiter:String):String
{ def result := new MutableString() for i, v in self { if i > 0 result.append(delimiter) if v != null result.append(v) else result.append("<null>") } return result->>(String) }
}
package panda.collections

interface ListWriter<T:panda.core.Object?> : panda.collections.CollectionWriter<panda.collections.ListWriter.T> {
    @self
    method insert(value:T, index:Int)

    @self
    method removeIndex(index:Int)
}
package panda.collections

interface Map<K:panda.core.Object?, V:panda.core.Object?> : panda.collections.MapView<panda.collections.Map.K,panda.collections.Map.V>, panda.collections.MapWriter<panda.collections.Map.K,panda.collections.Map.V> {
}
package panda.collections

interface MapView<K:panda.core.Object?, V:panda.core.Object?> : panda.collections.Iterable<(panda.collections.MapView.K,panda.collections.MapView.V)> {
    
    function [](key:K):V?

    
    function contains(key:K):Bit

    
    function keys():CollectionView<K>
{ def result := new Array<K>() for (key, _) in self result.add(key) return result }

    
    function values():CollectionView<V>
{ def result := new Array<V>() for (_, value) in self result.add(value) return result }

    
    function length():Int
}
package panda.collections

interface MapWriter<K:panda.core.Object?, V:panda.core.Object?> {
    
    method []:=(key:K, value:V)

    
    method remove(key:K)

    
    method clear()

    
    method addAll(map:MapView<K,V>)
}
package panda.collections
@final
class Order:panda.core.Enumeration {
    @final
    var name:panda.core.String

    @final
    var value:panda.core.Int32

    @private @self
    constructor(name:panda.core.String, value:panda.core.Int32)

    
    function ->>():panda.core.Int32

    @override
    function format(fmt:panda.core.String):panda.core.String

    @override
    function =(o:panda.core.Object):panda.core.Bit

    @override
    function hash():panda.core.Int32

    @class @final
    var GREATER:panda.collections.Order

    @class @final
    var LESS:panda.collections.Order

    @class @final
    var EQUAL:panda.collections.Order

    @class
    function ->>(i:panda.core.Int32):panda.collections.Order

    @class
    function ->>(name:panda.core.String):panda.collections.Order

    @private @class @final
    var NAME_MAP:panda.collections.ImmutableHashMap<panda.core.String,panda.collections.Order>

    @class
    method $classInit()

}
package panda.collections

class PrimitiveArray:panda.core.Object {
    @protected @class @external
    method setLength(a:panda.core.Object, elementSize:panda.core.Int32, reserved:panda.core.Bit, length:panda.core.Int32)

    @self
    constructor()
}
package panda.collections

interface Set<T:panda.core.Object?> : panda.collections.Collection<panda.collections.Set.T> {
}
package panda.collections

class Stack<T:panda.core.Object?>:panda.core.Object {
    @private @final
    var contents := new Array<T>()

    @self
    constructor()
{ }

    
    method push(value:T)
{ contents.add(value) }

    @pre(length > 0)
    method pop():T
{ def result := contents[contents.length - 1] contents.removeIndex(contents.length - 1) return result }

    
    method clear()
{ contents.clear() }

    
    function peek():T
{ return peek(0) }

    @pre(depth < length) @pre(depth >= 0)
    function peek(depth:Int):T
{ return contents[length - depth - 1] }

    
    function length():Int
{ return contents.length }

    @override @preOr(true)
    function format(fmt:String):String
{ return contents.format(fmt) }

    
    function ->>():ListView<T>
{ return contents[..] }
}
package panda.collections

class Tuple:panda.core.Object {
    @self
    constructor()
}
package panda.threads

class Lock:panda.core.Immutable {
    @private @final
    var nativeLock:$NativePointer

    @self
    constructor()

    @external
    method lock()

    @external
    method unlock()

    @external @override
    method finalize()

    @private @external
    method init()
}
package panda.threads
@private
class Message:panda.core.Object {
    @final
    var data:panda.core.Object?

    @private
    var prev:panda.threads.Message?

    @private
    var next:panda.threads.Message?

    @self
    constructor(data:panda.core.Object?)
}
package panda.threads

class MessageQueue:panda.core.Immutable {
    @private @final
    var nativeQueue:$NativePointer

    @self
    constructor()

    
    method post(data:panda.core.Immutable?)

    
    method postAndExit(data:panda.core.Object?)

    
    method postUnsafe(data:panda.core.Object?)

    @external
    method pendingMessages():panda.core.Int32

    
    method hasMessage():panda.core.Bit

    @external
    method getMessage():panda.core.Object?

    @external
    method getMessage(timeout:panda.core.Int32):panda.core.Object?

    @external @override
    method finalize()

    @private @external
    method initMessageQueue()

    @private @external
    method sendMessage(message:panda.threads.Message)

    @private @class @external
    method threadExit()
}
package panda.threads

class Pipe:panda.core.Immutable {
    @private @final
    var queue:panda.threads.MessageQueue

    
    method openInputStream():panda.io.InputStream

    
    method openOutputStream():panda.io.OutputStream

    @self
    constructor()
}
package panda.threads
@private
class PipeInputStream:panda.io.InputStream {
    
    var queue:panda.threads.MessageQueue

    
    var bufferIndex:panda.core.Int32

    
    var buffer:panda.collections.ImmutablePrimitiveArray<panda.core.Int8>

    @self
    constructor(queue:panda.threads.MessageQueue)

    @override
    method readInt8():panda.core.Int8Wrapper?
}
package panda.threads
@private
class PipeOutputStream:panda.io.OutputStream {
    
    var queue:panda.threads.MessageQueue

    @self
    constructor(queue:panda.threads.MessageQueue)

    @override
    method write(i:panda.core.Int8)

    @override
    method write(a:panda.collections.PrimitiveArray<panda.core.Int8>)

    @override
    method write(a:panda.collections.ImmutablePrimitiveArray<panda.core.Int8>)

    @override
    method close()
}
package panda.threads
@final
class Thread:panda.core.Immutable {
    @private @final
    var nativeThread:$NativePointer

    @final
    var queue:panda.threads.MessageQueue

    @final
    var preventsExit:panda.core.Bit

    @private @final
    var threadLocals:$NativePointer

    @thread @final
    var context:panda.collections.Map<panda.core.Immutable,panda.core.Immutable>


    @private @final
    var threadEntry:()=&>*()

    @private @self
    constructor()

    @private @self
    constructor(threadEntry:()=&>*(), preventsExit:panda.core.Bit)

    @private
    method run()

    @private @final
    method start()

    @private @final
    method start(newContext:panda.collections.MapView<panda.core.Immutable,panda.core.Immutable>)

    @class @external
    function currentThread():panda.threads.Thread

    @class
    method start(run:()=&>*()):panda.threads.Thread

    @class
    method start(run:()=&>*(), context:panda.collections.MapView<panda.core.Immutable,panda.core.Immutable>):panda.threads.Thread

    @class
    method start(run:()=&>*(), context:panda.collections.MapView<panda.core.Immutable,panda.core.Immutable>, preventsExit:panda.core.Bit):panda.threads.Thread

    @class
    method start(run:()=&>*(), preventsExit:panda.core.Bit):panda.threads.Thread

    @class
    function preferredThreadCount():panda.core.Int32

    @class @external
    method sleep(millis:panda.core.Int32)

    @private @external
    method startThread(context:panda.collections.HashMap<panda.core.Immutable,panda.core.Immutable>)

    @private @class @external
    method threadExit()

    @class
    method $initcontext():panda.collections.Map<panda.core.Immutable,panda.core.Immutable>

    @class
    method $classInit()

}
package panda.io

class BufferedInputStream:panda.io.FilterInputStream {
    @private @class @final
    var DEFAULT_BUFFER_SIZE:panda.core.Int32

    @private
    var buffer:panda.collections.PrimitiveArray<panda.core.Int8>

    @private
    var pos:panda.core.Int32

    @private
    var limit:panda.core.Int32

    @self
    constructor(raw:panda.io.InputStream)

    @self
    constructor(raw:panda.io.InputStream, bufferSize:panda.core.Int32)

    @private
    method fillBuffer()

    @override
    method readInt8():panda.core.Int8Wrapper?

    @override
    method read(bytes:panda.collections.PrimitiveArray<panda.core.Int8>):panda.core.Int32Wrapper?

    @class
    method $classInit()

}
package panda.io

class BufferedOutputStream:panda.io.FilterOutputStream {
    @private @class @final
    var DEFAULT_BUFFER_SIZE:panda.core.Int32

    @private
    var buffer:panda.collections.PrimitiveArray<panda.core.Int8>

    @private
    var limit:panda.core.Int32

    @self
    constructor(out:panda.io.OutputStream)

    @self
    constructor(out:panda.io.OutputStream, bufferSize:panda.core.Int32)

    @override
    method write(i:panda.core.Int8)

    @override
    method write(b:panda.collections.PrimitiveArray<panda.core.Int8>, var offset:panda.core.Int32, var length:panda.core.Int32)

    @override
    method flush()

    @override
    method close()

    @class
    method $classInit()

}
package panda.io

class Console:panda.core.Object {
    @private @self
    constructor()

    @thread
    var inputStream:panda.io.FileInputStream


    @thread
    var outputStream:panda.io.FileOutputStream


    @class
    method read():panda.core.CharWrapper?

    @class
    method readLine():panda.core.String?

    @class
    method write(s->>panda.core.String)

    @class
    method writeLine(s->>panda.core.String)

    @class
    method write(s->>panda.core.String, params:panda.core.Object...)

    @class
    method writeLine(s->>panda.core.String, params:panda.core.Object...)

    @class
    method writeLine()

    @private @class @external
    method stdIn():$NativePointer

    @private @class @external
    method stdOut():$NativePointer

    @class
    method $initinputStream():panda.io.FileInputStream

    @class
    method $initoutputStream():panda.io.FileOutputStream

    @class
    method $classInit()

}
package panda.io
@final
class File:panda.core.Immutable {
    @class @final
    var SEPARATOR:panda.core.Char

    @class @final
    var TEMP:panda.io.File

    @final
    var path:panda.core.String

    @self
    constructor(path:panda.core.String)

    @class
    method currentDirectory():panda.io.File

    
    function name():panda.core.String

    
    function simpleName():panda.core.String

    
    function extension():panda.core.String

    
    method absolute():panda.io.File

    
    method parent():panda.io.File?

    
    function resolve(path:panda.core.String):panda.io.File

    @external
    method exists():panda.core.Bit

    @external
    method isDirectory():panda.core.Bit

    @external
    method createDirectory()

    
    method createDirectories()

    @external
    method list():panda.collections.PrimitiveArray<panda.io.File>

    @override
    function format(fmt:panda.core.String):panda.core.String

    @external
    method delete()

    
    method list(pattern:panda.core.String):panda.collections.PrimitiveArray<panda.io.File>

    
    method list(pattern:panda.core.RegularExpression):panda.collections.PrimitiveArray<panda.io.File>

    
    method openInputStream():panda.io.InputStream

    
    method openOutputStream():panda.io.OutputStream

    
    method write(s:panda.core.String)

    
    method write(bytes:panda.collections.PrimitiveArray<panda.core.Int8>)

    
    method readAsString():panda.core.String

    
    method readAsInt8Array():panda.collections.PrimitiveArray<panda.core.Int8>

    
    method readAsUInt8Array():panda.collections.PrimitiveArray<panda.core.UInt8>

    
    method lines():panda.collections.PrimitiveArray<panda.core.String>

    @override
    function =(o:panda.core.Object):panda.core.Bit

    @override
    function hash():panda.core.Int32

    @private @external
    method absolutePath():panda.core.String

    @class
    method $classInit()

}
package panda.io
@private
class FileInputStream:panda.io.InputStream {
    
    var nativeFile:$NativePointer

    @self
    constructor(nativeFile:$NativePointer)

    @self
    constructor(file:panda.io.File)

    @override
    method readInt8():panda.core.Int8Wrapper?

    @external
    method read(b:panda.collections.PrimitiveArray<panda.core.Int8>, offset:panda.core.Int32, length:panda.core.Int32):panda.core.Int32

    @override
    method close()

    @override
    method finalize()

    @private @class @external
    method open(path:panda.core.String, read:panda.core.Bit, write:panda.core.Bit):$NativePointer

    @private @class @external
    method close(nativeFile:$NativePointer):panda.core.Int32

    @private @class @external
    method readInt8(nativeFile:$NativePointer):panda.core.Int16
}
package panda.io

class FileNotFoundException:panda.io.IOException {
    @self
    constructor(message:panda.core.String)
}
package panda.io
@private
class FileOutputStream:panda.io.OutputStream {
    
    var nativeFile:$NativePointer

    @self
    constructor(nativeFile:$NativePointer)

    @self
    constructor(file:panda.io.File)

    @override
    method write(b:panda.core.Int8)

    @override
    method write(b:panda.collections.PrimitiveArray<panda.core.Int8>, offset:panda.core.Int32, length:panda.core.Int32)

    @override
    method close()

    @override
    method finalize()

    @private @class @external
    method open(path:panda.core.String, read:panda.core.Bit, write:panda.core.Bit):$NativePointer

    @private @class @external
    method close(nativeFile:$NativePointer):panda.core.Int32

    @private @class @external
    method writeInt8(nativeFile:$NativePointer, b:panda.core.Int8)

    @private @class @external
    method writeInt8Array(nativeFile:$NativePointer, b:panda.collections.PrimitiveArray<panda.core.Int8>, offset:panda.core.Int32, length:panda.core.Int32)
}
package panda.io

class FilterInputStream:panda.io.InputStream {
    @private
    var raw:panda.io.InputStream

    
    var closeUnderlyingStream:panda.core.Bit

    @self
    constructor(raw:panda.io.InputStream)

    @override
    method readInt8():panda.core.Int8Wrapper?

    @override
    method read(bytes:panda.collections.PrimitiveArray<panda.core.Int8>):panda.core.Int32Wrapper?

    @override
    method close()
}
package panda.io

class FilterOutputStream:panda.io.OutputStream {
    @private
    var out:panda.io.OutputStream

    
    var closeUnderlyingStream:panda.core.Bit

    @self
    constructor(out:panda.io.OutputStream)

    @override
    method write(b:panda.core.Int8)

    @override
    method write(b->>panda.collections.PrimitiveArray<panda.core.Int8>, offset:panda.core.Int32, length:panda.core.Int32)

    @override
    method close()
}
package panda.io
@abstract
class IOException:panda.core.Exception {
    @self
    constructor(message:panda.core.String)
}
package panda.io

class IndentedOutputStream:panda.io.FilterOutputStream {
    @private
    var _level:panda.core.Int32

    @private
    var _indentSize:panda.core.Int32

    @private
    var indentation:panda.core.String

    @private
    var atLineStart:panda.core.Bit

    @self
    constructor(out:panda.io.OutputStream)

    @self
    method indentSize:=(indentSize:panda.core.Int32)

    @self
    method level:=(level:panda.core.Int32)

    @override
    method write(b:panda.core.Int8)

    @override
    method write(b->>panda.collections.PrimitiveArray<panda.core.Int8>, offset:panda.core.Int32, length:panda.core.Int32)

    @override
    method write(c:panda.core.Char)

    @override
    method write(c->>panda.collections.PrimitiveArray<panda.core.Char>, offset:panda.core.Int32, length:panda.core.Int32)

    @private
    method indentIfNeeded()

    
    function level():panda.core.Int32

    
    function indentSize():panda.core.Int32
}
package panda.io
@abstract
class InputStream:panda.core.Object {
    @private @class @final
    var BUFFER_SIZE:panda.core.Int32

    @readonly
    var closed:panda.core.Bit

    @pre(!closed)
    method readInt8():panda.core.Int8Wrapper?

    @pre(!closed)
    method readUInt8():panda.core.UInt8Wrapper?

    @pre(!closed)
    method read(bytes:panda.collections.PrimitiveArray<panda.core.Int8>):panda.core.Int32Wrapper?
@post(@return = null | @return <= bytes.length)
@post(bytes.length = @pre(bytes.length))

    @pre(!closed)
    method read(bytes:panda.collections.PrimitiveArray<panda.core.UInt8>):panda.core.Int32Wrapper?
@post(@return = null | @return <= bytes.length)
@post(bytes.length = @pre(bytes.length))

    @pre(!closed)
    method readChar():panda.core.CharWrapper?

    @pre(!closed)
    method read(chars:panda.collections.PrimitiveArray<panda.core.Char>):panda.core.Int32Wrapper?

    @pre(!closed)
    method readLine():panda.core.String?

    
    method lines():panda.collections.PrimitiveArray<panda.core.String>

    @pre(!closed)
    method close()
@post(closed)

    @final @pre(!closed)
    method sendTo(o:panda.io.OutputStream)
@post(closed)

    
    method readAsString():panda.core.String

    
    method readAsInt8Array():panda.collections.PrimitiveArray<panda.core.Int8>

    
    method readAsUInt8Array():panda.collections.PrimitiveArray<panda.core.UInt8>

    @self
    constructor()

    @class
    method $classInit()

}
package panda.io

class LineNumberInputStream:panda.io.FilterInputStream {
    
    var line:panda.core.Int32

    
    var column:panda.core.Int32

    @self
    constructor(raw:panda.io.InputStream)

    @override
    method readInt8():panda.core.Int8Wrapper?

    @override
    method read(bytes:panda.collections.PrimitiveArray<panda.core.Int8>):panda.core.Int32Wrapper?
}
package panda.io

class MemoryInputStream:panda.io.InputStream {
    @private
    var data:panda.collections.PrimitiveArray<panda.core.Int8>

    @private
    var index:panda.core.Int32

    @self
    constructor(source:panda.core.String)

    @self
    constructor(source:panda.collections.PrimitiveArray<panda.core.Int8>)

    @override
    method readInt8():panda.core.Int8Wrapper?
}
package panda.io

class MemoryOutputStream:panda.io.OutputStream {
    @private @class @final
    var DEFAULT_LENGTH:panda.core.Int32

    @private
    var buffer:panda.collections.PrimitiveArray<panda.core.Int8>

    @readonly
    var length:panda.core.Int32

    @self
    constructor()

    @self
    constructor(size:panda.core.Int32)

    @private
    method ensureCapacity(minLength:panda.core.Int32)
@post(buffer.length >= minLength)

    @override @self
    method write(b:panda.core.Int8)

    @override @self
    method write(b->>panda.collections.PrimitiveArray<panda.core.Int8>, offset:panda.core.Int32, length:panda.core.Int32)

    @override @self
    method write(b->>panda.collections.PrimitiveArray<panda.core.Int8>)

    @override @self
    method write(b:panda.core.UInt8)

    @override @self
    method write(b->>panda.collections.PrimitiveArray<panda.core.UInt8>)

    @override @self
    method write(b->>panda.collections.PrimitiveArray<panda.core.UInt8>, offset:panda.core.Int32, length:panda.core.Int32)

    @override @self
    method write(c:panda.core.Char)

    @override @self
    method write(c->>panda.collections.PrimitiveArray<panda.core.Char>)

    @override @self
    method write(c->>panda.collections.PrimitiveArray<panda.core.Char>, offset:panda.core.Int32, length:panda.core.Int32)

    @override @self
    method write(s->>panda.core.String)

    @override @self
    method write(s:panda.core.String, params:panda.core.Object...)

    @pre(i < length)
    function [](i:panda.core.Int32):panda.core.Int8

    
    function ->>():panda.collections.PrimitiveArray<panda.core.Int8>

    
    function ->>():panda.collections.PrimitiveArray<panda.core.UInt8>

    
    function ->>():panda.collections.PrimitiveArray<panda.core.Char>

    @override
    function format(fmt:panda.core.String):panda.core.String

    
    method reset()
@post(length = 0)

    @class
    method $classInit()

}
package panda.io
@abstract
class OutputStream:panda.core.Object {
    @protected
    var closed:panda.core.Bit

    @pre(!closed)
    method write(b:panda.core.Int8)

    @pre(!closed)
    method write(b:panda.core.UInt8)

    @pre(!closed)
    method write(b:panda.collections.PrimitiveArray<panda.core.Int8>)

    @pre(!closed)
    method write(b:panda.collections.PrimitiveArray<panda.core.Int8>, offset:panda.core.Int32, length:panda.core.Int32)

    @pre(!closed)
    method write(b:panda.collections.PrimitiveArray<panda.core.UInt8>)

    @pre(!closed)
    method write(b:panda.collections.PrimitiveArray<panda.core.UInt8>, offset:panda.core.Int32, length:panda.core.Int32)

    @pre(!closed)
    method write(b:panda.collections.ImmutablePrimitiveArray<panda.core.Int8>)

    @pre(!closed)
    method write(b:panda.collections.ImmutablePrimitiveArray<panda.core.Int8>, offset:panda.core.Int32, length:panda.core.Int32)

    @pre(!closed)
    method write(b:panda.collections.ImmutablePrimitiveArray<panda.core.UInt8>)

    @pre(!closed)
    method write(b:panda.collections.ImmutablePrimitiveArray<panda.core.UInt8>, offset:panda.core.Int32, length:panda.core.Int32)

    @pre(!closed)
    method write(c:panda.core.Char)

    @pre(!closed)
    method write(c->>panda.collections.PrimitiveArray<panda.core.Char>)

    @pre(!closed) @pre(offset + length <= c.length)
    method write(c->>panda.collections.PrimitiveArray<panda.core.Char>, offset:panda.core.Int32, length:panda.core.Int32)

    @pre(!closed)
    method write(s->>panda.core.String)

    @private
    method digit(c:panda.core.Char):panda.core.Int32

    @private
    function processField(s:panda.core.String, field:panda.core.String):panda.core.String

    @pre(!closed)
    method write(s:panda.core.String, params:panda.core.Object...)

    @pre(!closed)
    method writeLine(s:panda.core.String, params:panda.core.Object...)

    @pre(!closed)
    method writeLine()

    @pre(!closed)
    method writeLine(c:panda.core.Char)

    @pre(!closed)
    method writeLine(c->>panda.collections.PrimitiveArray<panda.core.Char>)

    @pre(!closed) @pre(offset + length <= c.length)
    method writeLine(c->>panda.collections.PrimitiveArray<panda.core.Char>, offset:panda.core.Int32, length:panda.core.Int32)

    @pre(!closed)
    method writeLine(s->>panda.core.String)

    
    method flush()

    @pre(!closed)
    method close()
@post(closed)

    @self
    constructor()
}
package panda.io

class PushbackInputStream:panda.io.FilterInputStream {
    @private
    var pushbackBuffer:panda.collections.PrimitiveArray<panda.core.Int8>

    @self
    constructor(raw:panda.io.InputStream)

    @override
    method readInt8():panda.core.Int8Wrapper?

    @override
    method read(bytes:panda.collections.PrimitiveArray<panda.core.Int8>):panda.core.Int32Wrapper?

    
    method pushback(v:panda.core.Int8)

    
    method pushback(v:panda.core.UInt8)

    
    method pushback(v:panda.collections.PrimitiveArray<panda.core.Int8>)

    
    method pushback(v:panda.collections.PrimitiveArray<panda.core.UInt8>)

    
    method pushback(c:panda.core.Char)

    
    method pushback(c:panda.collections.PrimitiveArray<panda.core.Char>)

    
    method pushback(c:panda.collections.ListView<panda.core.Char>)

    
    method pushback(s:panda.core.String)
}
package panda.math
@private
class SharedRandom:panda.core.Object {
    @thread
    var count:panda.core.Int32


    @thread @final
    var instance:panda.math.Random


    @self
    constructor()

    @class
    method $initcount():panda.core.Int32

    @class
    method $initinstance():panda.math.Random

    @class
    method $classInit()

}
package panda.math

interface Random {
    @class
    method createRandom():panda.math.Random

    
    method bit():panda.core.Bit

    @class
    method bit():panda.core.Bit

    @math(overflow) @pre(n >= 1)
    method int(n:panda.core.Int32):panda.core.Int32

    @class
    method int(n:panda.core.Int32):panda.core.Int32

    
    method int32():panda.core.Int32

    @class
    method int32():panda.core.Int32

    @abstract
    method int64():panda.core.Int64

    @class
    method int64():panda.core.Int64

    
    method real32():panda.core.Real32
@post(@return >= 0 & @return < 1)

    @class
    method real32():panda.core.Real32
@post(@return >= 0 & @return < 1)

    
    method real64():panda.core.Real64
@post(@return >= 0 & @return < 1)

    @class
    method real64():panda.core.Real64
@post(@return >= 0 & @return < 1)
}
package panda.math

class XorShiftRandom:panda.core.Object (panda.math.Random) {
    @private
    var _seed:panda.core.Int64

    @self
    constructor()

    @self
    constructor(seed:panda.core.Int64)

    @self
    method seed:=(seed:panda.core.Int64)

    @override @math(overflow)
    method int64():panda.core.Int64
}

class $closureThread_panda_62_245972551281:panda.core.Method {
    
    method raw()

    @self
    constructor()
}

class $mutableClosureThread_panda_62_245972551282:panda.core.MutableMethod {
    
    var immutableVersion:$closureThread_panda_62_245972551281

    @self
    constructor(immutableVersion:$closureThread_panda_62_245972551281)

    
    method raw()
}
@$instance panda.collections.PrimitiveArray<panda.core.Int8>
@$instance panda.collections.PrimitiveArray<panda.core.Int16>
@$instance panda.collections.PrimitiveArray<panda.core.Int32>
@$instance panda.collections.PrimitiveArray<panda.core.Int64>
@$instance panda.collections.PrimitiveArray<panda.core.UInt8>
@$instance panda.collections.PrimitiveArray<panda.core.UInt16>
@$instance panda.collections.PrimitiveArray<panda.core.UInt32>
@$instance panda.collections.PrimitiveArray<panda.core.UInt64>
@$instance panda.collections.PrimitiveArray<panda.core.Real32>
@$instance panda.collections.PrimitiveArray<panda.core.Real64>
@$instance panda.collections.PrimitiveArray<panda.core.Char>
@$instance panda.collections.ImmutablePrimitiveArray<panda.core.StackTraceEntry>
@$instance panda.collections.PrimitiveArray<panda.core.String>
@$instance panda.collections.PrimitiveArray<panda.core.Object>
@$instance panda.collections.ImmutablePrimitiveArray<panda.core.Immutable?>
@$instance panda.collections.ImmutablePrimitiveArray<panda.core.Char>
@$instance panda.collections.ImmutablePrimitiveArray<panda.core.Int8>
@$instance panda.collections.PrimitiveArray<panda.io.File>
@$instance panda.collections.ImmutablePrimitiveArray<panda.core.UInt8>
@$instance (panda.core.Int32,panda.core.Object?)
@$instance panda.collections.PrimitiveArray<panda.collections.MutableMapEntry<panda.core.Int32,panda.core.Object?>?>
@$instance panda.collections.PrimitiveArray<panda.core.Object?>
@$instance (panda.core.String,panda.core.OperatingSystemType)
@$instance panda.collections.ImmutablePrimitiveArray<panda.collections.ImmutableMapEntry<panda.core.String,panda.core.OperatingSystemType>?>
@$instance panda.collections.PrimitiveArray<panda.collections.ImmutableMapEntry<panda.core.String,panda.core.OperatingSystemType>?>
@$instance panda.collections.PrimitiveArray<panda.core.OperatingSystemType>
@$instance (panda.core.String,panda.collections.Order)
@$instance panda.collections.ImmutablePrimitiveArray<panda.collections.ImmutableMapEntry<panda.core.String,panda.collections.Order>?>
@$instance panda.collections.PrimitiveArray<panda.collections.ImmutableMapEntry<panda.core.String,panda.collections.Order>?>
@$instance panda.collections.PrimitiveArray<panda.collections.Order>
@$instance (panda.core.Immutable,panda.core.Immutable)
@$instance panda.collections.PrimitiveArray<panda.collections.MutableMapEntry<panda.core.Immutable,panda.core.Immutable>?>
@$instance panda.collections.PrimitiveArray<panda.core.Immutable>
@$instance panda.collections.PrimitiveArray<panda.core.StackTraceEntry>
@$instance panda.collections.PrimitiveArray<panda.core.Immutable?>
@$instance panda.collections.PrimitiveArray<panda.collections.MutableMapEntry<panda.core.String,panda.core.OperatingSystemType>?>
@$instance panda.collections.PrimitiveArray<panda.collections.MutableMapEntry<panda.core.String,panda.collections.Order>?>
@$instance panda.collections.ImmutablePrimitiveArray<panda.core.Int16>
@$instance panda.collections.ImmutablePrimitiveArray<panda.core.Int32>
@$instance panda.collections.ImmutablePrimitiveArray<panda.core.Int64>
@$instance panda.collections.ImmutablePrimitiveArray<panda.core.UInt16>
@$instance panda.collections.ImmutablePrimitiveArray<panda.core.UInt32>
@$instance panda.collections.ImmutablePrimitiveArray<panda.core.UInt64>
@$instance panda.collections.ImmutablePrimitiveArray<panda.core.Real32>
@$instance panda.collections.ImmutablePrimitiveArray<panda.core.Real64>
@$instance panda.collections.ImmutablePrimitiveArray<panda.core.String>
@$instance panda.collections.ImmutablePrimitiveArray<panda.io.File>
@$instance panda.collections.ImmutablePrimitiveArray<panda.core.OperatingSystemType>
@$instance panda.collections.ImmutablePrimitiveArray<panda.collections.Order>
@$instance panda.collections.ImmutablePrimitiveArray<panda.core.Immutable>
