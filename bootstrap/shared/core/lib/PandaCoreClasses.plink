-- This file was autogenerated by the Panda compiler --


package panda.core
@static
class Int8Wrapper:panda.core.SignedInteger {
    @class @static
    var MIN:panda.core.Int8

    @class @static
    var MAX:panda.core.Int8

    @class @static
    var BITS:panda.core.Int32

    
    var value:panda.core.Int8

    @class
    function [..](left:panda.core.Int8, right:panda.core.Int8):panda.collections.Array<panda.core.Int8>

    @class
    function [..](left:panda.core.Int8, right:panda.core.Int8, step:panda.core.Int8):panda.collections.Array<panda.core.Int8>

    @class
    function [...](left:panda.core.Int8):panda.collections.Array<panda.core.Int8>

    @class
    function [...](left:panda.core.Int8, right:panda.core.Int8):panda.collections.Array<panda.core.Int8>

    @class
    function [...](left:panda.core.Int8, right:panda.core.Int8, step:panda.core.Int8):panda.collections.Array<panda.core.Int8>

    @self
    constructor(value:panda.core.Int8)

    @$wrapperMethod
    function +(x:panda.core.Int8):panda.core.Int8

    @$wrapperMethod
    function -(x:panda.core.Int8):panda.core.Int8

    @$wrapperMethod
    function *(x:panda.core.Int8):panda.core.Int8

    @$wrapperMethod
    function /(x:panda.core.Int8):panda.core.Real32

    @$wrapperMethod
    function //(x:panda.core.Int8):panda.core.Int8

    @$wrapperMethod
    function ^(x:panda.core.UInt8):panda.core.Int8

    @$wrapperMethod
    function ^(x:panda.core.Real32):panda.core.Real32

    @$wrapperMethod
    function ||(x:panda.core.Int8):panda.core.Int8

    @$wrapperMethod
    function &&(x:panda.core.Int8):panda.core.Int8

    @$wrapperMethod
    function ~~(x:panda.core.Int8):panda.core.Int8

    @$wrapperMethod
    function !!():panda.core.Int8

    @$wrapperMethod
    function >(x:panda.core.Int8):panda.core.Bit

    @$wrapperMethod
    function >=(x:panda.core.Int8):panda.core.Bit

    @$wrapperMethod
    function <(x:panda.core.Int8):panda.core.Bit

    @$wrapperMethod
    function <=(x:panda.core.Int8):panda.core.Bit

    @$wrapperMethod
    function max(other:panda.core.Int32):panda.core.Int32

    @$wrapperMethod
    function max(other:panda.core.Int64):panda.core.Int64

    @$wrapperMethod
    function max(other:panda.core.UInt32):panda.core.UInt32

    @$wrapperMethod
    function max(other:panda.core.UInt64):panda.core.UInt64

    @$wrapperMethod
    function max(other:panda.core.Real32):panda.core.Real32

    @$wrapperMethod
    function max(other:panda.core.Real64):panda.core.Real64

    @$wrapperMethod
    function min(other:panda.core.Int32):panda.core.Int32

    @$wrapperMethod
    function min(other:panda.core.Int64):panda.core.Int64

    @$wrapperMethod
    function min(other:panda.core.UInt32):panda.core.Int8

    @$wrapperMethod
    function min(other:panda.core.UInt64):panda.core.Int8

    @$wrapperMethod
    function min(other:panda.core.Real32):panda.core.Real32

    @$wrapperMethod
    function min(other:panda.core.Real64):panda.core.Real64

    @$wrapperMethod
    function sign():panda.core.Int32

    @$wrapperMethod
    function sqrt():panda.core.Real64

    @$wrapperMethod
    function sin():panda.core.Real64

    @$wrapperMethod
    function cos():panda.core.Real64

    @$wrapperMethod
    function tan():panda.core.Real64

    @$wrapperMethod
    function abs():panda.core.Int8

    @$wrapperMethod @pre(index >= 0 & index < BITS)
    function [](index:panda.core.Int32):panda.core.Bit

    @$wrapperMethod @pre(left >= 0 & left < BITS & right >= 0 & right < BITS & step != 0)
    function [..](left:panda.core.Int32Wrapper?, right:panda.core.Int32Wrapper?, step:panda.core.Int32):panda.core.Int8

    @external @$wrapperMethod
    function length():panda.core.Int32

    @protected @override
    function convertToString(thousandsSeparator:panda.core.CharWrapper?):panda.core.String

    @override
    function =(o:panda.core.Object):panda.core.Bit

    @override
    function ->>():panda.core.Int8

    @override
    function ->>():panda.core.Int16

    @override
    function ->>():panda.core.Int32

    @override
    function ->>():panda.core.Int64

    @override
    function ->>():panda.core.UInt8

    @override
    function ->>():panda.core.UInt16

    @override
    function ->>():panda.core.UInt32

    @override
    function ->>():panda.core.UInt64

    @override
    function ->>():panda.core.Real32

    @override
    function ->>():panda.core.Real64

    @override
    function ->>():panda.core.String

    @class
    method $classInit()

}
package panda.core
@static
class Int16Wrapper:panda.core.SignedInteger {
    @class @static
    var MIN:panda.core.Int16

    @class @static
    var MAX:panda.core.Int16

    @class @static
    var BITS:panda.core.Int32

    
    var value:panda.core.Int16

    @class
    function [..](left:panda.core.Int16, right:panda.core.Int16):panda.collections.Array<panda.core.Int16>

    @class
    function [..](left:panda.core.Int16, right:panda.core.Int16, step:panda.core.Int16):panda.collections.Array<panda.core.Int16>

    @class
    function [...](left:panda.core.Int16):panda.collections.Array<panda.core.Int16>

    @class
    function [...](left:panda.core.Int16, right:panda.core.Int16):panda.collections.Array<panda.core.Int16>

    @class
    function [...](left:panda.core.Int16, right:panda.core.Int16, step:panda.core.Int16):panda.collections.Array<panda.core.Int16>

    @self
    constructor(value:panda.core.Int16)

    @$wrapperMethod
    function +(x:panda.core.Int16):panda.core.Int16

    @$wrapperMethod
    function -(x:panda.core.Int16):panda.core.Int16

    @$wrapperMethod
    function *(x:panda.core.Int16):panda.core.Int16

    @$wrapperMethod
    function /(x:panda.core.Int16):panda.core.Real32

    @$wrapperMethod
    function //(x:panda.core.Int16):panda.core.Int16

    @$wrapperMethod
    function ^(x:panda.core.UInt16):panda.core.Int16

    @$wrapperMethod
    function ^(x:panda.core.Real32):panda.core.Real32

    @$wrapperMethod
    function ||(x:panda.core.Int16):panda.core.Int16

    @$wrapperMethod
    function &&(x:panda.core.Int16):panda.core.Int16

    @$wrapperMethod
    function ~~(x:panda.core.Int16):panda.core.Int16

    @$wrapperMethod
    function !!():panda.core.Int16

    @$wrapperMethod
    function >(x:panda.core.Int16):panda.core.Bit

    @$wrapperMethod
    function >=(x:panda.core.Int16):panda.core.Bit

    @$wrapperMethod
    function <(x:panda.core.Int16):panda.core.Bit

    @$wrapperMethod
    function <=(x:panda.core.Int16):panda.core.Bit

    @$wrapperMethod
    function max(other:panda.core.Int32):panda.core.Int32

    @$wrapperMethod
    function max(other:panda.core.Int64):panda.core.Int64

    @$wrapperMethod
    function max(other:panda.core.UInt32):panda.core.UInt32

    @$wrapperMethod
    function max(other:panda.core.UInt64):panda.core.UInt64

    @$wrapperMethod
    function max(other:panda.core.Real32):panda.core.Real32

    @$wrapperMethod
    function max(other:panda.core.Real64):panda.core.Real64

    @$wrapperMethod
    function min(other:panda.core.Int32):panda.core.Int32

    @$wrapperMethod
    function min(other:panda.core.Int64):panda.core.Int64

    @$wrapperMethod
    function min(other:panda.core.UInt32):panda.core.Int16

    @$wrapperMethod
    function min(other:panda.core.UInt64):panda.core.Int16

    @$wrapperMethod
    function min(other:panda.core.Real32):panda.core.Real32

    @$wrapperMethod
    function min(other:panda.core.Real64):panda.core.Real64

    @$wrapperMethod
    function sign():panda.core.Int32

    @$wrapperMethod
    function sqrt():panda.core.Real64

    @$wrapperMethod
    function sin():panda.core.Real64

    @$wrapperMethod
    function cos():panda.core.Real64

    @$wrapperMethod
    function tan():panda.core.Real64

    @$wrapperMethod
    function abs():panda.core.Int16

    @$wrapperMethod @pre(index >= 0 & index < BITS)
    function [](index:panda.core.Int32):panda.core.Bit

    @$wrapperMethod @pre(left >= 0 & left < BITS & right >= 0 & right < BITS & step != 0)
    function [..](left:panda.core.Int32Wrapper?, right:panda.core.Int32Wrapper?, step:panda.core.Int32):panda.core.Int16

    @external @$wrapperMethod
    function length():panda.core.Int32

    @protected @override
    function convertToString(thousandsSeparator:panda.core.CharWrapper?):panda.core.String

    @override
    function =(o:panda.core.Object):panda.core.Bit

    @override
    function ->>():panda.core.Int8

    @override
    function ->>():panda.core.Int16

    @override
    function ->>():panda.core.Int32

    @override
    function ->>():panda.core.Int64

    @override
    function ->>():panda.core.UInt8

    @override
    function ->>():panda.core.UInt16

    @override
    function ->>():panda.core.UInt32

    @override
    function ->>():panda.core.UInt64

    @override
    function ->>():panda.core.Real32

    @override
    function ->>():panda.core.Real64

    @override
    function ->>():panda.core.String

    @class
    method $classInit()

}
package panda.core
@static
class Int32Wrapper:panda.core.SignedInteger {
    @class @static
    var MIN:panda.core.Int32

    @class @static
    var MAX:panda.core.Int32

    @class @static
    var BITS:panda.core.Int32

    
    var value:panda.core.Int32

    @class
    function [..](left:panda.core.Int32):panda.collections.Array<panda.core.Int32>

    @class
    function [..](left:panda.core.Int32, right:panda.core.Int32):panda.collections.Array<panda.core.Int32>

    @class
    function [..](left:panda.core.Int32, right:panda.core.Int32, step:panda.core.Int32):panda.collections.Array<panda.core.Int32>

    @class
    function [...](left:panda.core.Int32):panda.collections.Array<panda.core.Int32>

    @class
    function [...](left:panda.core.Int32, right:panda.core.Int32):panda.collections.Array<panda.core.Int32>

    @class
    function [...](left:panda.core.Int32, right:panda.core.Int32, step:panda.core.Int32):panda.collections.Array<panda.core.Int32>

    @self
    constructor(value:panda.core.Int32)

    @$wrapperMethod
    function +(x:panda.core.Int32):panda.core.Int32

    @$wrapperMethod
    function -(x:panda.core.Int32):panda.core.Int32

    @$wrapperMethod
    function *(x:panda.core.Int32):panda.core.Int32

    @$wrapperMethod
    function /(x:panda.core.Int32):panda.core.Real32

    @$wrapperMethod
    function //(x:panda.core.Int32):panda.core.Int32

    @$wrapperMethod
    function ^(x:panda.core.UInt32):panda.core.Int32

    @$wrapperMethod
    function ^(x:panda.core.Real32):panda.core.Real32

    @$wrapperMethod
    function ||(x:panda.core.Int32):panda.core.Int32

    @$wrapperMethod
    function &&(x:panda.core.Int32):panda.core.Int32

    @$wrapperMethod
    function ~~(x:panda.core.Int32):panda.core.Int32

    @$wrapperMethod
    function !!():panda.core.Int32

    @$wrapperMethod
    function >(x:panda.core.Int32):panda.core.Bit

    @$wrapperMethod
    function >=(x:panda.core.Int32):panda.core.Bit

    @$wrapperMethod
    function <(x:panda.core.Int32):panda.core.Bit

    @$wrapperMethod
    function <=(x:panda.core.Int32):panda.core.Bit

    @$wrapperMethod
    function max(other:panda.core.Int32):panda.core.Int32

    @$wrapperMethod
    function max(other:panda.core.Int64):panda.core.Int64

    @$wrapperMethod
    function max(other:panda.core.UInt32):panda.core.UInt32

    @$wrapperMethod
    function max(other:panda.core.UInt64):panda.core.UInt64

    @$wrapperMethod
    function max(other:panda.core.Real32):panda.core.Real32

    @$wrapperMethod
    function max(other:panda.core.Real64):panda.core.Real64

    @$wrapperMethod
    function min(other:panda.core.Int32):panda.core.Int32

    @$wrapperMethod
    function min(other:panda.core.Int64):panda.core.Int64

    @$wrapperMethod
    function min(other:panda.core.UInt32):panda.core.Int32

    @$wrapperMethod
    function min(other:panda.core.UInt64):panda.core.Int32

    @$wrapperMethod
    function min(other:panda.core.Real32):panda.core.Real32

    @$wrapperMethod
    function min(other:panda.core.Real64):panda.core.Real64

    @$wrapperMethod
    function sign():panda.core.Int32

    @$wrapperMethod
    function sqrt():panda.core.Real64

    @$wrapperMethod
    function sin():panda.core.Real64

    @$wrapperMethod
    function cos():panda.core.Real64

    @$wrapperMethod
    function tan():panda.core.Real64

    @$wrapperMethod
    function abs():panda.core.Int32

    @$wrapperMethod @pre(index >= 0 & index < BITS)
    function [](index:panda.core.Int32):panda.core.Bit

    @$wrapperMethod @pre(left >= 0 & left < BITS & right >= 0 & right < BITS & step != 0)
    function [..](left:panda.core.Int32Wrapper?, right:panda.core.Int32Wrapper?, step:panda.core.Int32):panda.core.Int32

    @external @$wrapperMethod
    function length():panda.core.Int32

    @protected @override
    function convertToString(thousandsSeparator:panda.core.CharWrapper?):panda.core.String

    @override
    function =(o:panda.core.Object):panda.core.Bit

    @override
    function ->>():panda.core.Int8

    @override
    function ->>():panda.core.Int16

    @override
    function ->>():panda.core.Int32

    @override
    function ->>():panda.core.Int64

    @override
    function ->>():panda.core.UInt8

    @override
    function ->>():panda.core.UInt16

    @override
    function ->>():panda.core.UInt32

    @override
    function ->>():panda.core.UInt64

    @override
    function ->>():panda.core.Real32

    @override
    function ->>():panda.core.Real64

    @override
    function ->>():panda.core.String

    @class
    method $classInit()

}
package panda.core
@static
class Int64Wrapper:panda.core.SignedInteger {
    @class @static
    var MIN:panda.core.Int64

    @class @static
    var MAX:panda.core.Int64

    @class @static
    var BITS:panda.core.Int32

    
    var value:panda.core.Int64

    @class
    function [..](left:panda.core.Int64, right:panda.core.Int64):panda.collections.Array<panda.core.Int64>

    @class
    function [..](left:panda.core.Int64, right:panda.core.Int64, step:panda.core.Int64):panda.collections.Array<panda.core.Int64>

    @class
    function [...](left:panda.core.Int64):panda.collections.Array<panda.core.Int64>

    @class
    function [...](left:panda.core.Int64, right:panda.core.Int64):panda.collections.Array<panda.core.Int64>

    @class
    function [...](left:panda.core.Int64, right:panda.core.Int64, step:panda.core.Int64):panda.collections.Array<panda.core.Int64>

    @self
    constructor(value:panda.core.Int64)

    @$wrapperMethod
    function +(x:panda.core.Int64):panda.core.Int64

    @$wrapperMethod
    function -(x:panda.core.Int64):panda.core.Int64

    @$wrapperMethod
    function *(x:panda.core.Int64):panda.core.Int64

    @$wrapperMethod
    function /(x:panda.core.Int64):panda.core.Real64

    @$wrapperMethod
    function //(x:panda.core.Int64):panda.core.Int64

    @$wrapperMethod
    function ^(x:panda.core.UInt64):panda.core.Int64

    @$wrapperMethod
    function ^(x:panda.core.Real32):panda.core.Real64

    @$wrapperMethod
    function ||(x:panda.core.Int64):panda.core.Int64

    @$wrapperMethod
    function &&(x:panda.core.Int64):panda.core.Int64

    @$wrapperMethod
    function ~~(x:panda.core.Int64):panda.core.Int64

    @$wrapperMethod
    function !!():panda.core.Int64

    @$wrapperMethod
    function >(x:panda.core.Int64):panda.core.Bit

    @$wrapperMethod
    function >=(x:panda.core.Int64):panda.core.Bit

    @$wrapperMethod
    function <(x:panda.core.Int64):panda.core.Bit

    @$wrapperMethod
    function <=(x:panda.core.Int64):panda.core.Bit

    @$wrapperMethod
    function max(other:panda.core.Int64):panda.core.Int64

    @$wrapperMethod
    function max(other:panda.core.UInt64):panda.core.UInt64

    @$wrapperMethod
    function max(other:panda.core.Real64):panda.core.Real64

    @$wrapperMethod
    function min(other:panda.core.Int64):panda.core.Int64

    @$wrapperMethod
    function min(other:panda.core.Real64):panda.core.Real64

    @$wrapperMethod
    function sign():panda.core.Int32

    @$wrapperMethod
    function sqrt():panda.core.Real64

    @$wrapperMethod
    function sin():panda.core.Real64

    @$wrapperMethod
    function cos():panda.core.Real64

    @$wrapperMethod
    function tan():panda.core.Real64

    @$wrapperMethod
    function abs():panda.core.Int64

    @$wrapperMethod @pre(index >= 0 & index < BITS)
    function [](index:panda.core.Int32):panda.core.Bit

    @$wrapperMethod @pre(left >= 0 & left < BITS & right >= 0 & right < BITS & step != 0)
    function [..](left:panda.core.Int32Wrapper?, right:panda.core.Int32Wrapper?, step:panda.core.Int32):panda.core.Int64

    @external @$wrapperMethod
    function length():panda.core.Int32

    @protected @override
    function convertToString(thousandsSeparator:panda.core.CharWrapper?):panda.core.String

    @override
    function =(o:panda.core.Object):panda.core.Bit

    @override
    function ->>():panda.core.Int8

    @override
    function ->>():panda.core.Int16

    @override
    function ->>():panda.core.Int32

    @override
    function ->>():panda.core.Int64

    @override
    function ->>():panda.core.UInt8

    @override
    function ->>():panda.core.UInt16

    @override
    function ->>():panda.core.UInt32

    @override
    function ->>():panda.core.UInt64

    @override
    function ->>():panda.core.Real32

    @override
    function ->>():panda.core.Real64

    @override
    function ->>():panda.core.String

    @class
    method $classInit()

}
package panda.core
@static
class UInt8Wrapper:panda.core.UnsignedInteger {
    @class @static
    var MIN:panda.core.UInt8

    @class @static
    var MAX:panda.core.UInt8

    @class @static
    var BITS:panda.core.Int32

    
    var value:panda.core.UInt8

    @class
    function [..](left:panda.core.UInt8, right:panda.core.UInt8):panda.collections.Array<panda.core.UInt8>

    @class
    function [..](left:panda.core.UInt8, right:panda.core.UInt8, step:panda.core.Int8):panda.collections.Array<panda.core.UInt8>

    @class
    function [...](left:panda.core.UInt8):panda.collections.Array<panda.core.UInt8>

    @class
    function [...](left:panda.core.UInt8, right:panda.core.UInt8):panda.collections.Array<panda.core.UInt8>

    @class
    function [...](left:panda.core.UInt8, right:panda.core.UInt8, step:panda.core.Int8):panda.collections.Array<panda.core.UInt8>

    @self
    constructor(value:panda.core.UInt8)

    @$wrapperMethod
    function +(x:panda.core.UInt8):panda.core.UInt8

    @$wrapperMethod
    function -(x:panda.core.UInt8):panda.core.UInt8

    @$wrapperMethod
    function *(x:panda.core.UInt8):panda.core.UInt8

    @$wrapperMethod
    function /(x:panda.core.UInt8):panda.core.Real32

    @$wrapperMethod
    function //(x:panda.core.UInt8):panda.core.UInt8

    @$wrapperMethod
    function ^(x:panda.core.UInt8):panda.core.UInt8

    @$wrapperMethod
    function ^(x:panda.core.Real32):panda.core.Real32

    @$wrapperMethod
    function ||(x:panda.core.UInt8):panda.core.UInt8

    @$wrapperMethod
    function &&(x:panda.core.UInt8):panda.core.UInt8

    @$wrapperMethod
    function ~~(x:panda.core.UInt8):panda.core.UInt8

    @$wrapperMethod
    function !!():panda.core.UInt8

    @$wrapperMethod
    function >(x:panda.core.UInt8):panda.core.Bit

    @$wrapperMethod
    function >=(x:panda.core.UInt8):panda.core.Bit

    @$wrapperMethod
    function <(x:panda.core.UInt8):panda.core.Bit

    @$wrapperMethod
    function <=(x:panda.core.UInt8):panda.core.Bit

    @$wrapperMethod
    function max(other:panda.core.Int32):panda.core.Int32

    @$wrapperMethod
    function max(other:panda.core.Int64):panda.core.Int64

    @$wrapperMethod
    function max(other:panda.core.UInt32):panda.core.UInt32

    @$wrapperMethod
    function max(other:panda.core.UInt64):panda.core.UInt64

    @$wrapperMethod
    function max(other:panda.core.Real32):panda.core.Real32

    @$wrapperMethod
    function max(other:panda.core.Real64):panda.core.Real64

    @$wrapperMethod
    function min(other:panda.core.Int32):panda.core.Int32

    @$wrapperMethod
    function min(other:panda.core.Int64):panda.core.Int64

    @$wrapperMethod
    function min(other:panda.core.UInt32):panda.core.UInt8

    @$wrapperMethod
    function min(other:panda.core.UInt64):panda.core.UInt8

    @$wrapperMethod
    function min(other:panda.core.Real32):panda.core.Real32

    @$wrapperMethod
    function min(other:panda.core.Real64):panda.core.Real64

    @$wrapperMethod
    function sqrt():panda.core.Real32

    @$wrapperMethod
    function sin():panda.core.Real32

    @$wrapperMethod
    function cos():panda.core.Real32

    @$wrapperMethod
    function tan():panda.core.Real32

    @$wrapperMethod @pre(index >= 0 & index < BITS)
    function [](index:panda.core.Int32):panda.core.Bit

    @$wrapperMethod @pre(left >= 0 & left < BITS & right >= 0 & right < BITS & step != 0)
    function [..](left:panda.core.Int32Wrapper?, right:panda.core.Int32Wrapper?, step:panda.core.Int32):panda.core.UInt8

    @external @$wrapperMethod
    function length():panda.core.Int32

    @protected @override
    function convertToString(thousandsSeparator:panda.core.CharWrapper?):panda.core.String

    @override
    function =(o:panda.core.Object):panda.core.Bit

    @override
    function ->>():panda.core.Int8

    @override
    function ->>():panda.core.Int16

    @override
    function ->>():panda.core.Int32

    @override
    function ->>():panda.core.Int64

    @override
    function ->>():panda.core.UInt8

    @override
    function ->>():panda.core.UInt16

    @override
    function ->>():panda.core.UInt32

    @override
    function ->>():panda.core.UInt64

    @override
    function ->>():panda.core.Real32

    @override
    function ->>():panda.core.Real64

    @override
    function ->>():panda.core.String

    @class
    method $classInit()

}
package panda.core
@static
class UInt16Wrapper:panda.core.UnsignedInteger {
    @class @static
    var MIN:panda.core.UInt16

    @class @static
    var MAX:panda.core.UInt16

    @class @static
    var BITS:panda.core.Int32

    
    var value:panda.core.UInt16

    @class
    function [..](left:panda.core.UInt16, right:panda.core.UInt16):panda.collections.Array<panda.core.UInt16>

    @class
    function [..](left:panda.core.UInt16, right:panda.core.UInt16, step:panda.core.Int16):panda.collections.Array<panda.core.UInt16>

    @class
    function [...](left:panda.core.UInt16):panda.collections.Array<panda.core.UInt16>

    @class
    function [...](left:panda.core.UInt16, right:panda.core.UInt16):panda.collections.Array<panda.core.UInt16>

    @class
    function [...](left:panda.core.UInt16, right:panda.core.UInt16, step:panda.core.Int16):panda.collections.Array<panda.core.UInt16>

    @self
    constructor(value:panda.core.UInt16)

    @class
    function +(x:panda.core.UInt16, y:panda.core.UInt16):panda.core.UInt16

    @class
    function -(x:panda.core.UInt16, y:panda.core.UInt16):panda.core.UInt16

    @class
    function *(x:panda.core.UInt16, y:panda.core.UInt16):panda.core.UInt16

    @class
    function /(x:panda.core.UInt16, y:panda.core.UInt16):panda.core.Real32

    @class
    function //(x:panda.core.UInt16, y:panda.core.UInt16):panda.core.UInt16

    @class
    function ^(x:panda.core.UInt16, y:panda.core.UInt16):panda.core.UInt16

    @class
    function ^(x:panda.core.UInt16, y:panda.core.Real32):panda.core.Real32

    @class
    function ||(x:panda.core.UInt16, y:panda.core.UInt16):panda.core.UInt16

    @class
    function &&(x:panda.core.UInt16, y:panda.core.UInt16):panda.core.UInt16

    @class
    function ~~(x:panda.core.UInt16, y:panda.core.UInt16):panda.core.UInt16

    @class
    function !!(x:panda.core.UInt16):panda.core.UInt16

    @class
    function >(x:panda.core.UInt16, y:panda.core.UInt16):panda.core.Bit

    @class
    function >=(x:panda.core.UInt16, y:panda.core.UInt16):panda.core.Bit

    @class
    function <(x:panda.core.UInt16, y:panda.core.UInt16):panda.core.Bit

    @class
    function <=(x:panda.core.UInt16, y:panda.core.UInt16):panda.core.Bit

    
    function max(other:panda.core.Int32):panda.core.Int32

    
    function max(other:panda.core.Int64):panda.core.Int64

    
    function max(other:panda.core.UInt32):panda.core.UInt32

    
    function max(other:panda.core.UInt64):panda.core.UInt64

    
    function max(other:panda.core.Real32):panda.core.Real32

    
    function max(other:panda.core.Real64):panda.core.Real64

    
    function min(other:panda.core.Int32):panda.core.Int32

    
    function min(other:panda.core.Int64):panda.core.Int64

    
    function min(other:panda.core.UInt32):panda.core.UInt32

    
    function min(other:panda.core.UInt64):panda.core.UInt64

    
    function min(other:panda.core.Real32):panda.core.Real32

    
    function min(other:panda.core.Real64):panda.core.Real64

    @pre(index >= 0 & index < BITS)
    function [](index:panda.core.Int32):panda.core.Bit

    @pre(left >= 0 & left < BITS & right >= 0 & right < BITS & step != 0)
    function [..](left:panda.core.Int32Wrapper?, right:panda.core.Int32Wrapper?, step:panda.core.Int32):panda.core.UInt16

    @external
    function length():panda.core.Int32

    @protected @override
    function convertToString(thousandsSeparator:panda.core.CharWrapper?):panda.core.String

    @override
    function =(o:panda.core.Object):panda.core.Bit

    @override
    function ->>():panda.core.Int8

    @override
    function ->>():panda.core.Int16

    @override
    function ->>():panda.core.Int32

    @override
    function ->>():panda.core.Int64

    @override
    function ->>():panda.core.UInt8

    @override
    function ->>():panda.core.UInt16

    @override
    function ->>():panda.core.UInt32

    @override
    function ->>():panda.core.UInt64

    @override
    function ->>():panda.core.Real32

    @override
    function ->>():panda.core.Real64

    @override
    function ->>():panda.core.String

    @class
    method $classInit()

}
package panda.core
@static
class UInt32Wrapper:panda.core.UnsignedInteger {
    @class @static
    var MIN:panda.core.UInt32

    @class @static
    var MAX:panda.core.UInt32

    @class @static
    var BITS:panda.core.Int32

    
    var value:panda.core.UInt32

    @class
    function [..](left:panda.core.UInt32, right:panda.core.UInt32):panda.collections.Array<panda.core.UInt32>

    @class
    function [..](left:panda.core.UInt32, right:panda.core.UInt32, step:panda.core.Int32):panda.collections.Array<panda.core.UInt32>

    @class
    function [...](left:panda.core.UInt32):panda.collections.Array<panda.core.UInt32>

    @class
    function [...](left:panda.core.UInt32, right:panda.core.UInt32):panda.collections.Array<panda.core.UInt32>

    @class
    function [...](left:panda.core.UInt32, right:panda.core.UInt32, step:panda.core.Int32):panda.collections.Array<panda.core.UInt32>

    @self
    constructor(value:panda.core.UInt32)

    @class
    function +(x:panda.core.UInt32, y:panda.core.UInt32):panda.core.UInt32

    @class
    function -(x:panda.core.UInt32, y:panda.core.UInt32):panda.core.UInt32

    @class
    function *(x:panda.core.UInt32, y:panda.core.UInt32):panda.core.UInt32

    @class
    function /(x:panda.core.UInt32, y:panda.core.UInt32):panda.core.Real32

    @class
    function //(x:panda.core.UInt32, y:panda.core.UInt32):panda.core.UInt32

    @class
    function ^(x:panda.core.UInt32, y:panda.core.UInt32):panda.core.UInt32

    @class
    function ^(x:panda.core.UInt32, y:panda.core.Real32):panda.core.Real32

    @class
    function ||(x:panda.core.UInt32, y:panda.core.UInt32):panda.core.UInt32

    @class
    function &&(x:panda.core.UInt32, y:panda.core.UInt32):panda.core.UInt32

    @class
    function ~~(x:panda.core.UInt32, y:panda.core.UInt32):panda.core.UInt32

    @class
    function !!(x:panda.core.UInt32):panda.core.UInt32

    @class
    function >(x:panda.core.UInt32, y:panda.core.UInt32):panda.core.Bit

    @class
    function >=(x:panda.core.UInt32, y:panda.core.UInt32):panda.core.Bit

    @class
    function <(x:panda.core.UInt32, y:panda.core.UInt32):panda.core.Bit

    @class
    function <=(x:panda.core.UInt32, y:panda.core.UInt32):panda.core.Bit

    
    function max(other:panda.core.Int64):panda.core.Int64

    
    function max(other:panda.core.UInt32):panda.core.UInt32

    
    function max(other:panda.core.UInt64):panda.core.UInt64

    
    function max(other:panda.core.Real32):panda.core.Real32

    
    function max(other:panda.core.Real64):panda.core.Real64

    
    function min(other:panda.core.Int64):panda.core.Int64

    
    function min(other:panda.core.UInt32):panda.core.UInt32

    
    function min(other:panda.core.UInt64):panda.core.UInt64

    
    function min(other:panda.core.Real32):panda.core.Real32

    
    function min(other:panda.core.Real64):panda.core.Real64

    @pre(index >= 0 & index < BITS)
    function [](index:panda.core.Int32):panda.core.Bit

    @pre(left >= 0 & left < BITS & right >= 0 & right < BITS & step != 0)
    function [..](left:panda.core.Int32Wrapper?, right:panda.core.Int32Wrapper?, step:panda.core.Int32):panda.core.UInt32

    @external
    function length():panda.core.Int32

    @protected @override
    function convertToString(thousandsSeparator:panda.core.CharWrapper?):panda.core.String

    @override
    function =(o:panda.core.Object):panda.core.Bit

    @override
    function ->>():panda.core.Int8

    @override
    function ->>():panda.core.Int16

    @override
    function ->>():panda.core.Int32

    @override
    function ->>():panda.core.Int64

    @override
    function ->>():panda.core.UInt8

    @override
    function ->>():panda.core.UInt16

    @override
    function ->>():panda.core.UInt32

    @override
    function ->>():panda.core.UInt64

    @override
    function ->>():panda.core.Real32

    @override
    function ->>():panda.core.Real64

    @override
    function ->>():panda.core.String

    @class
    method $classInit()

}
package panda.core
@static
class UInt64Wrapper:panda.core.UnsignedInteger {
    @class @static
    var MIN:panda.core.UInt64

    @class @static
    var MAX:panda.core.UInt64

    @class @static
    var BITS:panda.core.Int32

    
    var value:panda.core.UInt64

    @class
    function [..](left:panda.core.UInt64, right:panda.core.UInt64):panda.collections.Array<panda.core.UInt64>

    @class @math(overflow)
    function [..](left:panda.core.UInt64, right:panda.core.UInt64, step:panda.core.Int64):panda.collections.Array<panda.core.UInt64>

    @class @math(overflow)
    function [..](left:panda.core.UInt64, right:panda.core.UInt64, step:panda.core.UInt64):panda.collections.Array<panda.core.UInt64>

    @class
    function [...](left:panda.core.UInt64):panda.collections.Array<panda.core.UInt64>

    @class
    function [...](left:panda.core.UInt64, right:panda.core.UInt64):panda.collections.Array<panda.core.UInt64>

    @class @math(overflow)
    function [...](left:panda.core.UInt64, right:panda.core.UInt64, step:panda.core.Int64):panda.collections.Array<panda.core.UInt64>

    @class @math(overflow)
    function [...](left:panda.core.UInt64, right:panda.core.UInt64, step:panda.core.UInt64):panda.collections.Array<panda.core.UInt64>

    @self
    constructor(value:panda.core.UInt64)

    @class
    function +(x:panda.core.UInt64, y:panda.core.UInt64):panda.core.UInt64

    @class
    function -(x:panda.core.UInt64, y:panda.core.UInt64):panda.core.UInt64

    @class
    function *(x:panda.core.UInt64, y:panda.core.UInt64):panda.core.UInt64

    @class
    function /(x:panda.core.UInt64, y:panda.core.UInt64):panda.core.Real64

    @class
    function //(x:panda.core.UInt64, y:panda.core.UInt64):panda.core.UInt64

    @class
    function ^(x:panda.core.UInt64, y:panda.core.UInt32):panda.core.UInt64

    @class
    function ^(x:panda.core.UInt64, y:panda.core.Real32):panda.core.Real64

    @class
    function ||(x:panda.core.UInt64, y:panda.core.UInt64):panda.core.UInt64

    @class
    function &&(x:panda.core.UInt64, y:panda.core.UInt64):panda.core.UInt64

    @class
    function ~~(x:panda.core.UInt64, y:panda.core.UInt64):panda.core.UInt64

    @class
    function !!(x:panda.core.UInt64):panda.core.UInt64

    @class
    function >(x:panda.core.UInt64, y:panda.core.UInt64):panda.core.Bit

    @class
    function >=(x:panda.core.UInt64, y:panda.core.UInt64):panda.core.Bit

    @class
    function <(x:panda.core.UInt64, y:panda.core.UInt64):panda.core.Bit

    @class
    function <=(x:panda.core.UInt64, y:panda.core.UInt64):panda.core.Bit

    
    function max(other:panda.core.UInt64):panda.core.UInt64

    
    function max(other:panda.core.Real64):panda.core.Real64

    
    function min(other:panda.core.UInt64):panda.core.UInt64

    
    function min(other:panda.core.Real64):panda.core.Real64

    
    function sign():panda.core.Int32

    
    function abs():panda.core.UInt64

    
    function sqrt():panda.core.Real64

    
    function sin():panda.core.Real64

    
    function cos():panda.core.Real64

    
    function tan():panda.core.Real64

    @pre(index >= 0 & index < BITS)
    function [](index:panda.core.Int32):panda.core.Bit

    @pre(left >= 0 & left < BITS & right >= 0 & right < BITS & step != 0)
    function [..](left:panda.core.Int32Wrapper?, right:panda.core.Int32Wrapper?, step:panda.core.Int32):panda.core.UInt64

    @external
    function length():panda.core.Int32

    @protected @override
    function convertToString(thousandsSeparator:panda.core.CharWrapper?):panda.core.String

    @override
    function =(o:panda.core.Object):panda.core.Bit

    @override
    function ->>():panda.core.Int8

    @override
    function ->>():panda.core.Int16

    @override
    function ->>():panda.core.Int32

    @override
    function ->>():panda.core.Int64

    @override
    function ->>():panda.core.UInt8

    @override
    function ->>():panda.core.UInt16

    @override
    function ->>():panda.core.UInt32

    @override
    function ->>():panda.core.UInt64

    @override
    function ->>():panda.core.Real32

    @override
    function ->>():panda.core.Real64

    @override
    function ->>():panda.core.String

    @class
    method $classInit()

}
package panda.core
@static
class Real32Wrapper:panda.core.RealNumber {
    
    var value:panda.core.Real32

    @class
    function [..](left:panda.core.Real32, right:panda.core.Real32):panda.collections.Array<panda.core.Real32>

    @class
    function [..](left:panda.core.Real32, right:panda.core.Real32, step:panda.core.Real32):panda.collections.Array<panda.core.Real32>

    @class
    function [...](left:panda.core.Real32, right:panda.core.Real32):panda.collections.Array<panda.core.Real32>

    @class
    function [...](left:panda.core.Real32, right:panda.core.Real32, step:panda.core.Real32):panda.collections.Array<panda.core.Real32>

    @self
    constructor(value:panda.core.Real32)

    @$wrapperMethod
    function +(x:panda.core.Real32):panda.core.Real32

    @$wrapperMethod
    function -(x:panda.core.Real32):panda.core.Real32

    @$wrapperMethod
    function *(x:panda.core.Real32):panda.core.Real32

    @$wrapperMethod
    function /(x:panda.core.Real32):panda.core.Real32

    @$wrapperMethod
    function ^(x:panda.core.Real32):panda.core.Real32

    @$wrapperMethod
    function >(x:panda.core.Real32):panda.core.Bit

    @$wrapperMethod
    function >=(x:panda.core.Real32):panda.core.Bit

    @$wrapperMethod
    function <(x:panda.core.Real32):panda.core.Bit

    @$wrapperMethod
    function <=(x:panda.core.Real32):panda.core.Bit

    @$wrapperMethod
    function =(x:panda.core.Real32):panda.core.Bit

    @$wrapperMethod
    function max(other:panda.core.Real32):panda.core.Real32

    @$wrapperMethod
    function max(other:panda.core.Real64):panda.core.Real64

    @$wrapperMethod
    function min(other:panda.core.Real32):panda.core.Real32

    @$wrapperMethod
    function min(other:panda.core.Real64):panda.core.Real64

    @$wrapperMethod
    function sign():panda.core.Int32

    @$wrapperMethod
    function abs():panda.core.Real32

    @external @$wrapperMethod
    function isInfinite():panda.core.Bit

    @external @$wrapperMethod
    function isNaN():panda.core.Bit

    @external @$wrapperMethod
    function sqrt():panda.core.Real32

    @external @$wrapperMethod
    function sin():panda.core.Real32

    @external @$wrapperMethod
    function cos():panda.core.Real32

    
    function tan():panda.core.Real32

    @protected @override
    function convertToString(thousandsSeparator:panda.core.CharWrapper?):panda.core.String

    @override
    function =(o:panda.core.Object):panda.core.Bit

    @override
    function ->>():panda.core.Int8

    @override
    function ->>():panda.core.Int16

    @override
    function ->>():panda.core.Int32

    @override
    function ->>():panda.core.Int64

    @override
    function ->>():panda.core.UInt8

    @override
    function ->>():panda.core.UInt16

    @override
    function ->>():panda.core.UInt32

    @override
    function ->>():panda.core.UInt64

    @override
    function ->>():panda.core.Real32

    @override
    function ->>():panda.core.Real64
}
package panda.core
@static
class Real64Wrapper:panda.core.RealNumber {
    @class @static
    var E:panda.core.Real64

    @class @static
    var PI:panda.core.Real64

    
    var value:panda.core.Real64

    @class
    function [..](left:panda.core.Real64, right:panda.core.Real64):panda.collections.Array<panda.core.Real64>

    @class
    function [..](left:panda.core.Real64, right:panda.core.Real64, step:panda.core.Real64):panda.collections.Array<panda.core.Real64>

    @class
    function [...](left:panda.core.Real64, right:panda.core.Real64):panda.collections.Array<panda.core.Real64>

    @class
    function [...](left:panda.core.Real64, right:panda.core.Real64, step:panda.core.Real64):panda.collections.Array<panda.core.Real64>

    @class @external
    function atan2(y:panda.core.Real64, x:panda.core.Real64):panda.core.Real64

    @self
    constructor(value:panda.core.Real64)

    @$wrapperMethod
    function +(x:panda.core.Real64):panda.core.Real64

    @$wrapperMethod
    function -(x:panda.core.Real64):panda.core.Real64

    @$wrapperMethod
    function *(x:panda.core.Real64):panda.core.Real64

    @$wrapperMethod
    function /(x:panda.core.Real64):panda.core.Real64

    @$wrapperMethod
    function ^(x:panda.core.Real64):panda.core.Real64

    @$wrapperMethod
    function >(x:panda.core.Real64):panda.core.Bit

    @$wrapperMethod
    function >=(x:panda.core.Real64):panda.core.Bit

    @$wrapperMethod
    function <(x:panda.core.Real64):panda.core.Bit

    @$wrapperMethod
    function <=(x:panda.core.Real64):panda.core.Bit

    @$wrapperMethod
    function =(x:panda.core.Real64):panda.core.Bit

    @$wrapperMethod
    function max(other:panda.core.Real64):panda.core.Real64

    @$wrapperMethod
    function min(other:panda.core.Real64):panda.core.Real64

    @$wrapperMethod
    function sign():panda.core.Int32

    @$wrapperMethod
    function abs():panda.core.Real64

    @external @$wrapperMethod
    function isInfinite():panda.core.Bit

    @external @$wrapperMethod
    function isNaN():panda.core.Bit

    @external @$wrapperMethod
    function sqrt():panda.core.Real64

    @external @$wrapperMethod
    function sin():panda.core.Real64

    @external @$wrapperMethod
    function cos():panda.core.Real64

    
    function tan():panda.core.Real64

    @protected @override
    function convertToString(thousandsSeparator:panda.core.CharWrapper?):panda.core.String

    @override
    function =(o:panda.core.Object):panda.core.Bit

    @override
    function ->>():panda.core.Int8

    @override
    function ->>():panda.core.Int16

    @override
    function ->>():panda.core.Int32

    @override
    function ->>():panda.core.Int64

    @override
    function ->>():panda.core.Real32

    @override
    function ->>():panda.core.UInt8

    @override
    function ->>():panda.core.UInt16

    @override
    function ->>():panda.core.UInt32

    @override
    function ->>():panda.core.UInt64

    @override
    function ->>():panda.core.Real64

    @override
    function ->>():panda.core.String

    @class
    method $classInit()

}
package panda.core
@static
class BitWrapper:panda.core.Primitive {
    
    var value:panda.core.Bit

    @self
    constructor(value:panda.core.Bit)

    @override
    function =(o:panda.core.Object):panda.core.Bit

    @override @preOr(fmt = "" | fmt = "panda")
    function format(fmt:panda.core.String):panda.core.String

    
    function ->>():panda.core.Bit
}
package panda.core
@static
class CharWrapper:panda.core.Primitive {
    @class @static
    var MIN:panda.core.Char

    @class @static
    var MAX:panda.core.Char

    
    var value:panda.core.Char

    @class
    function [..](left:panda.core.Char, right:panda.core.Char):panda.collections.Array<panda.core.Char>

    @class
    function [..](left:panda.core.Char, right:panda.core.Char, step:panda.core.Int16):panda.collections.Array<panda.core.Char>

    @class
    function [...](left:panda.core.Char):panda.collections.Array<panda.core.Char>

    @class
    function [...](left:panda.core.Char, right:panda.core.Char):panda.collections.Array<panda.core.Char>

    @class
    function [...](left:panda.core.Char, right:panda.core.Char, step:panda.core.Int16):panda.collections.Array<panda.core.Char>

    @self
    constructor(value:panda.core.Char)

    
    function isWhitespace():panda.core.Bit

    @class
    function *(c:panda.core.Char, i:panda.core.Int32):panda.core.String

    @class
    function *(i:panda.core.Int32, c:panda.core.Char):panda.core.String

    @override
    function =(o:panda.core.Object):panda.core.Bit

    @override
    function ->>():panda.core.String

    
    function ->>():panda.core.Char

    @override @preOr(fmt = "" | fmt = "panda")
    function format(fmt:panda.core.String):panda.core.String

    @class
    method $classInit()

}
package panda.core

class AssertionError:panda.core.SafetyError {
    @self
    constructor()

    @self
    constructor(message:panda.core.String)
}
package panda.core

class CastError:panda.core.Error {
    @self
    constructor(message:panda.core.String)
}
package panda.core
@static
class Class:panda.core.Immutable {
    @readonly
    var name:panda.core.String

    @readonly
    var superclass:panda.core.Class

    @private
    var containsPointers:panda.core.Bit

    @private
    var overridesFinalize:panda.core.Bit

    
    function simpleName():panda.core.String

    @override
    function format(fmt:panda.core.String):panda.core.String

    @self
    constructor()
}
package panda.core
@abstract
class Enumeration:panda.core.Value {
    @self
    constructor()
}
package panda.core
@private
class StackTraceEntry:panda.core.Value {
    
    var fileName:panda.core.String

    
    var className:panda.core.String

    
    var methodName:panda.core.String

    
    var line:panda.core.Int32

    @override
    function format(fmt:panda.core.String):panda.core.String

    @self
    constructor()
}
package panda.core

class Error:panda.core.Value {
    
    var message:panda.core.String

    
    var cause:panda.core.Error?

    
    var stack:panda.collections.ImmutableArray<panda.core.StackTraceEntry>

    @self
    constructor()

    @self
    constructor(message:panda.core.String)

    @self
    constructor(message:panda.core.String, cause:panda.core.Error?)

    @override
    function format(fmt:panda.core.String):panda.core.String

    @protected @external
    function getStackTrace():panda.collections.ImmutableArray<panda.core.StackTraceEntry>
}
package panda.core

class Exception:panda.core.Error {
    @self
    constructor()

    @self
    constructor(message:panda.core.String)

    @self
    constructor(message:panda.core.String, cause:panda.core.Error)
}
package panda.core
@abstract
class Immutable:panda.core.Object {
    @self
    constructor()
}
package panda.core
@abstract
class Integer:panda.core.Number {
    @self
    constructor()
}
package panda.core

class InvariantError:panda.core.AssertionError {
    @self
    constructor()

    @self
    constructor(message:panda.core.String)
}
package panda.core
@static
class Matcher:panda.core.Object {
    @private @class @static
    var REPLACEMENT_GROUPS:panda.core.RegularExpression

    @private
    var _searchText:panda.core.String

    @private
    var regex:panda.core.RegularExpression

    @private
    var matched:panda.core.Bit

    @private
    var replacementIndex:panda.core.Int32

    @self
    constructor(regex:panda.core.RegularExpression, searchText:panda.core.String)

    @self
    method searchText:=(text:panda.core.String)

    @self
    method matches():panda.core.Bit

    @self @pre(matched | replacementIndex = 0)
    method find():panda.core.Bit

    @self
    method find(start:panda.core.Int32):panda.core.Bit

    @pre(matched)
    function group(i:panda.core.Int32):panda.core.String

    @pre(matched)
    function groupCount():panda.core.Int32

    @pre(matched)
    function start():panda.core.Int32

    @pre(matched)
    function end():panda.core.Int32

    @limited @pre(matched)
    method appendReplacement(target:panda.core.MutableString, replacement:panda.core.String)

    @limited
    method appendReplacement(target:panda.core.MutableString, replacement:panda.core.String, allowGroupReferences:panda.core.Bit)

    @limited
    method appendTail(target:panda.core.MutableString)

    @private @class @external
    method setText(nativeHandle:$NativePointer, text:panda.core.String)

    @private @class @external
    method matches(nativeHandle:$NativePointer):panda.core.Bit

    @private @class @external
    method find(nativeHandle:$NativePointer, startIndex:panda.core.Int32):panda.core.Bit

    @private @class @external
    function group(nativeHandle:$NativePointer, group:panda.core.Int32):panda.core.String

    @private @class @external
    function groupCount(nativeHandle:$NativePointer):panda.core.Int32

    @private @class @external
    function start(nativeHandle:$NativePointer):panda.core.Int32

    @private @class @external
    function end(nativeHandle:$NativePointer):panda.core.Int32

    
    function searchText():panda.core.String

    @class
    method $classInit()

}
package panda.core

class MathError:panda.core.SafetyError {
    @self
    constructor(message:panda.core.String)
}
package panda.core
@static
class Method:panda.core.Immutable {
    @private
    var rawPtr:$NativePointer

    @private
    var shimmedPtr:$NativePointer

    @self
    constructor(rawPtr:$NativePointer, shimmedPtr:$NativePointer)

    
    function ->>():panda.core.MutableMethod
}
package panda.core
@static
class MutableMethod:panda.core.Object {
    @private
    var rawPtr:$NativePointer

    @private
    var shimmedPtr:$NativePointer

    @self
    constructor(rawPtr:$NativePointer, shimmedPtr:$NativePointer)
}
package panda.core
@static
class MutableString:panda.core.Object {
    @private @class @static
    var DEFAULT_LENGTH:panda.core.Int32

    @private
    var chars:panda.collections.Array<panda.core.Char>

    @readonly
    var length:panda.core.Int32

    @self
    constructor()

    @self
    constructor(s:panda.core.String)

    @pre(i < length)
    function [](i:panda.core.Int32):panda.core.Char

    @self @pre(i < length)
    method []:=(i:panda.core.Int32, c:panda.core.Char)

    @self
    method trimToLength()
@post(length = @pre(length))
@post(chars.length = length)

    @private @self @pre(minLength >= 0)
    method ensureCapacity(minLength:panda.core.Int32)
@post(chars.length >= minLength)

    @self
    method [..]:=(start:panda.core.Int32, end:panda.core.Int32, s:panda.core.String)

    @self
    method [..]:=(start:panda.core.Int32Wrapper?, end:panda.core.Int32Wrapper?, s:panda.core.String)

    @self @pre(step != 0)
    method [..]:=(start:panda.core.Int32, end:panda.core.Int32, step:panda.core.Int32, s:panda.core.String)

    @self
    method [..]:=(start:panda.core.Int32Wrapper?, end:panda.core.Int32Wrapper?, step:panda.core.Int32, s:panda.core.String)

    @self
    method [...]:=(start:panda.core.Int32, end:panda.core.Int32, s:panda.core.String)

    @self
    method [...]:=(start:panda.core.Int32Wrapper?, end:panda.core.Int32Wrapper?, s:panda.core.String)

    @self @pre(step != 0)
    method [...]:=(start:panda.core.Int32, end:panda.core.Int32, step:panda.core.Int32, s:panda.core.String)

    @self
    method [...]:=(start:panda.core.Int32Wrapper?, end:panda.core.Int32Wrapper?, step:panda.core.Int32, s:panda.core.String)

    @self
    method insert(index:panda.core.Int32, s:panda.core.String)

    @self
    method remove(start:panda.core.Int32, end:panda.core.Int32)

    @self
    method replace(search:panda.core.String, replacement:panda.core.String)

    @self
    method replace(regex:panda.core.RegularExpression, replacement:panda.core.String)

    @self
    method replace(regex:panda.core.RegularExpression, replacement:panda.core.String, allowGroupReferences:panda.core.Bit)

    @self
    method delete(search:panda.core.String)

    @self
    method delete(regex:panda.core.RegularExpression)

    @self
    method clear()

    @self
    method append(c:panda.core.Char)
@post(length = @pre(length) + 1)

    @self
    method append(s->>panda.core.String)
@post(length = @pre(length) + s.length)

    
    function startsWith(s:panda.core.String):panda.core.Bit

    
    function endsWith(s:panda.core.String):panda.core.Bit

    
    function in(s:panda.core.String):panda.core.Bit

    
    function in(c:panda.core.Char):panda.core.Bit

    
    function indexOf(s:panda.core.String):panda.core.Int32Wrapper?

    @pre(start >= 0) @pre(start <= length)
    function indexOf(s:panda.core.String, start:panda.core.Int32):panda.core.Int32Wrapper?
@post(@return = null | @return < length)

    
    function indexOf(c:panda.core.Char):panda.core.Int32Wrapper?

    @pre(start >= 0) @pre(start <= length)
    function indexOf(c:panda.core.Char, start:panda.core.Int32):panda.core.Int32Wrapper?
@post(@return = null | self[@return] = c)

    
    function lastIndexOf(c:panda.core.Char):panda.core.Int32Wrapper?

    @pre(start >= 0) @pre(start <= length)
    function lastIndexOf(c:panda.core.Char, start:panda.core.Int32):panda.core.Int32Wrapper?
@post(@return = null | self[@return] = c)

    @pre(start >= 0 & start <= length) @pre(end >= 0 & end <= length)
    function [..](start:panda.core.Int32, end:panda.core.Int32):panda.core.String

    
    function [..](start:panda.core.Int32, end:panda.core.Int32, step:panda.core.Int32):panda.core.String

    
    function [..](start:panda.core.Int32Wrapper?, end:panda.core.Int32Wrapper?, step:panda.core.Int32):panda.core.String

    @pre(start >= 0 & start < length) @pre(end >= 0 & end < length)
    function [...](start:panda.core.Int32, end:panda.core.Int32):panda.core.String

    
    function [...](start:panda.core.Int32, end:panda.core.Int32, step:panda.core.Int32):panda.core.String

    
    function [...](start:panda.core.Int32Wrapper?, end:panda.core.Int32Wrapper?, step:panda.core.Int32):panda.core.String

    @override @math(overflow)
    function hash():panda.core.Int32

    @override
    function =(o:panda.core.Object):panda.core.Bit

    @override
    function ->>():panda.core.String

    @override
    function format(fmt:panda.core.String):panda.core.String

    @class @safeReturn
    function ->>(s->>panda.core.String):panda.core.MutableString

    @class
    method $classInit()

}
package panda.core
@abstract
class Number:panda.core.Primitive {
    @private @class @static
    var FORMAT_PATTERN:panda.core.RegularExpression

    @abstract
    function convertToString(thousandsSeparator:panda.core.CharWrapper?):panda.core.String

    @protected @class
    function convertToString(value:panda.core.Int64, thousandsSeparator:panda.core.CharWrapper?):panda.core.String

    @protected @class
    function convertToString(value:panda.core.UInt64, thousandsSeparator:panda.core.CharWrapper?):panda.core.String

    @protected @class
    function convertToString(value:panda.core.Real64, thousandsSeparator:panda.core.CharWrapper?):panda.core.String

    @override @preOr(true)
    function format(fmt:panda.core.String):panda.core.String

    @abstract
    function ->>():panda.core.Int8

    @abstract
    function ->>():panda.core.Int16

    @abstract
    function ->>():panda.core.Int32

    @abstract
    function ->>():panda.core.Int64

    @abstract
    function ->>():panda.core.UInt8

    @abstract
    function ->>():panda.core.UInt16

    @abstract
    function ->>():panda.core.UInt32

    @abstract
    function ->>():panda.core.UInt64

    @abstract
    function ->>():panda.core.Real32

    @abstract
    function ->>():panda.core.Real64

    @override
    function hash():panda.core.Int32

    @self
    constructor()

    @class
    method $classInit()

}
package panda.core
@abstract
class Object {
    @private
    var cl:panda.core.Class

    @static
    function $class():panda.core.Class

    @external
    function hash():panda.core.Int32

    
    function =(o:panda.core.Object):panda.core.Bit

    
    function ->>():panda.core.String

    @pre(fmt.length = 0)
    function format(fmt:panda.core.String):panda.core.String

    
    method finalize()

    @class
    function parse(inStream:panda.io.InputStream):panda.core.Object?

    @self
    constructor()
}
package panda.core

class OverflowError:panda.core.SafetyError {
    @self
    constructor(message:panda.core.String)
}
package panda.core

class MainThread:panda.threads.Thread {
    @external @override
    method run()

    
    method startMainThread()

    @self
    constructor()
}
package panda.core
@static
class Panda:panda.core.Object {
    @class
    method start()

    @class
    method format(o:panda.core.Object?, fmt:panda.core.String):panda.core.String

    @class @external
    method currentTime():panda.core.Int64

    @class
    function pow(a:panda.core.Int32, b:panda.core.UInt32):panda.core.Int32

    @class
    function pow(a:panda.core.Int64, b:panda.core.UInt32):panda.core.Int64

    @class
    function pow(a:panda.core.UInt32, b:panda.core.UInt32):panda.core.UInt32

    @class
    function pow(a:panda.core.UInt64, b:panda.core.UInt64):panda.core.UInt64

    @class @external
    function pow(a:panda.core.Real32, b:panda.core.Int32):panda.core.Real32

    @class @external
    function pow(a:panda.core.Real32, b:panda.core.Real32):panda.core.Real32

    @class @external
    function pow(a:panda.core.Real64, b:panda.core.Int32):panda.core.Real64

    @class @external
    function pow(a:panda.core.Real64, b:panda.core.Real64):panda.core.Real64

    @class
    method nullableEquals(o1:panda.core.Object?, o2:panda.core.Object?):panda.core.Bit

    @class
    function id(o:panda.core.Object):panda.core.String

    @class
    method dumpStack()

    @class
    method log(o:panda.core.Object)

    @class @external
    method debugWrite(i:panda.core.Int32)

    @class @external
    method debugWrite(o:panda.core.Object)

    @class @external
    method debugWritePointer(o:panda.core.Object)

    @class
    function instanceOfInt8(i:panda.core.Int64):panda.core.Bit

    @class
    function instanceOfInt8(i:panda.core.UInt64):panda.core.Bit

    @class
    function instanceOfInt8(o:panda.core.Object?, nullable:panda.core.Bit):panda.core.Bit

    @class
    function instanceOfInt16(i:panda.core.Int64):panda.core.Bit

    @class
    function instanceOfInt16(i:panda.core.UInt64):panda.core.Bit

    @class
    function instanceOfInt16(o:panda.core.Object?, nullable:panda.core.Bit):panda.core.Bit

    @class
    function instanceOfInt32(i:panda.core.Int64):panda.core.Bit

    @class
    function instanceOfInt32(i:panda.core.UInt64):panda.core.Bit

    @class
    function instanceOfInt32(o:panda.core.Object?, nullable:panda.core.Bit):panda.core.Bit

    @class
    function instanceOfInt64(i:panda.core.Int64):panda.core.Bit

    @class
    function instanceOfInt64(i:panda.core.UInt64):panda.core.Bit

    @class
    function instanceOfInt64(o:panda.core.Object?, nullable:panda.core.Bit):panda.core.Bit

    @class
    function instanceOfUInt8(i:panda.core.Int64):panda.core.Bit

    @class
    function instanceOfUInt8(i:panda.core.UInt64):panda.core.Bit

    @class
    function instanceOfUInt8(o:panda.core.Object?, nullable:panda.core.Bit):panda.core.Bit

    @class
    function instanceOfUInt16(i:panda.core.Int64):panda.core.Bit

    @class
    function instanceOfUInt16(i:panda.core.UInt64):panda.core.Bit

    @class
    function instanceOfUInt16(o:panda.core.Object?, nullable:panda.core.Bit):panda.core.Bit

    @class
    function instanceOfUInt32(i:panda.core.Int64):panda.core.Bit

    @class
    function instanceOfUInt32(i:panda.core.UInt64):panda.core.Bit

    @class
    function instanceOfUInt32(o:panda.core.Object?, nullable:panda.core.Bit):panda.core.Bit

    @class
    function instanceOfUInt64(i:panda.core.Int64):panda.core.Bit

    @class
    function instanceOfUInt64(i:panda.core.UInt64):panda.core.Bit

    @class
    function instanceOfUInt64(o:panda.core.Object?, nullable:panda.core.Bit):panda.core.Bit

    @class
    function instanceOfReal32(o:panda.core.Object?, nullable:panda.core.Bit):panda.core.Bit

    @class
    function instanceOfReal64(o:panda.core.Object?, nullable:panda.core.Bit):panda.core.Bit

    @class
    function instanceOfBit(b:panda.core.Bit):panda.core.Bit

    @class
    function instanceOfBit(o:panda.core.Object?, nullable:panda.core.Bit):panda.core.Bit

    @class
    function instanceOfChar(i:panda.core.Int64):panda.core.Bit

    @class
    function instanceOfChar(i:panda.core.UInt64):panda.core.Bit

    @class
    function instanceOfChar(c:panda.core.Char):panda.core.Bit

    @class
    function instanceOfChar(o:panda.core.Object?, nullable:panda.core.Bit):panda.core.Bit

    @class
    method checkCast(o:panda.core.Object?, c:panda.core.Class, nullable:panda.core.Bit)

    @class
    method getThreadLocalBit(index:panda.core.Int32, initializer:()=>(panda.core.Bit)):panda.core.Bit

    @class
    method getThreadLocalInt8(index:panda.core.Int32, initializer:$NativePointer):panda.core.Int8

    @class
    method getThreadLocalInt16(index:panda.core.Int32, initializer:$NativePointer):panda.core.Int16

    @class
    method getThreadLocalInt32(index:panda.core.Int32, initializer:$NativePointer):panda.core.Int32

    @class
    method getThreadLocalInt64(index:panda.core.Int32, initializer:$NativePointer):panda.core.Int64

    @class
    method getThreadLocalChar(index:panda.core.Int32, initializer:$NativePointer):panda.core.Char

    @class
    method getThreadLocalReal32(index:panda.core.Int32, initializer:$NativePointer):panda.core.Real32

    @class
    method getThreadLocalReal64(index:panda.core.Int32, initializer:$NativePointer):panda.core.Real64

    @class
    method getThreadLocalObject(index:panda.core.Int32, initializer:$NativePointer):panda.core.Object?

    @class
    method setThreadLocalBit(index:panda.core.Int32, value:panda.core.Bit)

    @class
    method setThreadLocalInt8(index:panda.core.Int32, value:panda.core.Int8)

    @class
    method setThreadLocalInt16(index:panda.core.Int32, value:panda.core.Int16)

    @class
    method setThreadLocalInt32(index:panda.core.Int32, value:panda.core.Int32)

    @class
    method setThreadLocalInt64(index:panda.core.Int32, value:panda.core.Int64)

    @class
    method setThreadLocalChar(index:panda.core.Int32, value:panda.core.Char)

    @class
    method setThreadLocalReal32(index:panda.core.Int32, value:panda.core.Real32)

    @class
    method setThreadLocalReal64(index:panda.core.Int32, value:panda.core.Real64)

    @class
    method setThreadLocalObject(index:panda.core.Int32, value:panda.core.Object?)

    @class
    method failAssert(message:panda.core.String?)

    @class @external
    method debugAllocations()

    @class @external
    method allocThreadLocal():panda.core.Int32

    @class @external
    method getThreadLocals(t:panda.threads.Thread):panda.collections.HashMap

    @class @external
    function instanceOf(o:panda.core.Object?, c:panda.core.Class, nullable:panda.core.Bit):panda.core.Bit

    @class @external
    method real32Bits(r:panda.core.Real32):panda.core.Int32

    @class @external
    method real64Bits(r:panda.core.Real64):panda.core.Int64

    @class @external
    method callBitFunction(f:$NativePointer):panda.core.Bit

    @class @external
    method callInt8Function(f:$NativePointer):panda.core.Int8

    @class @external
    method callInt16Function(f:$NativePointer):panda.core.Int16

    @class @external
    method callInt32Function(f:$NativePointer):panda.core.Int32

    @class @external
    method callInt64Function(f:$NativePointer):panda.core.Int64

    @class @external
    method callCharFunction(f:$NativePointer):panda.core.Char

    @class @external
    method callReal32Function(f:$NativePointer):panda.core.Real32

    @class @external
    method callReal64Function(f:$NativePointer):panda.core.Real64

    @class @external
    method callObjectFunction(f:$NativePointer):panda.core.Object?

    @self
    constructor()
}
package panda.core

class PandaDataParser:panda.core.Object {
    
    var data:panda.io.PushbackInputStream

    
    var index:panda.core.Int32

    @self
    constructor(data:panda.core.String)

    @self
    constructor(data:panda.io.InputStream)

    
    method peek():panda.core.Char

    
    method readOptional():panda.core.CharWrapper?

    
    method read():panda.core.Char

    
    method checkNext(c:panda.core.Char):panda.core.Bit

    
    method expect(c:panda.core.Char)

    
    method skipWhitespace()

    @self
    method parse():panda.core.Immutable?

    @private
    method readValue():panda.core.Immutable?

    @private
    method readArray():panda.collections.ImmutableArray<panda.core.Immutable?>

    @private
    method readMap():panda.collections.ImmutableHashMap

    @private
    method readNull():panda.core.Immutable?

    @private
    method readTrue():panda.core.Bit

    @private
    method readFalse():panda.core.Bit

    @private
    method readString():panda.core.String

    @private @pre(base >= 2 & base <= 36)
    function parseInt(s:panda.core.String, base:panda.core.Int32):panda.core.Int64

    @private
    function isDigit(c:panda.core.Char, base:panda.core.Int32):panda.core.Bit

    @private
    method readNumber():panda.core.Number
}
package panda.core

class ParameterError:panda.core.SafetyError {
    @self
    constructor()

    @self
    constructor(message:panda.core.String)

    @self
    constructor(message:panda.core.String, cause:panda.core.Error)
}
package panda.core

class ParseException:panda.core.Exception {
    @self
    constructor()

    @self
    constructor(message:panda.core.String)

    @self
    constructor(message:panda.core.String, cause:panda.core.Error)
}
package panda.core

class PostconditionError:panda.core.AssertionError {
    @self
    constructor()

    @self
    constructor(message:panda.core.String)
}
package panda.core

class PreconditionError:panda.core.AssertionError {
    @self
    constructor()

    @self
    constructor(message:panda.core.String)
}
package panda.core
@abstract
class Primitive:panda.core.Value {
    @self
    constructor()
}
package panda.core
@abstract
class RealNumber:panda.core.Number {
    @self
    constructor()
}
package panda.core
@static
class RegularExpression:panda.core.Immutable {
    @class @static
    var MULTILINE:panda.core.Int32

    @readonly
    var pattern:panda.core.String

    
    var nativeHandle:$NativePointer

    @self
    constructor(pattern:panda.core.String)

    @self
    constructor(pattern:panda.core.String, flags:panda.core.Int32)

    @safeReturn
    function matcher(text:panda.core.String):panda.core.Matcher

    @override
    function format(fmt:panda.core.String):panda.core.String

    @override
    method finalize()

    @class
    method escape(s:panda.core.String):panda.core.String

    @external
    function clone():panda.core.RegularExpression

    @private @external
    method compile(regex:panda.core.String, flags:panda.core.Int32)

    @private @class @external
    method close(nativeHandle:$NativePointer)

    @class
    method $classInit()

}
package panda.core

class SafetyError:panda.core.Error {
    @self
    constructor()

    @self
    constructor(message:panda.core.String)

    @self
    constructor(message:panda.core.String, cause:panda.core.Error)
}
package panda.core
@abstract
class SignedInteger:panda.core.Integer {
    @self
    constructor()
}
package panda.core
@static
class String:panda.core.Value {
    @private
    var chars:panda.collections.ImmutableArray<panda.core.Char>

    @self
    constructor(chars:panda.collections.ImmutableArray<panda.core.Char>)

    @self
    constructor(chars:panda.collections.Array<panda.core.Char>)

    
    function length():panda.core.Int32
@post(@return >= 0)

    
    function [](i:panda.core.Int32):panda.core.Char

    @pre(maxResults > 0)
    function split(delimiter:panda.core.String, maxResults:panda.core.Int32):panda.collections.Array<panda.core.String>

    
    function split(delimiter:panda.core.String):panda.collections.Array<panda.core.String>

    @pre(maxResults > 0)
    function split(delimiter:panda.core.RegularExpression, maxResults:panda.core.Int32):panda.collections.Array<panda.core.String>

    
    function split(delimiter:panda.core.RegularExpression):panda.collections.Array<panda.core.String>

    
    function matches(regex:panda.core.RegularExpression):panda.core.Bit

    @class
    function in(haystack:panda.core.String, needle:panda.core.RegularExpression):panda.core.Bit

    
    function parse(regex:panda.core.RegularExpression):panda.collections.Array<panda.core.String>?

    @pre(search.length > 0)
    function replace(search:panda.core.String, replacement:panda.core.String):panda.core.String

    
    function replace(search:panda.core.RegularExpression, replacement:panda.core.String):panda.core.String

    
    function replace(search:panda.core.RegularExpression, replacement:panda.core.String, allowGroupReferences:panda.core.Bit):panda.core.String

    
    function replace(search:panda.core.RegularExpression, replacement:(panda.core.String)=>(panda.core.Object)):panda.core.String

    
    function trim():panda.core.String

    
    function reverse():panda.core.String

    
    function startsWith(s:panda.core.String):panda.core.Bit

    
    function startsWith(c:panda.core.Char):panda.core.Bit

    
    function endsWith(s:panda.core.String):panda.core.Bit

    
    function endsWith(c:panda.core.Char):panda.core.Bit

    @class
    function in(haystack:panda.core.String, needle:panda.core.String):panda.core.Bit

    @class
    function in(haystack:panda.core.String, needle:panda.core.Char):panda.core.Bit

    
    function indexOf(s:panda.core.String):panda.core.Int32Wrapper?

    @pre(start >= 0) @pre(start <= length)
    function indexOf(s:panda.core.String, start:panda.core.Int32):panda.core.Int32Wrapper?
@post(@return = null | @return < length)

    
    function indexOf(c:panda.core.Char):panda.core.Int32Wrapper?

    @pre(start >= 0) @pre(start <= length)
    function indexOf(c:panda.core.Char, start:panda.core.Int32):panda.core.Int32Wrapper?
@post(@return = null | self[@return] = c)

    
    function lastIndexOf(c:panda.core.Char):panda.core.Int32Wrapper?

    
    function lastIndexOf(c:panda.core.Char, start:panda.core.Int32):panda.core.Int32Wrapper?
@post(@return = null | self[@return] = c)

    
    function [..](start:panda.core.Int32):panda.core.String

    
    function [..](start:panda.core.Int32, end:panda.core.Int32):panda.core.String

    
    function [..](start:panda.core.Int32Wrapper?, end:panda.core.Int32Wrapper?):panda.core.String

    
    function [..](start:panda.core.Int32, end:panda.core.Int32, step:panda.core.Int32):panda.core.String

    
    function [..](start:panda.core.Int32Wrapper?, end:panda.core.Int32Wrapper?, step:panda.core.Int32):panda.core.String

    
    function [...](start:panda.core.Int32):panda.core.String

    
    function [...](start:panda.core.Int32, end:panda.core.Int32):panda.core.String

    
    function [...](start:panda.core.Int32Wrapper?, end:panda.core.Int32Wrapper?):panda.core.String

    
    function [...](start:panda.core.Int32, end:panda.core.Int32, step:panda.core.Int32):panda.core.String

    
    function [...](start:panda.core.Int32Wrapper?, end:panda.core.Int32Wrapper?, step:panda.core.Int32):panda.core.String

    @private
    function isWhitespace(c:panda.core.Char):panda.core.Bit

    
    function left(width:panda.core.Int32):panda.core.String

    
    function left(width:panda.core.Int32, fill:panda.core.Char):panda.core.String
@post(@return.length >= width)

    
    function right(width:panda.core.Int32):panda.core.String

    
    function right(width:panda.core.Int32, fill:panda.core.Char):panda.core.String
@post(@return.length >= width)

    
    function center(width:panda.core.Int32):panda.core.String

    
    function center(width:panda.core.Int32, fill:panda.core.Char):panda.core.String
@post(@return.length >= width)

    @override @math(overflow)
    function hash():panda.core.Int32

    @override
    function =(o:panda.core.Object):panda.core.Bit

    @class
    function +(s1->>panda.core.String, s2->>panda.core.String):panda.core.String
@post(@return.length = s1.length + s2.length)

    @pre(count >= 0)
    function *(count:panda.core.Int32):panda.core.String
@post(@return.length = length * count)

    @class @pre(count >= 0)
    function *(count:panda.core.Int32, s:panda.core.String):panda.core.String

    @override
    function ->>():panda.core.String

    @override @preOr(fmt = "panda")
    function format(fmt:panda.core.String):panda.core.String

    
    function ->>():panda.collections.Array<panda.core.Int8>
@post(@return.length = length)

    
    function ->>():panda.collections.Array<panda.core.Char>
@post(@return.length = length)

    @pre(length = 1)
    function ->>():panda.core.Char

    @class
    function ->>(value:panda.core.Bit):panda.core.String

    
    function ->>():panda.core.Bit

    @class
    function ->>(value:panda.core.Int64):panda.core.String

    @class
    function ->>(value:panda.core.UInt64):panda.core.String

    @class
    function ->>(c:panda.core.Char):panda.core.String
@post(@return.length = 1)

    
    function ->>():panda.core.Int64Wrapper?

    
    function ->>():panda.core.Int64

    
    function ->>():panda.core.Int32Wrapper?

    
    function ->>():panda.core.Int32

    
    function ->>():panda.core.Int16Wrapper?

    
    function ->>():panda.core.Int16

    
    function ->>():panda.core.Int8Wrapper?

    
    function ->>():panda.core.Int8

    
    function ->>():panda.core.UInt64Wrapper?

    
    function ->>():panda.core.UInt64

    
    function ->>():panda.core.UInt32Wrapper?

    
    function ->>():panda.core.UInt32

    
    function ->>():panda.core.UInt16Wrapper?

    
    function ->>():panda.core.UInt16

    
    function ->>():panda.core.UInt8Wrapper?

    
    function ->>():panda.core.UInt8

    @class
    function ->>(r:panda.core.Real32):panda.core.String

    @class
    function ->>(r:panda.core.Real64):panda.core.String

    
    function ->>():panda.core.Real32Wrapper?

    
    function ->>():panda.core.Real32

    
    function ->>():panda.core.Real64Wrapper?

    
    function ->>():panda.core.Real64

    @class
    function format(s:panda.core.String, params:panda.core.Object...):panda.core.String

    @private @class @external
    function pandaReal32ToString(r:panda.core.Real32):panda.core.String

    @private @class @external
    function pandaReal64ToString(r:panda.core.Real64):panda.core.String

    @private @class @external
    function pandaStringToReal32(s:panda.core.String):panda.core.Real32

    @private @class @external
    function pandaStringToReal64(s:panda.core.String):panda.core.Real64
}
package panda.core
@private
class Environment:panda.core.Immutable {
    
    function [](key:panda.core.String):panda.core.String?

    @private @class @external
    function pandaGetEnv(key:panda.core.String):panda.core.String?

    @self
    constructor()
}
package panda.core
@static
class System:panda.core.Object {
    @class @static
    var environment:panda.core.Environment

    @private @self
    constructor()

    @class
    method exit()

    @class @external
    method exit(exitCode:panda.core.Int32)

    @class
    method exec(command:panda.io.File, args:panda.core.String...)

    @class @external
    method exec(command:panda.io.File, dir:panda.io.File, args:panda.core.String...)

    @class
    method exec(command:panda.io.File, inputStream:panda.io.InputStream?, outputStream:panda.io.OutputStream?, errorStream:panda.io.OutputStream?, args:panda.core.String...)

    @class @pre(inputStream = null | inputStream-?>(FileInputStream)) @pre(outputStream-?>(FileOutputStream)) @pre(errorStream = null)
    method exec(command:panda.io.File, dir:panda.io.File, inputStream:panda.io.InputStream?, outputStream:panda.io.OutputStream?, errorStream:panda.io.OutputStream?, args:panda.core.String...)

    @private @class @external
    method execStream(path:panda.core.String, dir:panda.core.String, inHandle:$NativePointer, outHandle:$NativePointer, args:panda.collections.Array<panda.core.String>)

    @class
    method $classInit()

}
package panda.core

class UnimplementedException:panda.core.Exception {
    @self
    constructor()

    @self
    constructor(message:panda.core.String)
}
package panda.core
@abstract
class UnsignedInteger:panda.core.Integer {
    @self
    constructor()
}
package panda.core
@abstract
class Value:panda.core.Immutable {
    @self
    constructor()
}
package panda.collections

class Array:panda.core.Object {
    @class @external
    method setLength(a:panda.core.Object, elementSize:panda.core.Int32, reserved:panda.core.Bit, length:panda.core.Int32)

    @self
    constructor()
}
package panda.collections

class MutableMapEntry:panda.core.Object (panda.collections.MapEntry) {
    @private
    var _key:panda.core.Object?

    @override
    function key():panda.core.Object?

    @private
    var _value:panda.core.Object?

    @override
    function value():panda.core.Object?

    @private
    var next:panda.collections.MutableMapEntry?

    @private @self
    constructor(key:panda.core.Object?, value:panda.core.Object?)
}
package panda.collections

class HashMap:panda.core.Object (panda.collections.Map) {
    @private @class @static
    var LOAD_FACTOR:panda.core.Real64

    @private @readonly
    var _length:panda.core.Int32

    @private
    var contents:panda.collections.Array<panda.collections.MutableMapEntry?>

    @private
    var threshold:panda.core.Int32

    @self
    constructor()

    @self @pre(keys.length = values.length)
    constructor(keys:panda.collections.Array<panda.core.Object?>, values:panda.collections.Array<panda.core.Object?>)

    @self
    constructor(map:panda.collections.MapView)

    @private @math(overflow)
    function indexFor(key:panda.core.Object?):panda.core.Int32

    @override
    function [](key:panda.core.Object?):panda.core.Object?

    @override
    function in(key:panda.core.Object?):panda.core.Bit

    @override @self
    method []:=(key:panda.core.Object?, value:panda.core.Object?)

    @override @self
    method remove(key:panda.core.Object?):panda.core.Bit

    @override @self
    method clear()

    @override
    function entries():panda.collections.Array<(panda.core.Object?,panda.core.Object?)>

    @override
    function keys():panda.collections.Array<panda.core.Object?>

    @override
    function values():panda.collections.Array<panda.core.Object?>

    @override @self
    method addAll(m:panda.collections.MapView)

    @private
    method incrementLength()

    @override
    function =(o:panda.core.Object):panda.core.Bit

    @override @preOr(fmt = "" | fmt = "panda")
    function format(fmt:panda.core.String):panda.core.String

    @override
    function length():panda.core.Int32

    @class
    method $classInit()

}
package panda.collections

class ImmutableMapEntry:panda.core.Immutable (panda.collections.MapEntry) {
    @private
    var _key:panda.core.Immutable?

    @override
    function key():panda.core.Immutable?

    @private
    var _value:panda.core.Immutable?

    @override
    function value():panda.core.Immutable?

    @private
    var next:panda.collections.ImmutableMapEntry?

    @self
    constructor(key:panda.core.Immutable?, value:panda.core.Immutable?, next:panda.collections.ImmutableMapEntry?)
}
package panda.collections

class ImmutableHashMap:panda.core.Immutable (panda.collections.MapView) {
    @private @readonly
    var _length:panda.core.Int32

    @private
    var contents:panda.collections.ImmutableArray<panda.collections.ImmutableMapEntry?>

    @private @self
    constructor(h:panda.collections.HashMap)

    @self
    constructor(keys:panda.collections.Array<panda.core.Immutable?>, values:panda.collections.Array<panda.core.Immutable?>)

    @private
    function copy(a:panda.collections.Array<panda.core.Immutable?>):panda.collections.Array<panda.core.Object?>

    @private
    function copy(m:panda.collections.MutableMapEntry?):panda.collections.ImmutableMapEntry?

    @private @math(overflow)
    function indexFor(key:panda.core.Object?):panda.core.Int32

    @override
    function [](key:panda.core.Object?):panda.core.Immutable?

    @override
    function in(key:panda.core.Object?):panda.core.Bit

    @override
    function entries():panda.collections.Array<(panda.core.Object?,panda.core.Object?)>

    @override
    function keys():panda.collections.Array<panda.core.Object?>

    @override
    function values():panda.collections.Array<panda.core.Object?>

    @class
    function ->>(h:panda.collections.HashMap):panda.collections.ImmutableHashMap

    @override @preOr(fmt = "" | fmt = "panda")
    function format(fmt:panda.core.String):panda.core.String

    @override
    function length():panda.core.Int32
}
package panda.collections

class ImmutableArray:panda.core.Immutable {
    @self
    constructor()
}
package panda.collections

class ImmutableTuple:panda.core.Value {
    @self
    constructor()
}
package panda.collections

class IndexOutOfBoundsError:panda.core.SafetyError {
    @self
    constructor(message:panda.core.String)

    @self
    constructor(message:panda.core.String, cause:panda.core.Error)
}
package panda.collections

interface Map : panda.collections.MapView {
    @abstract
    method []:=(key:panda.core.Object?, value:panda.core.Object?)

    @abstract
    method remove(key:panda.core.Object?):panda.core.Bit

    @abstract
    method clear()

    @abstract
    method addAll(map:panda.collections.MapView)
}
package panda.collections

interface MapEntry {
    @abstract
    function key():panda.core.Object?

    @abstract
    function value():panda.core.Object?
}
package panda.collections

interface MapView {
    @abstract
    function [](key:panda.core.Object?):panda.core.Object?

    @abstract
    function in(key:panda.core.Object?):panda.core.Bit

    @abstract
    function keys():panda.collections.Array<panda.core.Object?>

    @abstract
    function values():panda.collections.Array<panda.core.Object?>

    @abstract
    function entries():panda.collections.Array<(panda.core.Object?,panda.core.Object?)>

    @abstract
    function length():panda.core.Int32
}
package panda.collections

class Stack:panda.core.Object {
    @private
    var contents:panda.collections.Array<panda.core.Object>

    
    method push(o:panda.core.Object)

    @pre(length > 0)
    method pop():panda.core.Object

    
    function peek():panda.core.Object

    @pre(length > 0) @pre(depth < length)
    function peek(depth:panda.core.Int32):panda.core.Object

    
    function length():panda.core.Int32

    
    function ->>():panda.collections.Array<panda.core.Object>

    @self
    constructor()
}
package panda.collections

class Tuple:panda.core.Object {
    @self
    constructor()
}
package panda.threads

class Lock:panda.core.Immutable {
    @private
    var nativeLock:$NativePointer

    @self
    constructor()

    @external
    method lock()

    @external
    method unlock()

    @external @override
    method finalize()

    @private @external
    method init()
}
package panda.threads
@private
class Message:panda.core.Object {
    @static
    var data:panda.core.Object?

    @private
    var prev:panda.threads.Message?

    @private
    var next:panda.threads.Message?

    @self
    constructor(data:panda.core.Object?)
}
package panda.threads

class MessageQueue:panda.core.Immutable {
    @private
    var nativeQueue:$NativePointer

    @self
    constructor()

    
    method post(data:panda.core.Immutable?)

    
    method postAndExit(data:panda.core.Object?)

    
    method postUnsafe(data:panda.core.Object?)

    @external
    method pendingMessages():panda.core.Int32

    
    method hasMessage():panda.core.Bit

    @external
    method getMessage():panda.core.Object?

    @external
    method getMessage(timeout:panda.core.Int32):panda.core.Object?

    @external @override
    method finalize()

    @private @external
    method initMessageQueue()

    @private @external
    method sendMessage(message:panda.threads.Message)

    @private @class @external
    method threadExit()
}
package panda.threads

class Pipe:panda.core.Immutable {
    @private @static
    var queue:panda.threads.MessageQueue

    
    method openInputStream():panda.io.InputStream

    
    method openOutputStream():panda.io.OutputStream

    @self
    constructor()
}
package panda.threads
@private
class PipeInputStream:panda.io.InputStream {
    
    var queue:panda.threads.MessageQueue

    
    var bufferIndex:panda.core.Int32

    
    var buffer:panda.collections.ImmutableArray<panda.core.Int8>

    @self
    constructor(queue:panda.threads.MessageQueue)

    @override
    method readInt8():panda.core.Int8Wrapper?
}
package panda.threads
@private
class PipeOutputStream:panda.io.OutputStream {
    
    var queue:panda.threads.MessageQueue

    @self
    constructor(queue:panda.threads.MessageQueue)

    @override
    method write(i:panda.core.Int8)

    @override
    method write(a:panda.collections.Array<panda.core.Int8>)

    @override
    method write(a:panda.collections.ImmutableArray<panda.core.Int8>)

    @override
    method close()
}
package panda.threads

class Thread:panda.core.Object {
    @private
    var id:panda.core.Int32

    @static
    var queue:panda.threads.MessageQueue

    @readonly
    var preventsExit:panda.core.Bit

    @private
    var threadLocals:$NativePointer

    @thread @readonly
    var context:panda.collections.HashMap


    @private
    var threadEntry:()=&>*()

    @self
    constructor()

    @private @self
    constructor(threadEntry:()=&>*())

    @protected
    method run()

    @self
    method preventsExit:=(preventsExit:panda.core.Bit)

    @static
    method start()

    @static
    method start(newContext:panda.collections.HashMap)

    @class @external
    function currentThread():panda.threads.Thread

    @class
    method start(run:()=&>*()):panda.threads.Thread

    @class
    function preferredThreadCount():panda.core.Int32

    @class @external
    method sleep(millis:panda.core.Int32)

    @private @external
    method startThread(context:panda.collections.HashMap)

    @private @external
    method setThreadPreventsExit(preventsExit:panda.core.Bit)

    @private @class @external
    method threadExit()

    @class
    method $initcontext():panda.collections.HashMap

    @class
    method $anonymous4341765745()

    @class
    method $classInit()

}
package panda.io

class BufferedInputStream:panda.io.FilterInputStream {
    @private @class @static
    var DEFAULT_BUFFER_SIZE:panda.core.Int32

    @private
    var buffer:panda.collections.Array<panda.core.Int8>

    @private
    var pos:panda.core.Int32

    @private
    var limit:panda.core.Int32

    @self
    constructor(raw:panda.io.InputStream)

    @self
    constructor(raw:panda.io.InputStream, bufferSize:panda.core.Int32)

    @private
    method fillBuffer()

    @override
    method readInt8():panda.core.Int8Wrapper?

    @override
    method read(bytes:panda.collections.Array<panda.core.Int8>):panda.core.Int32Wrapper?

    @class
    method $classInit()

}
package panda.io

class BufferedOutputStream:panda.io.FilterOutputStream {
    @private @class @static
    var DEFAULT_BUFFER_SIZE:panda.core.Int32

    @private
    var buffer:panda.collections.Array<panda.core.Int8>

    @private
    var limit:panda.core.Int32

    @self
    constructor(out:panda.io.OutputStream)

    @self
    constructor(out:panda.io.OutputStream, bufferSize:panda.core.Int32)

    @override
    method write(i:panda.core.Int8)

    @override
    method write(b:panda.collections.Array<panda.core.Int8>, offset:panda.core.Int32, length:panda.core.Int32)

    @override
    method flush()

    @override
    method close()

    @class
    method $classInit()

}
package panda.io

class Console:panda.core.Object {
    @private @self
    constructor()

    @thread
    var inputStream:panda.io.FileInputStream


    @thread
    var outputStream:panda.io.FileOutputStream


    @class
    method read():panda.core.CharWrapper?

    @class
    method readLine():panda.core.String?

    @class
    method write(s->>panda.core.String)

    @class
    method writeLine(s->>panda.core.String)

    @class
    method write(s->>panda.core.String, params:panda.core.Object...)

    @class
    method writeLine(s->>panda.core.String, params:panda.core.Object...)

    @class
    method writeLine()

    @private @class @external
    method stdIn():$NativePointer

    @private @class @external
    method stdOut():$NativePointer

    @class
    method $initinputStream():panda.io.FileInputStream

    @class
    method $initoutputStream():panda.io.FileOutputStream

    @class
    method $classInit()

}
package panda.io
@static
class File:panda.core.Immutable {
    @class @static
    var SEPARATOR:panda.core.Char

    @class @static
    var TEMP:panda.io.File

    @readonly
    var path:panda.core.String

    @self
    constructor(path:panda.core.String)

    @class
    method currentDirectory():panda.io.File

    
    function name():panda.core.String

    
    function simpleName():panda.core.String

    
    function extension():panda.core.String

    
    method absolute():panda.io.File

    
    method parent():panda.io.File?

    
    function resolve(path:panda.core.String):panda.io.File

    @external
    method exists():panda.core.Bit

    @external
    method isDirectory():panda.core.Bit

    @external
    method createDirectory()

    
    method createDirectories()

    @external
    method list():panda.collections.Array<panda.io.File>

    @override
    function format(fmt:panda.core.String):panda.core.String

    @external
    method delete()

    
    method list(pattern:panda.core.String):panda.collections.Array<panda.io.File>

    
    method list(pattern:panda.core.RegularExpression):panda.collections.Array<panda.io.File>

    
    method openInputStream():panda.io.InputStream

    
    method openOutputStream():panda.io.OutputStream

    
    method write(s:panda.core.String)

    
    method write(bytes:panda.collections.Array<panda.core.Int8>)

    
    method readAsString():panda.core.String

    
    method lines():panda.collections.Array<panda.core.String>

    @override
    function =(o:panda.core.Object):panda.core.Bit

    @override
    function hash():panda.core.Int32

    @private @external
    method absolutePath():panda.core.String

    @class
    method $classInit()

}
package panda.io
@private
class FileInputStream:panda.io.InputStream {
    
    var nativeFile:$NativePointer

    @self
    constructor(nativeFile:$NativePointer)

    @self
    constructor(file:panda.io.File)

    @override
    method readInt8():panda.core.Int8Wrapper?

    @external
    method read(b:panda.collections.Array<panda.core.Int8>, offset:panda.core.Int32, length:panda.core.Int32):panda.core.Int32

    @override
    method close()

    @override
    method finalize()

    @private @class @external
    method open(path:panda.core.String, read:panda.core.Bit, write:panda.core.Bit):$NativePointer

    @private @class @external
    method close(nativeFile:$NativePointer):panda.core.Int32

    @private @class @external
    method readInt8(nativeFile:$NativePointer):panda.core.Int16
}
package panda.io

class FileNotFoundException:panda.io.IOException {
    @self
    constructor(message:panda.core.String)
}
package panda.io
@private
class FileOutputStream:panda.io.OutputStream {
    
    var nativeFile:$NativePointer

    @self
    constructor(nativeFile:$NativePointer)

    @self
    constructor(file:panda.io.File)

    @override
    method write(b:panda.core.Int8)

    @override
    method write(b:panda.collections.Array<panda.core.Int8>, offset:panda.core.Int32, length:panda.core.Int32)

    @override
    method close()

    @override
    method finalize()

    @private @class @external
    method open(path:panda.core.String, read:panda.core.Bit, write:panda.core.Bit):$NativePointer

    @private @class @external
    method close(nativeFile:$NativePointer):panda.core.Int32

    @private @class @external
    method writeInt8(nativeFile:$NativePointer, b:panda.core.Int8)

    @private @class @external
    method writeInt8Array(nativeFile:$NativePointer, b:panda.collections.Array<panda.core.Int8>, offset:panda.core.Int32, length:panda.core.Int32)
}
package panda.io

class FilterInputStream:panda.io.InputStream {
    @private
    var raw:panda.io.InputStream

    
    var closeUnderlyingStream:panda.core.Bit

    @self
    constructor(raw:panda.io.InputStream)

    @override
    method readInt8():panda.core.Int8Wrapper?

    @override
    method read(bytes:panda.collections.Array<panda.core.Int8>):panda.core.Int32Wrapper?

    @override
    method close()
}
package panda.io

class FilterOutputStream:panda.io.OutputStream {
    @private
    var out:panda.io.OutputStream

    
    var closeUnderlyingStream:panda.core.Bit

    @self
    constructor(out:panda.io.OutputStream)

    @override
    method write(b:panda.core.Int8)

    @override
    method write(b->>panda.collections.Array<panda.core.Int8>, offset:panda.core.Int32, length:panda.core.Int32)

    @override
    method close()
}
package panda.io
@abstract
class IOException:panda.core.Exception {
    @self
    constructor(message:panda.core.String)

    @self
    constructor(message:panda.core.String, cause:panda.core.Error)
}
package panda.io

class IndentedOutputStream:panda.io.FilterOutputStream {
    @private
    var _level:panda.core.Int32

    @private
    var _indentSize:panda.core.Int32

    @private
    var indentation:panda.core.String

    @private
    var atLineStart:panda.core.Bit

    @self
    constructor(out:panda.io.OutputStream)

    @self
    method indentSize:=(indentSize:panda.core.Int32)

    @self
    method level:=(level:panda.core.Int32)

    @override
    method write(b:panda.core.Int8)

    @override
    method write(b->>panda.collections.Array<panda.core.Int8>, offset:panda.core.Int32, length:panda.core.Int32)

    @override
    method write(c:panda.core.Char)

    @override
    method write(c->>panda.collections.Array<panda.core.Char>, offset:panda.core.Int32, length:panda.core.Int32)

    @private
    method indentIfNeeded()

    
    function level():panda.core.Int32

    
    function indentSize():panda.core.Int32
}
package panda.io
@abstract
class InputStream:panda.core.Object {
    @private @class @static
    var BUFFER_SIZE:panda.core.Int32

    @readonly
    var closed:panda.core.Bit

    @pre(!closed)
    method readInt8():panda.core.Int8Wrapper?

    @pre(!closed)
    method readUInt8():panda.core.UInt8Wrapper?

    @pre(!closed)
    method read(bytes:panda.collections.Array<panda.core.Int8>):panda.core.Int32Wrapper?
@post(@return = null | @return <= bytes.length)
@post(bytes.length = @pre(bytes.length))

    @pre(!closed)
    method read(bytes:panda.collections.Array<panda.core.UInt8>):panda.core.Int32Wrapper?
@post(@return = null | @return <= bytes.length)
@post(bytes.length = @pre(bytes.length))

    @pre(!closed)
    method readChar():panda.core.CharWrapper?

    @pre(!closed)
    method read(chars:panda.collections.Array<panda.core.Char>):panda.core.Int32Wrapper?

    @pre(!closed)
    method readLine():panda.core.String?

    @pre(!closed)
    method close()
@post(closed)

    @static @pre(!closed)
    method send(o:panda.io.OutputStream)
@post(closed)

    
    method readAsString():panda.core.String

    @self
    constructor()

    @class
    method $classInit()

}
package panda.io

class LineNumberInputStream:panda.io.FilterInputStream {
    
    var line:panda.core.Int32

    
    var column:panda.core.Int32

    @self
    constructor(raw:panda.io.InputStream)

    @override
    method readInt8():panda.core.Int8Wrapper?

    @override
    method read(bytes:panda.collections.Array<panda.core.Int8>):panda.core.Int32Wrapper?
}
package panda.io

class MemoryInputStream:panda.io.InputStream {
    @private
    var data:panda.collections.Array<panda.core.Int8>

    
    var index:panda.core.Int32

    @self
    constructor(source:panda.core.String)

    @self
    constructor(source:panda.collections.Array<panda.core.Int8>)

    @override
    method readInt8():panda.core.Int8Wrapper?
}
package panda.io

class MemoryOutputStream:panda.io.OutputStream {
    @private @class @static
    var DEFAULT_LENGTH:panda.core.Int32

    @private
    var buffer:panda.collections.Array<panda.core.Int8>

    @readonly
    var length:panda.core.Int32

    @self
    constructor()

    @self
    constructor(size:panda.core.Int32)

    @private
    method ensureCapacity(minLength:panda.core.Int32)
@post(buffer.length >= minLength)

    @override @self
    method write(b:panda.core.Int8)

    @override @self
    method write(b->>panda.collections.Array<panda.core.Int8>, offset:panda.core.Int32, length:panda.core.Int32)

    @override @self
    method write(b->>panda.collections.Array<panda.core.Int8>)

    @override @self
    method write(b:panda.core.UInt8)

    @override @self
    method write(b->>panda.collections.Array<panda.core.UInt8>)

    @override @self
    method write(b->>panda.collections.Array<panda.core.UInt8>, offset:panda.core.Int32, length:panda.core.Int32)

    @override @self
    method write(c:panda.core.Char)

    @override @self
    method write(c->>panda.collections.Array<panda.core.Char>)

    @override @self
    method write(c->>panda.collections.Array<panda.core.Char>, offset:panda.core.Int32, length:panda.core.Int32)

    @override @self
    method write(s->>panda.core.String)

    @override @self
    method write(s:panda.core.String, params:panda.core.Object...)

    @pre(i < length)
    function [](i:panda.core.Int32):panda.core.Int8

    
    function ->>():panda.collections.Array<panda.core.Int8>

    
    function ->>():panda.collections.Array<panda.core.UInt8>

    
    function ->>():panda.collections.Array<panda.core.Char>

    @override
    function format(fmt:panda.core.String):panda.core.String

    
    method reset()
@post(length = 0)

    @class
    method $classInit()

}
package panda.io
@abstract
class OutputStream:panda.core.Object {
    @protected
    var closed:panda.core.Bit

    @pre(!closed)
    method write(b:panda.core.Int8)

    @pre(!closed)
    method write(b:panda.core.UInt8)

    @pre(!closed)
    method write(b:panda.collections.Array<panda.core.Int8>)

    @pre(!closed)
    method write(b:panda.collections.Array<panda.core.Int8>, offset:panda.core.Int32, length:panda.core.Int32)

    @pre(!closed)
    method write(b:panda.collections.Array<panda.core.UInt8>)

    @pre(!closed)
    method write(b:panda.collections.Array<panda.core.UInt8>, offset:panda.core.Int32, length:panda.core.Int32)

    @pre(!closed)
    method write(b:panda.collections.ImmutableArray<panda.core.Int8>)

    @pre(!closed)
    method write(b:panda.collections.ImmutableArray<panda.core.Int8>, offset:panda.core.Int32, length:panda.core.Int32)

    @pre(!closed)
    method write(b:panda.collections.ImmutableArray<panda.core.UInt8>)

    @pre(!closed)
    method write(b:panda.collections.ImmutableArray<panda.core.UInt8>, offset:panda.core.Int32, length:panda.core.Int32)

    @pre(!closed)
    method write(c:panda.core.Char)

    @pre(!closed)
    method write(c->>panda.collections.Array<panda.core.Char>)

    @pre(!closed) @pre(offset + length <= c.length)
    method write(c->>panda.collections.Array<panda.core.Char>, offset:panda.core.Int32, length:panda.core.Int32)

    @pre(!closed)
    method write(s->>panda.core.String)

    @private
    method digit(c:panda.core.Char):panda.core.Int32

    @private
    function processField(s:panda.core.String, field:panda.core.String):panda.core.String

    @pre(!closed)
    method write(s:panda.core.String, params:panda.core.Object...)

    @pre(!closed)
    method writeLine(s:panda.core.String, params:panda.core.Object...)

    @pre(!closed)
    method writeLine()

    @pre(!closed)
    method writeLine(c:panda.core.Char)

    @pre(!closed)
    method writeLine(c->>panda.collections.Array<panda.core.Char>)

    @pre(!closed) @pre(offset + length <= c.length)
    method writeLine(c->>panda.collections.Array<panda.core.Char>, offset:panda.core.Int32, length:panda.core.Int32)

    @pre(!closed)
    method writeLine(s->>panda.core.String)

    
    method flush()

    @pre(!closed)
    method close()
@post(closed)

    @self
    constructor()
}
package panda.io

class PushbackInputStream:panda.io.FilterInputStream {
    @private
    var pushbackBuffer:panda.collections.Array<panda.core.Int8>

    @self
    constructor(raw:panda.io.InputStream)

    @override
    method readInt8():panda.core.Int8Wrapper?

    @override
    method read(bytes:panda.collections.Array<panda.core.Int8>):panda.core.Int32Wrapper?

    
    method pushback(v:panda.core.Int8)

    
    method pushback(v:panda.core.UInt8)

    
    method pushback(v:panda.collections.Array<panda.core.Int8>)

    
    method pushback(v:panda.collections.Array<panda.core.UInt8>)

    
    method pushback(c:panda.core.Char)

    
    method pushback(c:panda.collections.Array<panda.core.Char>)

    
    method pushback(s:panda.core.String)
}
package panda.math

class Random:panda.core.Object {
    @private @class @static
    var MULTIPLIER:panda.core.Int64

    @private @thread
    var shared:panda.math.Random


    @private
    var seed:panda.core.Int64

    @self
    constructor()

    @self
    constructor(seed:panda.core.Int64)

    @private
    method setSeed(seed:panda.core.Int64)

    @private @math(overflow) @pre(bits <= 32)
    method bits(bits:panda.core.Int8):panda.core.Int32

    
    method bit():panda.core.Bit

    @class
    method bit():panda.core.Bit

    @math(overflow)
    method int(n:panda.core.Int32):panda.core.Int32

    @class
    method int(n:panda.core.Int32):panda.core.Int32

    
    method int32():panda.core.Int32

    @class
    method int32():panda.core.Int32

    
    method int64():panda.core.Int64

    @class
    method int64():panda.core.Int64

    
    method real32():panda.core.Real32

    @class
    method real32():panda.core.Real32

    
    method real64():panda.core.Real64

    @class
    method real64():panda.core.Real64

    @class
    method $initshared():panda.math.Random

    @class
    method $classInit()

}
@$instance panda.collections.Array<panda.core.Int8>
@$instance panda.collections.Array<panda.core.Int16>
@$instance panda.collections.Array<panda.core.Int32>
@$instance panda.collections.Array<panda.core.Int64>
@$instance panda.collections.Array<panda.core.UInt8>
@$instance panda.collections.Array<panda.core.UInt16>
@$instance panda.collections.Array<panda.core.UInt32>
@$instance panda.collections.Array<panda.core.UInt64>
@$instance panda.collections.Array<panda.core.Real32>
@$instance panda.collections.Array<panda.core.Real64>
@$instance panda.collections.Array<panda.core.Char>
@$instance panda.collections.ImmutableArray<panda.core.StackTraceEntry>
@$instance panda.collections.ImmutableArray<panda.core.Immutable?>
@$instance panda.collections.ImmutableArray<panda.core.Char>
@$instance panda.collections.Array<panda.core.String>
@$instance panda.collections.Array<panda.core.Object>
@$instance panda.collections.Array<panda.collections.MutableMapEntry?>
@$instance panda.collections.Array<panda.core.Object?>
@$instance (panda.core.Object?,panda.core.Object?)
@$instance panda.collections.Array<(panda.core.Object?,panda.core.Object?)>
@$instance panda.collections.ImmutableArray<panda.collections.ImmutableMapEntry?>
@$instance panda.collections.Array<panda.core.Immutable?>
@$instance panda.collections.ImmutableArray<panda.core.Int8>
@$instance panda.collections.Array<panda.io.File>
@$instance panda.collections.ImmutableArray<panda.core.UInt8>
@$instance panda.collections.Array<panda.core.StackTraceEntry>
@$instance panda.collections.Array<panda.collections.ImmutableMapEntry?>
@$instance panda.collections.ImmutableArray<panda.core.Int16>
@$instance panda.collections.ImmutableArray<panda.core.Int32>
@$instance panda.collections.ImmutableArray<panda.core.Int64>
@$instance panda.collections.ImmutableArray<panda.core.UInt16>
@$instance panda.collections.ImmutableArray<panda.core.UInt32>
@$instance panda.collections.ImmutableArray<panda.core.UInt64>
@$instance panda.collections.ImmutableArray<panda.core.Real32>
@$instance panda.collections.ImmutableArray<panda.core.Real64>
@$instance panda.collections.ImmutableArray<panda.core.String>
@$instance panda.collections.ImmutableArray<panda.io.File>
