-- This file was autogenerated by the Panda compiler --


package panda.io
-- MemoryInputStream.panda:(offset 1276)

class MemoryInputStream:panda.io.InputStream {
@private
var data:panda.collections.Array<panda.core.Int8>

@private
var index:panda.core.Int32


init    (source:panda.core.String)


init    (source:panda.collections.Array<panda.core.Int8>)

@override
method readInt8    ():panda.core.Int8Wrapper?
}
package panda.collections
-- ImmutableHashMap.panda:(offset 2468)
@private
class ImmutableHashMapKeyIterator<K:Immutable, V:Immutable>:panda.collections.ImmutableHashMapIterator<panda.collections.ImmutableHashMapKeyIterator.K,panda.collections.ImmutableHashMapKeyIterator.V,panda.collections.ImmutableHashMapKeyIterator.K> {

init    (map:panda.collections.ImmutableHashMap<panda.collections.ImmutableHashMapKeyIterator.K,panda.collections.ImmutableHashMapKeyIterator.V>)
    {
super.init(map)
    }

@override
function result    (e:panda.collections.ImmutableMapEntry<panda.collections.ImmutableHashMapKeyIterator.K,panda.collections.ImmutableHashMapKeyIterator.V>):panda.collections.ImmutableHashMapKeyIterator.K
    {
return e.key
    }
}
package panda.collections
-- Collection.panda:(offset 95)

interface Collection<T> : panda.collections.CollectionView<panda.collections.Collection.T>, panda.collections.CollectionWriter<panda.collections.Collection.T> {
}
package panda.core
-- Error.panda:(offset 257)

class StackTraceEntry:panda.core.Value {

var fileName:panda.core.String


var className:panda.core.String


var methodName:panda.core.String


var line:panda.core.Int32

@override
function convert    ():panda.core.String


init    ()
}
package panda.core
-- System.panda:(offset 8211)
@final
class System:panda.core.Object {
@class
var environment:panda.core.Environment

@class
var $classInited:panda.core.Bit

@private
init    ()

@class @external
function operatingSystem    ():panda.core.OperatingSystemInfo

@class
method exit    ()

@class @external
method exit    (exitCode:panda.core.Int32)

@class
method exec    (command:panda.io.File, args:panda.core.String...)

@class @external
method exec    (command:panda.io.File, dir:panda.io.File, args:panda.core.String...)

@class
method exec    (command:panda.io.File, inputStream:panda.io.InputStream?, outputStream:panda.io.OutputStream?, errorStream:panda.io.OutputStream?, args:panda.core.String...)

@class
method exec    (command:panda.io.File, dir:panda.io.File, inputStream:panda.io.InputStream?, outputStream:panda.io.OutputStream?, errorStream:panda.io.OutputStream?, args:panda.core.String...)

@private @class @external
method execStream    (path:panda.core.String, dir:panda.core.String, inHandle:panda.core.$NativePointer, outHandle:panda.core.$NativePointer, args:panda.collections.ListView<panda.core.String>)

@class
method $classInit    ()
}
package panda.core
-- Int32Wrapper.panda:(offset 25211)
@final
class Int32Wrapper:panda.core.SignedInteger {
@class
var MIN:panda.core.Int32

@class
var MAX:panda.core.Int32

@class
var BITS:panda.core.Int32


var value:panda.core.Int32

@class
var $classInited:panda.core.Bit

@class
function [..]    (left:panda.core.Int32):panda.collections.ListView<panda.core.Int32>

@class
function [..]    (left:panda.core.Int32, right:panda.core.Int32):panda.collections.ListView<panda.core.Int32>

@class
function [..]    (left:panda.core.Int32, right:panda.core.Int32, step:panda.core.Int32):panda.collections.ListView<panda.core.Int32>

@$wrapperMethod
function [..]    (var left:panda.core.Int32Wrapper?, var right:panda.core.Int32Wrapper?, step:panda.core.Int32):panda.core.Int32

@class
function [...]    (left:panda.core.Int32):panda.collections.ListView<panda.core.Int32>

@class
function [...]    (left:panda.core.Int32, right:panda.core.Int32):panda.collections.ListView<panda.core.Int32>

@class
function [...]    (left:panda.core.Int32, right:panda.core.Int32, step:panda.core.Int32):panda.collections.ListView<panda.core.Int32>


init    (value:panda.core.Int32)

@$wrapperMethod
function +    (x:panda.core.Int32):panda.core.Int32

@$wrapperMethod
function -    (x:panda.core.Int32):panda.core.Int32

@$wrapperMethod
function *    (x:panda.core.Int32):panda.core.Int32

@$wrapperMethod
function /    (x:panda.core.Int32):panda.core.Real32

@$wrapperMethod
function //    (x:panda.core.Int32):panda.core.Int32

@$wrapperMethod
function ^    (x:panda.core.UInt32):panda.core.Int32

@$wrapperMethod
function ^    (x:panda.core.Real32):panda.core.Real32

@$wrapperMethod
function ||    (x:panda.core.Int32):panda.core.Int32

@$wrapperMethod
function &&    (x:panda.core.Int32):panda.core.Int32

@$wrapperMethod
function ~~    (x:panda.core.Int32):panda.core.Int32

@$wrapperMethod
function !!    ():panda.core.Int32

@$wrapperMethod
function >    (x:panda.core.Int32):panda.core.Bit

@$wrapperMethod
function >=    (x:panda.core.Int32):panda.core.Bit

@$wrapperMethod
function <    (x:panda.core.Int32):panda.core.Bit

@$wrapperMethod
function <=    (x:panda.core.Int32):panda.core.Bit

@$wrapperMethod
function max    (other:panda.core.Int32):panda.core.Int32

@$wrapperMethod
function max    (other:panda.core.Int64):panda.core.Int64

@$wrapperMethod
function max    (other:panda.core.UInt32):panda.core.UInt32

@$wrapperMethod
function max    (other:panda.core.UInt64):panda.core.UInt64

@$wrapperMethod
function max    (other:panda.core.Real32):panda.core.Real32

@$wrapperMethod
function max    (other:panda.core.Real64):panda.core.Real64

@$wrapperMethod
function min    (other:panda.core.Int32):panda.core.Int32

@$wrapperMethod
function min    (other:panda.core.Int64):panda.core.Int64

@$wrapperMethod
function min    (other:panda.core.UInt32):panda.core.Int32

@$wrapperMethod
function min    (other:panda.core.UInt64):panda.core.Int32

@$wrapperMethod
function min    (other:panda.core.Real32):panda.core.Real32

@$wrapperMethod
function min    (other:panda.core.Real64):panda.core.Real64

@$wrapperMethod
function sign    ():panda.core.Int32

@$wrapperMethod
function abs    ():panda.core.Int32

@$wrapperMethod
function sqrt    ():panda.core.Real32

@$wrapperMethod
function sin    ():panda.core.Real32

@$wrapperMethod
function cos    ():panda.core.Real32

@$wrapperMethod
function tan    ():panda.core.Real32

@$wrapperMethod
function []    (index:panda.core.Int32):panda.core.Bit

@external @$wrapperMethod
function length    ():panda.core.Int32

@protected @override
function convertToString    (thousandsSeparator:panda.core.CharWrapper?, minWholeDigits:panda.core.Int32Wrapper?, minFractionDigits:panda.core.Int32Wrapper?, maxFractionDigits:panda.core.Int32Wrapper?, base:panda.core.Int32, baseChars:panda.core.String):panda.core.String

@override
function =    (o:panda.core.Object):panda.core.Bit

@override
function convert    ():panda.core.Int8

@override
function convert    ():panda.core.Int16

@override
function convert    ():panda.core.Int32

@override
function convert    ():panda.core.Int64

@override
function convert    ():panda.core.UInt8

@override
function convert    ():panda.core.UInt16

@override
function convert    ():panda.core.UInt32

@override
function convert    ():panda.core.UInt64

@override
function convert    ():panda.core.Real32

@override
function convert    ():panda.core.Real64

@override
function convert    ():panda.core.String

@class
method $classInit    ()
}
package panda.core
-- Int64Wrapper.panda:(offset 21495)
@final
class Int64Wrapper:panda.core.SignedInteger {
@class
var MIN:panda.core.Int64

@class
var MAX:panda.core.Int64

@class
var BITS:panda.core.Int32


var value:panda.core.Int64

@class
var $classInited:panda.core.Bit

@class
function [..]    (left:panda.core.Int64):panda.collections.ListView<panda.core.Int64>

@class
function [..]    (left:panda.core.Int64, right:panda.core.Int64):panda.collections.ListView<panda.core.Int64>

@class
function [..]    (left:panda.core.Int64, right:panda.core.Int64, step:panda.core.Int64):panda.collections.ListView<panda.core.Int64>

@$wrapperMethod
function [..]    (var left:panda.core.Int32Wrapper?, var right:panda.core.Int32Wrapper?, step:panda.core.Int32):panda.core.Int64

@class
function [...]    (left:panda.core.Int64):panda.collections.ListView<panda.core.Int64>

@class
function [...]    (left:panda.core.Int64, right:panda.core.Int64):panda.collections.ListView<panda.core.Int64>

@class
function [...]    (left:panda.core.Int64, right:panda.core.Int64, step:panda.core.Int64):panda.collections.ListView<panda.core.Int64>


init    (value:panda.core.Int64)

@$wrapperMethod
function +    (x:panda.core.Int64):panda.core.Int64

@$wrapperMethod
function -    (x:panda.core.Int64):panda.core.Int64

@$wrapperMethod
function *    (x:panda.core.Int64):panda.core.Int64

@$wrapperMethod
function /    (x:panda.core.Int64):panda.core.Real64

@$wrapperMethod
function //    (x:panda.core.Int64):panda.core.Int64

@$wrapperMethod
function ^    (x:panda.core.UInt64):panda.core.Int64

@$wrapperMethod
function ^    (x:panda.core.Real32):panda.core.Real64

@$wrapperMethod
function ||    (x:panda.core.Int64):panda.core.Int64

@$wrapperMethod
function &&    (x:panda.core.Int64):panda.core.Int64

@$wrapperMethod
function ~~    (x:panda.core.Int64):panda.core.Int64

@$wrapperMethod
function !!    ():panda.core.Int64

@$wrapperMethod
function >    (x:panda.core.Int64):panda.core.Bit

@$wrapperMethod
function >=    (x:panda.core.Int64):panda.core.Bit

@$wrapperMethod
function <    (x:panda.core.Int64):panda.core.Bit

@$wrapperMethod
function <=    (x:panda.core.Int64):panda.core.Bit

@$wrapperMethod
function max    (other:panda.core.Int64):panda.core.Int64

@$wrapperMethod
function max    (other:panda.core.UInt64):panda.core.UInt64

@$wrapperMethod
function max    (other:panda.core.Real64):panda.core.Real64

@$wrapperMethod
function min    (other:panda.core.Int64):panda.core.Int64

@$wrapperMethod
function min    (other:panda.core.Real64):panda.core.Real64

@$wrapperMethod
function sign    ():panda.core.Int32

@$wrapperMethod
function abs    ():panda.core.Int64

@$wrapperMethod
function sqrt    ():panda.core.Real64

@$wrapperMethod
function sin    ():panda.core.Real64

@$wrapperMethod
function cos    ():panda.core.Real64

@$wrapperMethod
function tan    ():panda.core.Real64

@$wrapperMethod
function []    (index:panda.core.Int32):panda.core.Bit

@external @$wrapperMethod
function length    ():panda.core.Int32

@protected @override
function convertToString    (thousandsSeparator:panda.core.CharWrapper?, minWholeDigits:panda.core.Int32Wrapper?, minFractionDigits:panda.core.Int32Wrapper?, maxFractionDigits:panda.core.Int32Wrapper?, base:panda.core.Int32, baseChars:panda.core.String):panda.core.String

@override
function =    (o:panda.core.Object):panda.core.Bit

@override
function convert    ():panda.core.Int8

@override
function convert    ():panda.core.Int16

@override
function convert    ():panda.core.Int32

@override
function convert    ():panda.core.Int64

@override
function convert    ():panda.core.UInt8

@override
function convert    ():panda.core.UInt16

@override
function convert    ():panda.core.UInt32

@override
function convert    ():panda.core.UInt64

@override
function convert    ():panda.core.Real32

@override
function convert    ():panda.core.Real64

@override
function convert    ():panda.core.String

@class
method $classInit    ()
}
package panda.core
-- Real64Wrapper.panda:(offset 16150)
@final
class Real64Wrapper:panda.core.RealNumber {
@class
var E:panda.core.Real64

@class
var PI:panda.core.Real64


var value:panda.core.Real64

@class
var $classInited:panda.core.Bit

@class
function [..]    (left:panda.core.Real64, right:panda.core.Real64):panda.collections.ListView<panda.core.Real64>

@class
function [..]    (left:panda.core.Real64, right:panda.core.Real64, step:panda.core.Real64):panda.collections.ListView<panda.core.Real64>

@class
function [...]    (left:panda.core.Real64, right:panda.core.Real64):panda.collections.ListView<panda.core.Real64>

@class
function [...]    (left:panda.core.Real64, right:panda.core.Real64, step:panda.core.Real64):panda.collections.ListView<panda.core.Real64>

@class @external
function atan2    (y:panda.core.Real64, x:panda.core.Real64):panda.core.Real64


init    (value:panda.core.Real64)

@$wrapperMethod
function +    (x:panda.core.Real64):panda.core.Real64

@$wrapperMethod
function -    (x:panda.core.Real64):panda.core.Real64

@$wrapperMethod
function *    (x:panda.core.Real64):panda.core.Real64

@$wrapperMethod
function /    (x:panda.core.Real64):panda.core.Real64

@$wrapperMethod
function ^    (x:panda.core.Real64):panda.core.Real64

@$wrapperMethod
function >    (x:panda.core.Real64):panda.core.Bit

@$wrapperMethod
function >=    (x:panda.core.Real64):panda.core.Bit

@$wrapperMethod
function <    (x:panda.core.Real64):panda.core.Bit

@$wrapperMethod
function <=    (x:panda.core.Real64):panda.core.Bit

@$wrapperMethod
function max    (other:panda.core.Real64):panda.core.Real64

@$wrapperMethod
function min    (other:panda.core.Real64):panda.core.Real64

@$wrapperMethod
function sign    ():panda.core.Int32

@$wrapperMethod
function abs    ():panda.core.Real64

@external @$wrapperMethod
function isInfinite    ():panda.core.Bit

@external @$wrapperMethod
function isNaN    ():panda.core.Bit

@external @$wrapperMethod
function sqrt    ():panda.core.Real64

@external @$wrapperMethod
function sin    ():panda.core.Real64

@external @$wrapperMethod
function cos    ():panda.core.Real64


function tan    ():panda.core.Real64

@protected @override
function convertToString    (thousandsSeparator:panda.core.CharWrapper?, minWholeDigits:panda.core.Int32Wrapper?, minFractionDigits:panda.core.Int32Wrapper?, maxFractionDigits:panda.core.Int32Wrapper?, base:panda.core.Int32, baseChars:panda.core.String):panda.core.String

@override
function =    (o:panda.core.Object):panda.core.Bit

@override
function hash    ():panda.core.Int32

@override
function convert    ():panda.core.Int8

@override
function convert    ():panda.core.Int16

@override
function convert    ():panda.core.Int32

@override
function convert    ():panda.core.Int64

@override
function convert    ():panda.core.UInt8

@override
function convert    ():panda.core.UInt16

@override
function convert    ():panda.core.UInt32

@override
function convert    ():panda.core.UInt64

@override
function convert    ():panda.core.Real32

@override
function convert    ():panda.core.Real64

@override
function convert    ():panda.core.String

@class
method $classInit    ()
}
package panda.io
-- IndentedOutputStream.panda:(offset 2035)

class IndentedOutputStream:panda.io.FilterOutputStream {
@private
var indentation:panda.core.String

@private
var atLineStart:panda.core.Bit


var _level:panda.core.Int32


var _indentSize:panda.core.Int32


init    (out:panda.io.OutputStream)

@self
method indentSize:=    (indentSize:panda.core.Int32)

@self
method level:=    (level:panda.core.Int32)

@override
method write    (b:panda.core.Int8)

@override
method write    (c:panda.core.Char)

@private
method indentIfNeeded    ()


function level    ():panda.core.Int32


function indentSize    ():panda.core.Int32
}
package panda.threads
-- Pipe.panda:(offset 2885)
@private
class PipeOutputStream:panda.io.OutputStream {

var queue:panda.threads.MessageQueue<panda.collections.ImmutableArray<panda.core.Int8>?>


init    (queue:panda.threads.MessageQueue<panda.collections.ImmutableArray<panda.core.Int8>?>)

@override
method write    (i:panda.core.Int8)

@override
method write    (a:panda.collections.ListView<panda.core.Int8>)

@override
method write    (a:panda.collections.ImmutableArray<panda.core.Int8>)

@override
method close    ()
}
package panda.core
-- BitWrapper.panda:(offset 1582)
@final
class BitWrapper:panda.core.Primitive {

var value:panda.core.Bit


init    (value:panda.core.Bit)

@override
function =    (o:panda.core.Object):panda.core.Bit

@override
function hash    ():panda.core.Int32

@override
function convert    ():panda.core.String


function convert    ():panda.core.Bit
}
package panda.collections
-- ImmutableTuple.panda:(offset 268)

class ImmutableTuple:panda.core.Value {

init    ()
}
package panda.threads
-- InternalMessageQueue.panda:(offset 643)
@private
class InternalMessageQueue:panda.core.Immutable {
@private
var nativeQueue:panda.core.$NativePointer


init    ()


method post    (data:panda.core.Object?)

@external
method pendingMessages    ():panda.core.Int32

@external
method getMessage    ():panda.core.Object?

@external
method getMessage    (timeout:panda.core.Int32):panda.core.Object?

@external @override
method finalize    ()

@private @external
method initMessageQueue    ()

@private @external
method sendMessage    (message:panda.threads.Message)

@class @external
method threadExit    ()
}
package panda.collections
-- Array.panda:(offset 3464)

class Array<T>:panda.core.Object (panda.collections.List<panda.collections.Array.T>) {
@private @class
var DEFAULT_LENGTH:panda.core.Int32 := 16

@private
var contents:panda.collections.PrimitiveArray<panda.collections.Array.T>

@private
var _length:panda.core.Int32 := 0

@class
var $classInited:panda.core.Bit


init    ()
    {
contents := PrimitiveArray<T>(DEFAULT_LENGTH)
    }


init    (length:panda.core.Int32)
    {
contents := PrimitiveArray<T>(length)
    }


init    (length:panda.core.Int32, fill:panda.collections.Array.T)
    {
contents := PrimitiveArray<T>(length)
_length := length
for i in 0 .. length
contents[i] := fill
    }


init    (contents:panda.collections.PrimitiveArray<panda.collections.Array.T>)
    {
self.contents := contents
self._length := contents.length
    }


init    (contents:panda.collections.CollectionView<panda.collections.Array.T>)
    {
self.contents := PrimitiveArray<T>(contents.length)
for         (i, v) in contents.enumeration()
self.contents[i] := v
_length := contents.length
    }

@override
function []    (index:panda.core.Int32):panda.collections.Array.T
    {
return contents[index]
    }

@override
function length    ():panda.core.Int32
    {
return _length
    }

@override @self
method []:=    (index:panda.core.Int32, value:panda.collections.Array.T)
    {
contents[index] := value
    }

@override @self
method add    (value:panda.collections.Array.T)
    {
ensureCapacity((_length + 1))
_length += 1
self[(_length - 1)] := value
    }

@override @self
method remove    (object:panda.collections.Array.T)
    {
for i in 0 .. length         {
if (self[i] = object)             {
removeIndex(i)
break
            }
        }
    }

@override @self
method removeIndex    (index:panda.core.Int32)
    {
for i in index .. (length - 1)
self[i] := self[(i + 1)]
_length -= 1
    }

@override @self
method clear    ()
    {
contents := PrimitiveArray<T>(DEFAULT_LENGTH)
_length := 0
    }

@override
function contains    (object:panda.collections.Array.T):panda.core.Bit
    {
for v in self         {
if (object = v)
return true
        }
return false
    }

@private @self
method ensureCapacity    (maxLength:panda.core.Int32)
    {
if (maxLength > contents.length)         {
def newSize := (contents.length * 2).max(maxLength)
def newContents := PrimitiveArray<T>(newSize)
for i in 0 .. length
newContents[i] := contents[i]
contents := newContents
        }
    }

@override
function =    (o:panda.core.Object):panda.core.Bit
    {
if (o)-!>(ListView<T>)
return false
def list := (o)->(ListView<T>)
if (length != list.length)
return false
for         (i, v) in enumeration() {
if (v != list[i])
return false
        }
return true
    }

@override @math(overflow)
function hash    ():panda.core.Int32
    {
var result := 0
constant MULTIPLIER := 53
for v in self         {
result *= MULTIPLIER
if (v != null)
result += v.hash
        }
return result
    }

@override
function convert    ():panda.core.String
    {
def result := MutableString("[")
for         (i, v) in enumeration() {
if (i > 0)
result.append(", ")
if (v != null)
result.append(v)
else
result.append("<null>")
        }
result.append("]")
return (result)->>(String)
    }

@class
method $classInit    ()
}
package panda.threads
-- Message.panda:(offset 1142)
@private
class Message:panda.core.Object {
@final
var data:panda.core.Object?

@private
var prev:panda.threads.Message?

@private
var next:panda.threads.Message?


init    (data:panda.core.Object?)
}
package panda.io
-- Console.panda:(offset 4810)

class Console:panda.core.Object {
@thread
var inputStream:panda.io.FileInputStream


@thread
var outputStream:panda.io.FileOutputStream


@class
var $classInited:panda.core.Bit

@private
init    ()

@class
method read    ():panda.core.CharWrapper?

@class
method readLine    ():panda.core.String?

@class
method write    (s:panda.core.String)

@class
method write    (o:panda.core.Object)

@class
method write    (s:panda.core.String, params:panda.core.Object...)

@class
method writeLine    (s:panda.core.String)

@class
method writeLine    (o:panda.core.Object)

@class
method writeLine    (s:panda.core.String, params:panda.core.Object...)

@class
method writeLine    ()

@private @class @external
method stdIn    ():panda.core.$NativePointer

@private @class @external
method stdOut    ():panda.core.$NativePointer

@class
method $classInit    ()

@class
method $initinputStream    ():panda.io.FileInputStream

@class
method $initoutputStream    ():panda.io.FileOutputStream
}
package panda.collections
-- CollectionView.panda:(offset 448)
@private
class Enumerator<T>:panda.core.Object (panda.collections.Iterator<(panda.core.Int32,panda.collections.Enumerator.T)>) {

var base:panda.collections.Iterator<panda.collections.Enumerator.T>


var index:panda.core.Int32 := 0


init    (collection:panda.collections.CollectionView<panda.collections.Enumerator.T>)
    {
self.base := collection.iterator()
    }

@override
function done    ():panda.core.Bit
    {
return base.done()
    }

@override @self
method next    ():(panda.core.Int32,panda.collections.Enumerator.T)
    {
def result:(Int, T) := (index, base.next())
index += 1
return result
    }
}
package panda.collections
-- Iterator.panda:(offset 788)

interface Iterator<T> {
@abstract
function done    ():panda.core.Bit

@abstract @self
method next    ():panda.collections.Iterator.T
}
package panda.collections
-- ImmutableHashMap.panda:(offset 2753)
@private
class ImmutableHashMapValueIterator<K:Immutable, V:Immutable>:panda.collections.ImmutableHashMapIterator<panda.collections.ImmutableHashMapValueIterator.K,panda.collections.ImmutableHashMapValueIterator.V,panda.collections.ImmutableHashMapValueIterator.V> {

init    (map:panda.collections.ImmutableHashMap<panda.collections.ImmutableHashMapValueIterator.K,panda.collections.ImmutableHashMapValueIterator.V>)
    {
super.init(map)
    }

@override
function result    (e:panda.collections.ImmutableMapEntry<panda.collections.ImmutableHashMapValueIterator.K,panda.collections.ImmutableHashMapValueIterator.V>):panda.collections.ImmutableHashMapValueIterator.V
    {
return e.value
    }
}
package panda.collections
-- ListWriter.panda:(offset 217)

interface ListWriter<T> : panda.collections.CollectionWriter<panda.collections.ListWriter.T> {
@abstract @self
method []:=    (index:panda.core.Int32, value:panda.collections.ListWriter.T)

@abstract @self
method insert    (index:panda.core.Int32, value:panda.collections.ListWriter.T)

@abstract @self
method removeIndex    (index:panda.core.Int32)
}
package panda.collections
-- HashMap.panda:(offset 816)
@private
class MutableMapEntry<K, V>:panda.core.Object {

var key:panda.collections.MutableMapEntry.K


var value:panda.collections.MutableMapEntry.V


var next:panda.collections.MutableMapEntry<panda.collections.MutableMapEntry.K,panda.collections.MutableMapEntry.V>?

@private
init    (key:panda.collections.MutableMapEntry.K, value:panda.collections.MutableMapEntry.V)
    {
self.key := key
self.value := value
    }
}
package panda.core
-- PostconditionError.panda:(offset 1043)

class PostconditionError:panda.core.AssertionError {

init    ()


init    (message:panda.core.String)
}
package panda.core
-- AssertionError.panda:(offset 1127)

class AssertionError:panda.core.SafetyError {

init    ()


init    (message:panda.core.String)
}
package panda.collections
-- ImmutableHashMap.panda:(offset 909)
@private
class ImmutableMapEntry<K:Immutable, V:Immutable>:panda.core.Immutable {

var key:panda.collections.ImmutableMapEntry.K


var value:panda.collections.ImmutableMapEntry.V


var next:panda.collections.ImmutableMapEntry<panda.collections.ImmutableMapEntry.K,panda.collections.ImmutableMapEntry.V>?

@private
init    (key:panda.collections.ImmutableMapEntry.K, value:panda.collections.ImmutableMapEntry.V, next:panda.collections.ImmutableMapEntry<panda.collections.ImmutableMapEntry.K,panda.collections.ImmutableMapEntry.V>?)
    {
self.key := key
self.value := value
self.next := next
    }
}
package panda.collections
-- List.panda:(offset 3774)

interface List<T> : panda.collections.ListView<panda.collections.List.T>, panda.collections.ListWriter<panda.collections.List.T> {
@self
method mapInPlace    (f:(panda.collections.List.T)=>(panda.collections.List.T)?)
    {
for i in 0 .. length
self[i] := f(self[i])
    }

@self
method filterInPlace    (f:(panda.collections.List.T)=>(panda.core.Bit)?)
    {
for i in (length - 1) ... 0 by -1         {
if !f(self[i])
removeIndex(i)
        }
    }

@override @self
method insert    (index:panda.core.Int32, value:panda.collections.List.T)
    {
add(value)
for i in (length - 1) .. index by -1
self[i] := self[(i - 1)]
self[index] := value
    }

@abstract
method []:=    (i:panda.core.Int32, object:panda.collections.List.T)

@self
method [..]:=    (var start:panda.core.Int32Wrapper?, var end:panda.core.Int32Wrapper?, step:panda.core.Int32, list:panda.collections.ListView<panda.collections.List.T>)
    {
if (start = null)         {
if (step > 0)
start := 0
else
start := (length - 1)
        }
if (end = null)         {
if (step > 0)
end := length
else
end := -1
        }
self[(start)->(Int) .. (end)->(Int) by step] := list
    }

@self
method [..]:=    (start:panda.core.Int32, end:panda.core.Int32, step:panda.core.Int32, list:panda.collections.ListView<panda.collections.List.T>)
    {
if (step = 1)         {
def oldLength := (end - start)
def newLength := list.length
def delta := (newLength - oldLength)
if (delta < 0)             {
for i in 0 .. -delta
removeIndex(start)
for i in start .. (start + list.length)
self[i] := list[(i - start)]
            }
else
if (delta > 0)                 {
for i in 0 .. delta
insert((start + i), list[i])
for i in delta .. list.length
self[(start + i)] := list[i]
                }
else                 {
for i in start .. end
self[i] := list[(i - start)]
                }
        }
else         {
var src := 0
for dest in start .. end by step             {
self[dest] := list[src]
src += 1
            }
assert (src = list.length) : PreconditionError("slice source and destination lengths do not match")
        }
    }

@self
method [...]:=    (var start:panda.core.Int32Wrapper?, var end:panda.core.Int32Wrapper?, step:panda.core.Int32, list:panda.collections.ListView<panda.collections.List.T>)
    {
if (start = null)         {
if (step > 0)
start := 0
else
start := (length - 1)
        }
if (end = null)         {
if (step > 0)
end := (length - 1)
else
end := 0
        }
self[(start)->(Int) ... (end)->(Int) by step] := list
    }

@self
method [...]:=    (start:panda.core.Int32, end:panda.core.Int32, step:panda.core.Int32, list:panda.collections.ListView<panda.collections.List.T>)
    {
if (step > 0)
self[start .. (end + 1) by step] := list
else
self[start .. (end - 1) by step] := list
    }
}
package panda.core
-- Class.panda:(offset 1830)
@final
class Class:panda.core.Immutable {

var name:panda.core.String


var superclass:panda.core.Class

@private
var containsPointers:panda.core.Bit

@private
var overridesFinalize:panda.core.Bit

@private
init    ()


function simpleName    ():panda.core.String

@override
function convert    ():panda.core.String
}
package panda.io
-- File.panda:(offset 9299)

class File$closure0:panda.core.Method {

var pattern:panda.core.RegularExpression


function raw    (f:panda.io.File):panda.core.Bit


function shimmed    (f:panda.io.File):panda.core.Object


init    (pattern:panda.core.RegularExpression)
}
package panda.collections
-- HashMap.panda:(offset 2238)
@private
class HashMapEntryIterator<K, V>:panda.collections.HashMapIterator<panda.collections.HashMapEntryIterator.K,panda.collections.HashMapEntryIterator.V,(panda.collections.HashMapEntryIterator.K,panda.collections.HashMapEntryIterator.V)> {

init    (map:panda.collections.HashMap<panda.collections.HashMapEntryIterator.K,panda.collections.HashMapEntryIterator.V>)
    {
super.init(map)
    }

@override
function result    (e:panda.collections.MutableMapEntry<panda.collections.HashMapEntryIterator.K,panda.collections.HashMapEntryIterator.V>):(panda.collections.HashMapEntryIterator.K,panda.collections.HashMapEntryIterator.V)
    {
return (e.key, e.value)
    }
}
package panda.threads
-- MutableMessageQueue.panda:(offset 4320)

class MutableMessageQueue<T>:panda.core.Immutable {
@private
var internalQueue:panda.threads.InternalMessageQueue := InternalMessageQueue()


init    ()
    {
initMessageQueue()
    }


method postAndExit    (data:panda.threads.MutableMessageQueue.T)
    {
post(data)
InternalMessageQueue.threadExit()
    }


method postUnsafe    (data:panda.threads.MutableMessageQueue.T)
    {
internalQueue.post(data)
    }


method pendingMessages    ():panda.core.Int32
    {
return internalQueue.pendingMessages()
    }


method hasMessage    ():panda.core.Bit
    {
return (pendingMessages() > 0)
    }


method getMessage    ():panda.threads.MutableMessageQueue.T
    {
return (internalQueue.getMessage())->(T)
    }


method getMessage    (timeout:panda.core.Int32):panda.threads.MutableMessageQueue.T
    {
return (internalQueue.getMessage(timeout))->(T)
    }
}
package panda.io
-- MemoryOutputStream.panda:(offset 4834)

class MemoryOutputStream:panda.io.OutputStream {
@private @class
var DEFAULT_LENGTH:panda.core.Int32

@private
var buffer:panda.collections.Array<panda.core.Int8>

@class
var $classInited:panda.core.Bit


init    ()


init    (size:panda.core.Int32)


function length    ():panda.core.Int32

@override @self
method write    (b:panda.core.Int8)

@override @self
method write    (bytes:panda.collections.ListView<panda.core.Int8>, offset:panda.core.Int32, length:panda.core.Int32)

@override @self
method write    (b:panda.core.UInt8)

@override @self
method write    (bytes:panda.collections.ListView<panda.core.UInt8>, offset:panda.core.Int32, length:panda.core.Int32)

@override @self
method write    (c:panda.core.Char)

@override @self
method write    (chars:panda.collections.ListView<panda.core.Char>, offset:panda.core.Int32, length:panda.core.Int32)


function []    (i:panda.core.Int32):panda.core.Int8


function convert    ():panda.collections.Array<panda.core.Int8>


function convert    ():panda.collections.Array<panda.core.UInt8>


function convert    ():panda.collections.Array<panda.core.Char>

@override
function convert    ():panda.core.String


method sendTo    (o:panda.io.OutputStream)


method reset    ()

@class
method $classInit    ()
}
package panda.core
-- UInt8Wrapper.panda:(offset 27060)
@final
class UInt8Wrapper:panda.core.UnsignedInteger {
@class
var MIN:panda.core.UInt8

@class
var MAX:panda.core.UInt8

@class
var BITS:panda.core.Int32


var value:panda.core.UInt8

@class
var $classInited:panda.core.Bit

@class
function [..]    (left:panda.core.UInt8):panda.collections.ListView<panda.core.UInt8>

@class
function [..]    (left:panda.core.UInt8, right:panda.core.UInt8):panda.collections.ListView<panda.core.UInt8>

@class
function [..]    (left:panda.core.UInt8, right:panda.core.UInt8, step:panda.core.Int8):panda.collections.ListView<panda.core.UInt8>

@$wrapperMethod
function [..]    (var left:panda.core.Int32Wrapper?, var right:panda.core.Int32Wrapper?, step:panda.core.Int32):panda.core.UInt8

@class
function [...]    (left:panda.core.UInt8):panda.collections.ListView<panda.core.UInt8>

@class
function [...]    (left:panda.core.UInt8, right:panda.core.UInt8):panda.collections.ListView<panda.core.UInt8>

@class
function [...]    (left:panda.core.UInt8, right:panda.core.UInt8, step:panda.core.Int8):panda.collections.ListView<panda.core.UInt8>


init    (value:panda.core.UInt8)

@$wrapperMethod
function +    (x:panda.core.UInt8):panda.core.UInt8

@$wrapperMethod
function -    (x:panda.core.UInt8):panda.core.UInt8

@$wrapperMethod
function *    (x:panda.core.UInt8):panda.core.UInt8

@$wrapperMethod
function /    (x:panda.core.UInt8):panda.core.Real32

@$wrapperMethod
function //    (x:panda.core.UInt8):panda.core.UInt8

@$wrapperMethod
function ^    (x:panda.core.UInt8):panda.core.UInt8

@$wrapperMethod
function ^    (x:panda.core.Real32):panda.core.Real32

@$wrapperMethod
function ||    (x:panda.core.UInt8):panda.core.UInt8

@$wrapperMethod
function &&    (x:panda.core.UInt8):panda.core.UInt8

@$wrapperMethod
function ~~    (x:panda.core.UInt8):panda.core.UInt8

@$wrapperMethod
function !!    ():panda.core.UInt8

@$wrapperMethod
function >    (x:panda.core.UInt8):panda.core.Bit

@$wrapperMethod
function >=    (x:panda.core.UInt8):panda.core.Bit

@$wrapperMethod
function <    (x:panda.core.UInt8):panda.core.Bit

@$wrapperMethod
function <=    (x:panda.core.UInt8):panda.core.Bit

@$wrapperMethod
function max    (other:panda.core.Int32):panda.core.Int32

@$wrapperMethod
function max    (other:panda.core.Int64):panda.core.Int64

@$wrapperMethod
function max    (other:panda.core.UInt32):panda.core.UInt32

@$wrapperMethod
function max    (other:panda.core.UInt64):panda.core.UInt64

@$wrapperMethod
function max    (other:panda.core.Real32):panda.core.Real32

@$wrapperMethod
function max    (other:panda.core.Real64):panda.core.Real64

@$wrapperMethod
function min    (other:panda.core.Int32):panda.core.Int32

@$wrapperMethod
function min    (other:panda.core.Int64):panda.core.Int64

@$wrapperMethod
function min    (other:panda.core.UInt32):panda.core.UInt8

@$wrapperMethod
function min    (other:panda.core.UInt64):panda.core.UInt8

@$wrapperMethod
function min    (other:panda.core.Real32):panda.core.Real32

@$wrapperMethod
function min    (other:panda.core.Real64):panda.core.Real64

@$wrapperMethod
function sqrt    ():panda.core.Real32

@$wrapperMethod
function sin    ():panda.core.Real32

@$wrapperMethod
function cos    ():panda.core.Real32

@$wrapperMethod
function tan    ():panda.core.Real32

@$wrapperMethod
function []    (index:panda.core.Int32):panda.core.Bit

@external @$wrapperMethod
function length    ():panda.core.Int32

@protected @override
function convertToString    (thousandsSeparator:panda.core.CharWrapper?, minWholeDigits:panda.core.Int32Wrapper?, minFractionDigits:panda.core.Int32Wrapper?, maxFractionDigits:panda.core.Int32Wrapper?, base:panda.core.Int32, baseChars:panda.core.String):panda.core.String

@override
function =    (o:panda.core.Object):panda.core.Bit

@override
function convert    ():panda.core.Int8

@override
function convert    ():panda.core.Int16

@override
function convert    ():panda.core.Int32

@override
function convert    ():panda.core.Int64

@override
function convert    ():panda.core.UInt8

@override
function convert    ():panda.core.UInt16

@override
function convert    ():panda.core.UInt32

@override
function convert    ():panda.core.UInt64


function convert    ():panda.core.Char

@override
function convert    ():panda.core.Real32

@override
function convert    ():panda.core.Real64

@override
function convert    ():panda.core.String

@class
method $classInit    ()
}
package panda.io
-- FileNotFoundException.panda:(offset 568)

class FileNotFoundException:panda.io.IOException {

init    (message:panda.core.String)
}
package panda.core
-- Immutable.panda:(offset 490)
@abstract
class Immutable:panda.core.Object {

init    ()
}
package panda.collections
-- HashSet.panda:(offset 1039)

class HashSet<T>:panda.core.Object (panda.collections.Set<panda.collections.HashSet.T>) {
@private
var contents:panda.collections.Map<panda.collections.HashSet.T,panda.collections.HashSet.T> := HashMap<T, T>()


init    ()
    {
    }


init    (contents:panda.collections.CollectionView<panda.collections.HashSet.T>)
    {
for v in contents
self.add(v)
    }

@override
function length    ():panda.core.Int32
    {
return contents.length
    }

@override
function contains    (object:panda.collections.HashSet.T):panda.core.Bit
    {
return contents.contains(object)
    }

@override @safeReturn
function iterator    ():panda.collections.Iterator<panda.collections.HashSet.T>
    {
return contents.keys.iterator
    }

@override @self
method add    (object:panda.collections.HashSet.T)
    {
contents[object] := object
    }

@override @self
method remove    (object:panda.collections.HashSet.T)
    {
contents.remove(object)
    }

@override @self
method clear    ()
    {
contents.clear()
    }

@override
function convert    ():panda.core.String
    {
def result := MutableString("[")
for         (i, v) in enumeration() {
if (i > 0)
result.append(", ")
result.append(v)
        }
return (result + "]")
    }
}
package panda.core
-- UInt16Wrapper.panda:(offset 25375)
@final
class UInt16Wrapper:panda.core.UnsignedInteger {
@class
var MIN:panda.core.UInt16

@class
var MAX:panda.core.UInt16

@class
var BITS:panda.core.Int32


var value:panda.core.UInt16

@class
var $classInited:panda.core.Bit

@class
function [..]    (left:panda.core.UInt16):panda.collections.ListView<panda.core.UInt16>

@class
function [..]    (left:panda.core.UInt16, right:panda.core.UInt16):panda.collections.ListView<panda.core.UInt16>

@class
function [..]    (left:panda.core.UInt16, right:panda.core.UInt16, step:panda.core.Int16):panda.collections.ListView<panda.core.UInt16>


function [..]    (var left:panda.core.Int32Wrapper?, var right:panda.core.Int32Wrapper?, step:panda.core.Int32):panda.core.UInt16

@class
function [...]    (left:panda.core.UInt16):panda.collections.ListView<panda.core.UInt16>

@class
function [...]    (left:panda.core.UInt16, right:panda.core.UInt16):panda.collections.ListView<panda.core.UInt16>

@class
function [...]    (left:panda.core.UInt16, right:panda.core.UInt16, step:panda.core.Int16):panda.collections.ListView<panda.core.UInt16>


init    (value:panda.core.UInt16)

@$wrapperMethod
function +    (x:panda.core.UInt16):panda.core.UInt16

@$wrapperMethod
function -    (x:panda.core.UInt16):panda.core.UInt16

@$wrapperMethod
function *    (x:panda.core.UInt16):panda.core.UInt16

@$wrapperMethod
function /    (x:panda.core.UInt16):panda.core.Real32

@$wrapperMethod
function //    (x:panda.core.UInt16):panda.core.UInt16

@$wrapperMethod
function ^    (x:panda.core.UInt16):panda.core.UInt16

@$wrapperMethod
function ^    (x:panda.core.Real32):panda.core.Real32

@$wrapperMethod
function ||    (x:panda.core.UInt16):panda.core.UInt16

@$wrapperMethod
function &&    (x:panda.core.UInt16):panda.core.UInt16

@$wrapperMethod
function ~~    (x:panda.core.UInt16):panda.core.UInt16

@$wrapperMethod
function !!    ():panda.core.UInt16

@$wrapperMethod
function >    (x:panda.core.UInt16):panda.core.Bit

@$wrapperMethod
function >=    (x:panda.core.UInt16):panda.core.Bit

@$wrapperMethod
function <    (x:panda.core.UInt16):panda.core.Bit

@$wrapperMethod
function <=    (x:panda.core.UInt16):panda.core.Bit

@$wrapperMethod
function max    (other:panda.core.Int32):panda.core.Int32

@$wrapperMethod
function max    (other:panda.core.Int64):panda.core.Int64

@$wrapperMethod
function max    (other:panda.core.UInt32):panda.core.UInt32

@$wrapperMethod
function max    (other:panda.core.UInt64):panda.core.UInt64

@$wrapperMethod
function max    (other:panda.core.Real32):panda.core.Real32

@$wrapperMethod
function max    (other:panda.core.Real64):panda.core.Real64

@$wrapperMethod
function min    (other:panda.core.Int32):panda.core.Int32

@$wrapperMethod
function min    (other:panda.core.Int64):panda.core.Int64

@$wrapperMethod
function min    (other:panda.core.UInt32):panda.core.UInt32

@$wrapperMethod
function min    (other:panda.core.UInt64):panda.core.UInt64

@$wrapperMethod
function min    (other:panda.core.Real32):panda.core.Real32

@$wrapperMethod
function min    (other:panda.core.Real64):panda.core.Real64


function []    (index:panda.core.Int32):panda.core.Bit

@external
function length    ():panda.core.Int32

@protected @override
function convertToString    (thousandsSeparator:panda.core.CharWrapper?, minWholeDigits:panda.core.Int32Wrapper?, minFractionDigits:panda.core.Int32Wrapper?, maxFractionDigits:panda.core.Int32Wrapper?, base:panda.core.Int32, baseChars:panda.core.String):panda.core.String

@override
function =    (o:panda.core.Object):panda.core.Bit

@override
function convert    ():panda.core.Int8

@override
function convert    ():panda.core.Int16

@override
function convert    ():panda.core.Int32

@override
function convert    ():panda.core.Int64

@override
function convert    ():panda.core.UInt8

@override
function convert    ():panda.core.UInt16

@override
function convert    ():panda.core.UInt32

@override
function convert    ():panda.core.UInt64

@override
function convert    ():panda.core.Real32

@override
function convert    ():panda.core.Real64

@override
function convert    ():panda.core.String

@class
method $classInit    ()
}
package panda.io
-- BufferedInputStream.panda:(offset 3316)

class BufferedInputStream:panda.io.FilterInputStream {
@private @class
var DEFAULT_BUFFER_SIZE:panda.core.Int32

@private
var buffer:panda.collections.Array<panda.core.Int8>

@private
var pos:panda.core.Int32

@private
var limit:panda.core.Int32

@class
var $classInited:panda.core.Bit


init    (raw:panda.io.InputStream)


init    (raw:panda.io.InputStream, bufferSize:panda.core.Int32)

@private
method fillBuffer    ()

@override
method readInt8    ():panda.core.Int8Wrapper?

@override
method readUInt8    ():panda.core.UInt8Wrapper?

@override
method readChar    ():panda.core.CharWrapper?

@override
method read    (bytes:panda.collections.ListWriter<panda.core.Int8>, max:panda.core.Int32):panda.core.Int32Wrapper?

@override
method read    (bytes:panda.collections.ListWriter<panda.core.UInt8>, max:panda.core.Int32):panda.core.Int32Wrapper?

@override
method read    (bytes:panda.collections.ListWriter<panda.core.Char>, max:panda.core.Int32):panda.core.Int32Wrapper?

@class
method $classInit    ()
}
package panda.io
-- FilterOutputStream.panda:(offset 2170)

class FilterOutputStream:panda.io.OutputStream {
@private
var out:panda.io.OutputStream


var closeUnderlyingStream:panda.core.Bit


init    (out:panda.io.OutputStream)

@override
method write    (b:panda.core.Int8)

@override
method write    (b:panda.core.UInt8)

@override
method write    (c:panda.core.Char)

@override
method write    (b:panda.collections.ListView<panda.core.Int8>, offset:panda.core.Int32, length:panda.core.Int32)

@override
method write    (b:panda.collections.ListView<panda.core.UInt8>, offset:panda.core.Int32, length:panda.core.Int32)

@override
method write    (c:panda.collections.ListView<panda.core.Char>, offset:panda.core.Int32, length:panda.core.Int32)

@override
method flush    ()

@override
method close    ()
}
package panda.core
-- Integer.panda:(offset 317)
@abstract
class Integer:panda.core.Number {

init    ()
}
package panda.core
-- PreconditionError.panda:(offset 1019)

class PreconditionError:panda.core.AssertionError {

init    ()


init    (message:panda.core.String)
}
package panda.collections
-- Map.panda:(offset 373)

interface Map<K, V> : panda.collections.MapView<panda.collections.Map.K,panda.collections.Map.V>, panda.collections.MapWriter<panda.collections.Map.K,panda.collections.Map.V> {
}
package panda.core
-- InternalError.panda:(offset 816)

class InternalError:panda.core.AssertionError {

init    ()


init    (message:panda.core.String)
}
package panda.collections
-- Order.panda:(offset 75)

class Order:panda.core.Enumeration {
@class
var GREATER:panda.collections.Order

@class
var LESS:panda.collections.Order

@class
var EQUAL:panda.collections.Order

@class
var $classInited:panda.core.Bit

@class
method $classInit    ()

@private
init    ()


function convert    ():panda.core.Int32


function convert    ():panda.core.String

@class
function convert    (value:panda.core.Int32):panda.collections.Order
}
package panda.threads
-- Pipe.panda:(offset 1705)

class Pipe:panda.core.Immutable {
@private
var queue:panda.threads.MessageQueue<panda.collections.ImmutableArray<panda.core.Int8>?>


method openInputStream    ():panda.io.InputStream


method openOutputStream    ():panda.io.OutputStream


init    ()
}
package panda.core
-- CastError.panda:(offset 549)

class CastError:panda.core.Error {

init    (message:panda.core.String)
}
package panda.core
-- Int16Wrapper.panda:(offset 25126)
@final
class Int16Wrapper:panda.core.SignedInteger {
@class
var MIN:panda.core.Int16

@class
var MAX:panda.core.Int16

@class
var BITS:panda.core.Int32


var value:panda.core.Int16

@class
var $classInited:panda.core.Bit

@class
function [..]    (left:panda.core.Int16):panda.collections.ListView<panda.core.Int16>

@class
function [..]    (left:panda.core.Int16, right:panda.core.Int16):panda.collections.ListView<panda.core.Int16>

@class
function [..]    (left:panda.core.Int16, right:panda.core.Int16, step:panda.core.Int16):panda.collections.ListView<panda.core.Int16>

@$wrapperMethod
function [..]    (var left:panda.core.Int32Wrapper?, var right:panda.core.Int32Wrapper?, step:panda.core.Int32):panda.core.Int16

@class
function [...]    (left:panda.core.Int16):panda.collections.ListView<panda.core.Int16>

@class
function [...]    (left:panda.core.Int16, right:panda.core.Int16):panda.collections.ListView<panda.core.Int16>

@class
function [...]    (left:panda.core.Int16, right:panda.core.Int16, step:panda.core.Int16):panda.collections.ListView<panda.core.Int16>


init    (value:panda.core.Int16)

@$wrapperMethod
function +    (x:panda.core.Int16):panda.core.Int16

@$wrapperMethod
function -    (x:panda.core.Int16):panda.core.Int16

@$wrapperMethod
function *    (x:panda.core.Int16):panda.core.Int16

@$wrapperMethod
function /    (x:panda.core.Int16):panda.core.Real32

@$wrapperMethod
function //    (x:panda.core.Int16):panda.core.Int16

@$wrapperMethod
function ^    (x:panda.core.UInt16):panda.core.Int16

@$wrapperMethod
function ^    (x:panda.core.Real32):panda.core.Real32

@$wrapperMethod
function ||    (x:panda.core.Int16):panda.core.Int16

@$wrapperMethod
function &&    (x:panda.core.Int16):panda.core.Int16

@$wrapperMethod
function ~~    (x:panda.core.Int16):panda.core.Int16

@$wrapperMethod
function !!    ():panda.core.Int16

@$wrapperMethod
function >    (x:panda.core.Int16):panda.core.Bit

@$wrapperMethod
function >=    (x:panda.core.Int16):panda.core.Bit

@$wrapperMethod
function <    (x:panda.core.Int16):panda.core.Bit

@$wrapperMethod
function <=    (x:panda.core.Int16):panda.core.Bit

@$wrapperMethod
function max    (other:panda.core.Int32):panda.core.Int32

@$wrapperMethod
function max    (other:panda.core.Int64):panda.core.Int64

@$wrapperMethod
function max    (other:panda.core.UInt32):panda.core.UInt32

@$wrapperMethod
function max    (other:panda.core.UInt64):panda.core.UInt64

@$wrapperMethod
function max    (other:panda.core.Real32):panda.core.Real32

@$wrapperMethod
function max    (other:panda.core.Real64):panda.core.Real64

@$wrapperMethod
function min    (other:panda.core.Int32):panda.core.Int32

@$wrapperMethod
function min    (other:panda.core.Int64):panda.core.Int64

@$wrapperMethod
function min    (other:panda.core.UInt32):panda.core.Int16

@$wrapperMethod
function min    (other:panda.core.UInt64):panda.core.Int16

@$wrapperMethod
function min    (other:panda.core.Real32):panda.core.Real32

@$wrapperMethod
function min    (other:panda.core.Real64):panda.core.Real64

@$wrapperMethod
function sign    ():panda.core.Int32

@$wrapperMethod
function abs    ():panda.core.Int16

@$wrapperMethod
function sqrt    ():panda.core.Real32

@$wrapperMethod
function sin    ():panda.core.Real32

@$wrapperMethod
function cos    ():panda.core.Real32

@$wrapperMethod
function tan    ():panda.core.Real32

@$wrapperMethod
function []    (index:panda.core.Int32):panda.core.Bit

@external @$wrapperMethod
function length    ():panda.core.Int32

@protected @override
function convertToString    (thousandsSeparator:panda.core.CharWrapper?, minWholeDigits:panda.core.Int32Wrapper?, minFractionDigits:panda.core.Int32Wrapper?, maxFractionDigits:panda.core.Int32Wrapper?, base:panda.core.Int32, baseChars:panda.core.String):panda.core.String

@override
function =    (o:panda.core.Object):panda.core.Bit

@override
function convert    ():panda.core.Int8

@override
function convert    ():panda.core.Int16

@override
function convert    ():panda.core.Int32

@override
function convert    ():panda.core.Int64

@override
function convert    ():panda.core.UInt8

@override
function convert    ():panda.core.UInt16

@override
function convert    ():panda.core.UInt32

@override
function convert    ():panda.core.UInt64

@override
function convert    ():panda.core.Real32

@override
function convert    ():panda.core.Real64

@override
function convert    ():panda.core.String

@class
method $classInit    ()
}
package panda.core
-- ParameterError.panda:(offset 1068)

class ParameterError:panda.core.SafetyError {

init    ()


init    (message:panda.core.String)
}
package panda.math
-- Random.panda:(offset 323)
@private
class SharedRandom:panda.core.Object {
@thread
var count:panda.core.Int32


@thread
var instance:panda.math.Random


@class
var $classInited:panda.core.Bit


init    ()

@class
method $classInit    ()

@class
method $initcount    ():panda.core.Int32

@class
method $initinstance    ():panda.math.Random
}
package panda.collections
-- PrimitiveArray.panda:(offset 690)

class PrimitiveArray:panda.core.Object {
@protected @class @external
method setLength    (a:panda.core.Object, elementSize:panda.core.Int32, reserved:panda.core.Bit, length:panda.core.Int32)


init    ()
}
package panda.collections
-- ListView.panda:(offset 7500)

interface ListView<T> : panda.collections.CollectionView<panda.collections.ListView.T> {
@abstract
function []    (i:panda.core.Int32):panda.collections.ListView.T


function [..]    (var start:panda.core.Int32Wrapper?, var end:panda.core.Int32Wrapper?, step:panda.core.Int32):panda.collections.ListView<panda.collections.ListView.T>
    {
if (start = null)         {
if (step > 0)
start := 0
else
start := (length - 1)
        }
if (end = null)         {
if (step > 0)
end := length
else
end := -1
        }
return self[(start)->(Int) .. (end)->(Int) by step]
    }


function [..]    (start:panda.core.Int32, end:panda.core.Int32, step:panda.core.Int32):panda.collections.ListView<panda.collections.ListView.T>
    {
def result := Array<T>()
for i in start .. end by step
result.add(self[i])
return result
    }


function [...]    (var start:panda.core.Int32Wrapper?, var end:panda.core.Int32Wrapper?, step:panda.core.Int32):panda.collections.ListView<panda.collections.ListView.T>
    {
if (start = null)         {
if (step > 0)
start := 0
else
start := (length - 1)
        }
if (end = null)         {
if (step > 0)
end := (length - 1)
else
end := 0
        }
return self[(start)->(Int) ... (end)->(Int) by step]
    }


function [...]    (start:panda.core.Int32, end:panda.core.Int32, step:panda.core.Int32):panda.collections.ListView<panda.collections.ListView.T>
    {
def result := Array<T>()
for i in start ... end by step
result.add(self[i])
return result
    }

@override
function contains    (value:panda.collections.ListView.T):panda.core.Bit
    {
return (indexOf(value) != null)
    }


function indexOf    (value:panda.collections.ListView.T):panda.core.Int32Wrapper?
    {
for         (i, test) in enumeration() {
if (test = value)
return i
        }
return null
    }


function indexOf    (value:panda.collections.ListView.T, start:panda.core.Int32):panda.core.Int32Wrapper?
    {
for i in start .. length         {
if (self[i] = value)
return i
        }
return null
    }


function lastIndexOf    (value:panda.collections.ListView.T):panda.core.Int32Wrapper?
    {
for i in (length - 1) ... 0 by -1         {
if (self[i] = value)
return i
        }
return null
    }


function lastIndexOf    (value:panda.collections.ListView.T, start:panda.core.Int32):panda.core.Int32Wrapper?
    {
for i in start ... 0 by -1         {
if (self[i] = value)
return i
        }
return null
    }

@override @safeReturn
function iterator    ():panda.collections.Iterator<panda.collections.ListView.T>
    {
return ListIterator<T>(self)
    }


function join    ():panda.core.String
    {
return join(", ")
    }


function join    (delimiter:panda.core.String):panda.core.String
    {
def result := MutableString()
for         (i, v) in enumeration() {
if (i > 0)
result.append(delimiter)
if (v != null)
result.append(v)
else
result.append("<null>")
        }
return (result)->>(String)
    }
}
package panda.io
-- IOException.panda:(offset 570)
@abstract
class IOException:panda.core.Exception {

init    (message:panda.core.String)
}
package panda.math
-- XorShiftRandom.panda:(offset 1917)

class XorShiftRandom:panda.core.Object (panda.math.Random) {
@private
var _seed:panda.core.UInt64


init    ()


init    (seed:panda.core.Int64)

@self
method seed:=    (seed:panda.core.Int64)

@override @math(overflow)
method int64    ():panda.core.Int64
}
package panda.threads
-- MessageQueue.panda:(offset 3232)

class MessageQueue<T:Immutable>:panda.core.Immutable {
@private
var internalQueue:panda.threads.InternalMessageQueue := InternalMessageQueue()


method post    (data:panda.threads.MessageQueue.T)
    {
internalQueue.post(data)
    }


method postAndExit    (data:panda.threads.MessageQueue.T)
    {
post(data)
InternalMessageQueue.threadExit()
    }


method pendingMessages    ():panda.core.Int32
    {
return internalQueue.pendingMessages()
    }


method hasMessage    ():panda.core.Bit
    {
return (pendingMessages() > 0)
    }


method getMessage    ():panda.threads.MessageQueue.T
    {
return (internalQueue.getMessage())->(T)
    }


method getMessage    (timeout:panda.core.Int32):panda.threads.MessageQueue.T
    {
return (internalQueue.getMessage(timeout))->(T)
    }


init    ()
    {
super.init()
    }
}
package panda.collections
-- Iterable.panda:(offset 104)

interface Iterable<T> {
@abstract @safeReturn
function iterator    ():panda.collections.Iterator<panda.collections.Iterable.T>
}
package panda.collections
-- ImmutableHashMap.panda:(offset 7022)

class ImmutableHashMap<K:Immutable, V:Immutable>:panda.core.Immutable (panda.collections.MapView<panda.collections.ImmutableHashMap.K,panda.collections.ImmutableHashMap.V>) {
@private
var _length:panda.core.Int32

@private
var contents:panda.collections.ImmutablePrimitiveArray<panda.collections.ImmutableMapEntry<panda.collections.ImmutableHashMap.K,panda.collections.ImmutableHashMap.V>?>


init    ()
    {
init(HashMap<K, V>())
    }


init    (m:panda.collections.MapView<panda.collections.ImmutableHashMap.K,panda.collections.ImmutableHashMap.V>)
    {
def h:HashMap<K, V>
if (m)-?>(HashMap<K, V>)
h := (m)->(HashMap<K, V>)
else
h := HashMap<K, V>(m)
def contentsTemp := PrimitiveArray<ImmutableMapEntry<K, V>?>(h.contents.length)
for i in 0 .. h.contents.length
contentsTemp[i] := copy(h.contents[i])
contents := ImmutablePrimitiveArray<ImmutableMapEntry<K, V>?>(contentsTemp)
_length := h.length
    }


init    (keys:panda.collections.ListView<panda.collections.ImmutableHashMap.K>, values:panda.collections.ListView<panda.collections.ImmutableHashMap.V>)
    {
init(HashMap<K, V>(keys, values))
    }


init    (keys:panda.collections.PrimitiveArray<panda.collections.ImmutableHashMap.K>, values:panda.collections.PrimitiveArray<panda.collections.ImmutableHashMap.V>)
    {
init(HashMap<K, V>(keys, values))
    }

@private
function copy    (m:panda.collections.MutableMapEntry<panda.collections.ImmutableHashMap.K,panda.collections.ImmutableHashMap.V>?):panda.collections.ImmutableMapEntry<panda.collections.ImmutableHashMap.K,panda.collections.ImmutableHashMap.V>?
    {
if (m = null)
return null
return ImmutableMapEntry<K, V>(m.key, m.value, copy(m.next))
    }

@private @math(overflow)
function indexFor    (key:panda.collections.ImmutableHashMap.K):panda.core.Int32
    {
var h:Int32
if (key = null)
h := 0
else
h := key.hash
h ||= ((((h >> 20) ~~ (h >> 12)) ~~ (h >> 7)) ~~ (h >> 4))
return (h && (contents.length - 1))
    }

@override
function []    (key:panda.collections.ImmutableHashMap.K):panda.collections.ImmutableHashMap.V?
    {
var index := indexFor(key)
var e := contents[index]
while ((e != null) & (e.key != key))         {
e := e.next
        }
if (e != null)
return e.value
else
return null
    }

@override
function length    ():panda.core.Int32
    {
return _length
    }

@override
function contains    (key:panda.collections.ImmutableHashMap.K):panda.core.Bit
    {
def index := indexFor(key)
var e := contents[index]
while ((e != null) & (e.key != key))
e := e.next
return (e != null)
    }

@override @safeReturn
function iterator    ():panda.collections.Iterator<(panda.collections.ImmutableHashMap.K,panda.collections.ImmutableHashMap.V)>
    {
return ImmutableHashMapEntryIterator<K, V>(self)
    }

@override
function convert    ():panda.core.String
    {
def result := MutableString()
result.append("{")
var first := true
for e in contents         {
var current := e
while (current != null)             {
if !first
result.append(", ")
else
first := false
def key := current.key
if (key != null)
result.append(key)
else
result.append("null")
result.append(": ")
def value := current.value
if (value != null)
result.append(value)
else
result.append("null")
current := current.next
            }
        }
result.append("}")
return (result)->>(String)
    }
}
package panda.core
-- Number.panda:(offset 17572)
@abstract
class Number:panda.core.Primitive (panda.core.Formattable) {
@private @class
var FORMAT_PATTERN:panda.core.RegularExpression

@class
var $classInited:panda.core.Bit

@abstract
function convertToString    (thousandsSeparator:panda.core.CharWrapper?, minWholeDigits:panda.core.Int32Wrapper?, minFractionDigits:panda.core.Int32Wrapper?, maxFractionDigits:panda.core.Int32Wrapper?, base:panda.core.Int32, baseChars:panda.core.String):panda.core.String

@protected @class
function convertToString    (var value:panda.core.Int64, thousandsSeparator:panda.core.CharWrapper?, var minWholeDigits:panda.core.Int32Wrapper?, minFractionDigits:panda.core.Int32Wrapper?, maxFractionDigits:panda.core.Int32Wrapper?, base:panda.core.Int32, baseChars:panda.core.String):panda.core.String

@protected @class
function convertToString    (var value:panda.core.UInt64, thousandsSeparator:panda.core.CharWrapper?, var minWholeDigits:panda.core.Int32Wrapper?, minFractionDigits:panda.core.Int32Wrapper?, maxFractionDigits:panda.core.Int32Wrapper?, base:panda.core.Int32, baseChars:panda.core.String):panda.core.String

@protected @class
function convertToString    (value:panda.core.Real64, thousandsSeparator:panda.core.CharWrapper?, minWholeDigits:panda.core.Int32Wrapper?, minFractionDigits:panda.core.Int32Wrapper?, maxFractionDigits:panda.core.Int32Wrapper?, base:panda.core.Int32, baseChars:panda.core.String):panda.core.String

@private @class @limited
method roundUp    (m:panda.core.MutableString, i:panda.core.Int32)

@override
function format    (var fmt:panda.core.String):panda.core.String

@abstract
function convert    ():panda.core.Int8

@abstract
function convert    ():panda.core.Int16

@abstract
function convert    ():panda.core.Int32

@abstract
function convert    ():panda.core.Int64

@abstract
function convert    ():panda.core.UInt8

@abstract
function convert    ():panda.core.UInt16

@abstract
function convert    ():panda.core.UInt32

@abstract
function convert    ():panda.core.UInt64

@abstract
function convert    ():panda.core.Real32

@abstract
function convert    ():panda.core.Real64

@override
function hash    ():panda.core.Int32


init    ()

@class
method $classInit    ()
}
package panda.collections
-- ImmutableHashMap.panda:(offset 1883)
@abstract @private
class ImmutableHashMapIterator<K:Immutable, V:Immutable, R:Immutable>:panda.core.Object (panda.collections.Iterator<panda.collections.ImmutableHashMapIterator.R>) {

var map:panda.collections.ImmutableHashMap<panda.collections.ImmutableHashMapIterator.K,panda.collections.ImmutableHashMapIterator.V>


var index:panda.core.Int32 := 0


var entry:panda.collections.ImmutableMapEntry<panda.collections.ImmutableHashMapIterator.K,panda.collections.ImmutableHashMapIterator.V>?


init    (map:panda.collections.ImmutableHashMap<panda.collections.ImmutableHashMapIterator.K,panda.collections.ImmutableHashMapIterator.V>)
    {
self.map := map
entry := map.contents[0]
while (entry = null)         {
index += 1
if (index >= map.contents.length)
break
entry := map.contents[index]
        }
    }

@override
function done    ():panda.core.Bit
    {
return (index >= map.contents.length)
    }

@abstract
function result    (e:panda.collections.ImmutableMapEntry<panda.collections.ImmutableHashMapIterator.K,panda.collections.ImmutableHashMapIterator.V>):panda.collections.ImmutableHashMapIterator.R

@override @self
method next    ():panda.collections.ImmutableHashMapIterator.R
    {
assert (entry != null)
def result := result(entry)
entry := entry.next
while (entry = null)         {
index += 1
if (index >= map.contents.length)
break
entry := map.contents[index]
        }
return result
    }
}
package panda.core
-- RegularExpression.panda:(offset 4308)
@final
class RegularExpression:panda.core.Immutable {
@class
var MULTILINE:panda.core.Int32


var pattern:panda.core.String


var nativeHandle:panda.core.$NativePointer

@class
var $classInited:panda.core.Bit


init    (pattern:panda.core.String)


init    (pattern:panda.core.String, flags:panda.core.Int32)

@safeReturn
function matcher    (text:panda.core.String):panda.core.Matcher

@override
function convert    ():panda.core.String

@override
method finalize    ()

@class
method escape    (s:panda.core.String):panda.core.String

@external
function clone    ():panda.core.RegularExpression

@private @external
method compile    (regex:panda.core.String, flags:panda.core.Int32)

@external
method close    ()

@class
method $classInit    ()
}
package panda.core
-- NotSupportedException.panda:(offset 824)

class NotSupportedException:panda.core.Exception {

init    ()


init    (message:panda.core.String)
}
package panda.core
-- Matcher.panda:(offset 10775)
@final
class Matcher:panda.core.Object {
@private @class
var REPLACEMENT_GROUPS:panda.core.RegularExpression

@private
var regex:panda.core.RegularExpression

@private
var matched:panda.core.Bit

@private
var replacementIndex:panda.core.Int32

@class
var $classInited:panda.core.Bit


var _searchText:panda.core.String


init    (regex:panda.core.RegularExpression, searchText:panda.core.String)

@self
method searchText:=    (text:panda.core.String)

@self
method matches    ():panda.core.Bit

@private @class @external
method matches    (nativeHandle:panda.core.$NativePointer):panda.core.Bit

@self
method find    ():panda.core.Bit

@self
method find    (start:panda.core.Int32):panda.core.Bit

@private @class @external
method find    (nativeHandle:panda.core.$NativePointer, startIndex:panda.core.Int32):panda.core.Bit


function group    (i:panda.core.Int32):panda.core.String

@private @class @external
function group    (nativeHandle:panda.core.$NativePointer, group:panda.core.Int32):panda.core.String


function groupCount    ():panda.core.Int32

@private @class @external
function groupCount    (nativeHandle:panda.core.$NativePointer):panda.core.Int32


function start    ():panda.core.Int32

@private @class @external
function start    (nativeHandle:panda.core.$NativePointer):panda.core.Int32


function end    ():panda.core.Int32

@private @class @external
function end    (nativeHandle:panda.core.$NativePointer):panda.core.Int32

@limited
method appendReplacement    (target:panda.core.MutableString, replacement:panda.core.String)

@limited
method appendReplacement    (target:panda.core.MutableString, replacement:panda.core.String, allowGroupReferences:panda.core.Bit)

@limited
method appendTail    (target:panda.core.MutableString)


method close    ()

@private @class @external
method setText    (nativeHandle:panda.core.$NativePointer, text:panda.core.String)

@class
method $classInit    ()


function searchText    ():panda.core.String
}
package panda.collections
-- ImmutableHashMap.panda:(offset 2187)
@private
class ImmutableHashMapEntryIterator<K:Immutable, V:Immutable>:panda.collections.ImmutableHashMapIterator<panda.collections.ImmutableHashMapEntryIterator.K,panda.collections.ImmutableHashMapEntryIterator.V,(panda.collections.ImmutableHashMapEntryIterator.K,panda.collections.ImmutableHashMapEntryIterator.V)> {

init    (map:panda.collections.ImmutableHashMap<panda.collections.ImmutableHashMapEntryIterator.K,panda.collections.ImmutableHashMapEntryIterator.V>)
    {
super.init(map)
    }

@override
function result    (e:panda.collections.ImmutableMapEntry<panda.collections.ImmutableHashMapEntryIterator.K,panda.collections.ImmutableHashMapEntryIterator.V>):(panda.collections.ImmutableHashMapEntryIterator.K,panda.collections.ImmutableHashMapEntryIterator.V)
    {
return (e.key, e.value)
    }
}
package panda.collections
-- Tuple.panda:(offset 479)

class Tuple:panda.core.Object {

init    ()
}
package panda.io
-- FileOutputStream.panda:(offset 1172)
@private
class FileOutputStream:panda.io.OutputStream {

var nativeFile:panda.core.$NativePointer


init    (nativeFile:panda.core.$NativePointer)


init    (file:panda.io.File)

@override
method write    (b:panda.core.Int8)

@override
method write    (b:panda.collections.ListView<panda.core.Int8>, offset:panda.core.Int32, length:panda.core.Int32)

@override
method close    ()

@private @class @external
method close    (nativeFile:panda.core.$NativePointer):panda.core.Int32

@override
method finalize    ()

@private @class @external
method open    (path:panda.core.String, read:panda.core.Bit, write:panda.core.Bit):panda.core.$NativePointer

@private @class @external
method writeInt8    (nativeFile:panda.core.$NativePointer, b:panda.core.Int8)

@private @class @external
method writeInt8Array    (nativeFile:panda.core.$NativePointer, b:panda.collections.ListView<panda.core.Int8>, offset:panda.core.Int32, length:panda.core.Int32)
}
package panda.core
-- InvariantError.panda:(offset 1005)

class InvariantError:panda.core.AssertionError {

init    ()


init    (message:panda.core.String)
}
package panda.collections
-- CollectionView.panda:(offset 1980)

interface CollectionView<T> : panda.collections.Iterable<panda.collections.CollectionView.T> {
@abstract
function length    ():panda.core.Int32


function enumeration    ():panda.collections.Iterator<(panda.core.Int32,panda.collections.CollectionView.T)>
    {
return Enumerator<T>(self)
    }


function contains    (object:panda.collections.CollectionView.T):panda.core.Bit
    {
for v in self         {
if (object = v)
return true
        }
return false
    }


function filter    (f:(panda.collections.CollectionView.T)=>(panda.core.Bit)?):panda.collections.CollectionView<panda.collections.CollectionView.T>
    {
def result := Array<T>()
for v in self         {
if f(v)
result.add(v)
        }
return result
    }


function fold    (f:(panda.collections.CollectionView.T,panda.collections.CollectionView.T)=>(panda.collections.CollectionView.T)?):panda.collections.CollectionView.T
    {
def i := iterator
var result:T := i.next()
while !i.done
result := f(result, i.next())
return result
    }


function fold    (f:(panda.collections.CollectionView.T,panda.collections.CollectionView.T)=>(panda.collections.CollectionView.T)?, start:panda.collections.CollectionView.T):panda.collections.CollectionView.T
    {
var result:T := start
for v in self
result := f(result, v)
return result
    }


method apply    (m:(panda.collections.CollectionView.T)=&>())
    {
for v in self
m(v)
    }


function convert    ():panda.collections.Array<panda.collections.CollectionView.T>
    {
def result := Array<T>()
for v in self
result.add(v)
return result
    }
}
package panda.io
-- OutputStream.panda:(offset 18867)
@abstract
class OutputStream:panda.core.Object {
@protected
var closed:panda.core.Bit


method write    (b:panda.core.Int8)


method write    (b:panda.core.UInt8)


method write    (b:panda.collections.ListView<panda.core.Int8>)


method write    (b:panda.collections.ListView<panda.core.Int8>, offset:panda.core.Int32, length:panda.core.Int32)


method write    (b:panda.collections.ListView<panda.core.UInt8>)


method write    (b:panda.collections.ListView<panda.core.UInt8>, offset:panda.core.Int32, length:panda.core.Int32)


method write    (c:panda.core.Char)


method write    (c:panda.collections.ListView<panda.core.Char>)


method write    (c:panda.collections.ListView<panda.core.Char>, offset:panda.core.Int32, length:panda.core.Int32)


method write    (o:panda.core.Object)


method write    (s:panda.core.String)

@final
method write    (s:panda.core.String, params:panda.core.Object...)

@private
method digit    (c:panda.core.Char):panda.core.Int32

@private
function processField    (s:panda.core.String, field:panda.core.String):panda.core.String


method writeLine    (s:panda.core.String, params:panda.core.Object...)


method writeLine    ()


method writeLine    (s:panda.core.String)


method writeLine    (c:panda.core.Char)


method writeLine    (c:panda.collections.ListView<panda.core.Char>)


method writeLine    (c:panda.collections.ListView<panda.core.Char>, offset:panda.core.Int32, length:panda.core.Int32)


method writeLine    (o:panda.core.Object)


method flush    ()


method close    ()


init    ()
}
package panda.collections
-- Set.panda:(offset 63)

interface Set<T> : panda.collections.Collection<panda.collections.Set.T> {
}
package panda.core
-- Error.panda:(offset 3247)

class Error:panda.core.Immutable {

var message:panda.core.String


var stack:panda.collections.ImmutablePrimitiveArray<panda.core.StackTraceEntry>


init    ()


init    (message:panda.core.String)

@override
function convert    ():panda.core.String

@private @external
function getStackTrace    ():panda.collections.ImmutablePrimitiveArray<panda.core.StackTraceEntry>
}
package panda.collections
-- ListView.panda:(offset 561)

class ListIterator<T>:panda.core.Object (panda.collections.Iterator<panda.collections.ListIterator.T>) {

var list:panda.collections.ListView<panda.collections.ListIterator.T>


var index:panda.core.Int32 := 0


init    (list:panda.collections.ListView<panda.collections.ListIterator.T>)
    {
self.list := list
    }

@override
function done    ():panda.core.Bit
    {
return (index >= list.length)
    }

@override @self
method next    ():panda.collections.ListIterator.T
    {
def result:T := list[index]
index += 1
return result
    }
}
package panda.collections
-- HashMap.panda:(offset 1992)
@abstract @private
class HashMapIterator<K, V, R>:panda.core.Object (panda.collections.Iterator<panda.collections.HashMapIterator.R>) {

var map:panda.collections.HashMap<panda.collections.HashMapIterator.K,panda.collections.HashMapIterator.V>


var index:panda.core.Int32 := 0


var entry:panda.collections.MutableMapEntry<panda.collections.HashMapIterator.K,panda.collections.HashMapIterator.V>?


var changeCount:panda.core.Int32


init    (map:panda.collections.HashMap<panda.collections.HashMapIterator.K,panda.collections.HashMapIterator.V>)
    {
self.map := map
self.changeCount := map.changeCount
entry := map.contents[0]
while (entry = null)         {
index += 1
if (index >= map.contents.length)
break
entry := map.contents[index]
        }
    }

@override
function done    ():panda.core.Bit
    {
return (index >= map.contents.length)
    }

@abstract
function result    (e:panda.collections.MutableMapEntry<panda.collections.HashMapIterator.K,panda.collections.HashMapIterator.V>):panda.collections.HashMapIterator.R

@override @self
method next    ():panda.collections.HashMapIterator.R
    {
assert (changeCount = map.changeCount) : ((self.$class.name + " was modified ") + "during iteration")
assert (entry != null) : ((("null entry at index " + index) + ", map length ") + map.contents.length)
def result := result(entry)
entry := entry.next
while (entry = null)         {
index += 1
if (index >= map.contents.length)
break
entry := map.contents[index]
        }
return result
    }
}
package panda.io
-- LineNumberInputStream.panda:(offset 3574)

class LineNumberInputStream:panda.io.FilterInputStream {

var line:panda.core.Int32


var column:panda.core.Int32


init    (raw:panda.io.InputStream)

@override
method readInt8    ():panda.core.Int8Wrapper?

@override
method readUInt8    ():panda.core.UInt8Wrapper?

@override
method readChar    ():panda.core.CharWrapper?

@override
method read    (bytes:panda.collections.ListWriter<panda.core.Int8>, max:panda.core.Int32):panda.core.Int32Wrapper?

@override
method read    (bytes:panda.collections.ListWriter<panda.core.UInt8>, max:panda.core.Int32):panda.core.Int32Wrapper?

@override
method read    (chars:panda.collections.ListWriter<panda.core.Char>, max:panda.core.Int32):panda.core.Int32Wrapper?
}
package panda.core
-- System.panda:(offset 1375)

class OperatingSystemType:panda.core.Enumeration {
@class
var MACOSX:panda.core.OperatingSystemType

@class
var LINUX:panda.core.OperatingSystemType

@class
var OTHER_UNIX:panda.core.OperatingSystemType

@class
var WINDOWS:panda.core.OperatingSystemType

@class
var $classInited:panda.core.Bit

@class
method $classInit    ()

@private
init    ()


function convert    ():panda.core.Int32


function convert    ():panda.core.String

@class
function convert    (value:panda.core.Int32):panda.core.OperatingSystemType
}
package panda.core
-- Panda.panda:(offset 18910)
@final
class Panda:panda.core.Object {
@class
function FIXME_TEMP_convertArray    (a:panda.collections.PrimitiveArray<panda.core.String>):panda.collections.ListView<panda.core.String>

@class @external
method currentTime    ():panda.core.Int64

@class
function pow    (var a:panda.core.Int32, var b:panda.core.UInt32):panda.core.Int32

@class
function pow    (var a:panda.core.Int64, var b:panda.core.UInt32):panda.core.Int64

@class
function pow    (var a:panda.core.UInt32, var b:panda.core.UInt32):panda.core.UInt32

@class
function pow    (var a:panda.core.UInt64, var b:panda.core.UInt64):panda.core.UInt64

@class @external
function pow    (a:panda.core.Real32, b:panda.core.Int32):panda.core.Real32

@class @external
function pow    (a:panda.core.Real32, b:panda.core.Real32):panda.core.Real32

@class @external
function pow    (a:panda.core.Real64, b:panda.core.Int32):panda.core.Real64

@class @external
function pow    (a:panda.core.Real64, b:panda.core.Real64):panda.core.Real64

@class
method nullableEquals    (o1:panda.core.Object?, o2:panda.core.Object?):panda.core.Bit

@class
function id    (o:panda.core.Object):panda.core.String

@class
method dumpStack    ()

@class @unsafeFunction
method log    (o:panda.core.Object)

@class @external
method debugWrite    (i:panda.core.Int32)

@class @external
method debugWrite    (o:panda.core.Object)

@class @external
method debugWritePointer    (o:panda.core.Object)

@class
function instanceOfInt8    (i:panda.core.Int64):panda.core.Bit

@class
function instanceOfInt8    (i:panda.core.UInt64):panda.core.Bit

@class
function instanceOfInt8    (o:panda.core.Object?, nullable:panda.core.Bit):panda.core.Bit

@class
function instanceOfInt16    (i:panda.core.Int64):panda.core.Bit

@class
function instanceOfInt16    (i:panda.core.UInt64):panda.core.Bit

@class
function instanceOfInt16    (o:panda.core.Object?, nullable:panda.core.Bit):panda.core.Bit

@class
function instanceOfInt32    (i:panda.core.Int64):panda.core.Bit

@class
function instanceOfInt32    (i:panda.core.UInt64):panda.core.Bit

@class
function instanceOfInt32    (o:panda.core.Object?, nullable:panda.core.Bit):panda.core.Bit

@class
function instanceOfInt64    (i:panda.core.Int64):panda.core.Bit

@class
function instanceOfInt64    (i:panda.core.UInt64):panda.core.Bit

@class
function instanceOfInt64    (o:panda.core.Object?, nullable:panda.core.Bit):panda.core.Bit

@class
function instanceOfUInt8    (i:panda.core.Int64):panda.core.Bit

@class
function instanceOfUInt8    (i:panda.core.UInt64):panda.core.Bit

@class
function instanceOfUInt8    (o:panda.core.Object?, nullable:panda.core.Bit):panda.core.Bit

@class
function instanceOfUInt16    (i:panda.core.Int64):panda.core.Bit

@class
function instanceOfUInt16    (i:panda.core.UInt64):panda.core.Bit

@class
function instanceOfUInt16    (o:panda.core.Object?, nullable:panda.core.Bit):panda.core.Bit

@class
function instanceOfUInt32    (i:panda.core.Int64):panda.core.Bit

@class
function instanceOfUInt32    (i:panda.core.UInt64):panda.core.Bit

@class
function instanceOfUInt32    (o:panda.core.Object?, nullable:panda.core.Bit):panda.core.Bit

@class
function instanceOfUInt64    (i:panda.core.Int64):panda.core.Bit

@class
function instanceOfUInt64    (i:panda.core.UInt64):panda.core.Bit

@class
function instanceOfUInt64    (o:panda.core.Object?, nullable:panda.core.Bit):panda.core.Bit

@class
function instanceOfReal32    (o:panda.core.Object?, nullable:panda.core.Bit):panda.core.Bit

@class
function instanceOfReal64    (o:panda.core.Object?, nullable:panda.core.Bit):panda.core.Bit

@class
function instanceOfBit    (b:panda.core.Bit):panda.core.Bit

@class
function instanceOfBit    (o:panda.core.Object?, nullable:panda.core.Bit):panda.core.Bit

@class
function instanceOfChar    (i:panda.core.Int64):panda.core.Bit

@class
function instanceOfChar    (i:panda.core.UInt64):panda.core.Bit

@class
function instanceOfChar    (c:panda.core.Char):panda.core.Bit

@class
function instanceOfChar    (o:panda.core.Object?, nullable:panda.core.Bit):panda.core.Bit

@class
method checkCast    (o:panda.core.Object?, c:panda.core.Class, nullable:panda.core.Bit)

@private @class @limited
method swap    (a:panda.collections.PrimitiveArray<panda.core.Object>, i1:panda.core.Int32, i2:panda.core.Int32)

@private @class @limited
method sort    (a:panda.collections.PrimitiveArray<panda.core.Object>, left:panda.core.Int32, right:panda.core.Int32, greater:(panda.core.Object,panda.core.Object)=>(panda.core.Bit)?)

@class @limited
method sort    (a:panda.collections.PrimitiveArray<panda.core.Object>, greater:(panda.core.Object,panda.core.Object)=>(panda.core.Bit)?)

@class
method getThreadLocalBit    (index:panda.core.Int32, initializer:()=>(panda.core.Bit)?):panda.core.Bit

@class
method getThreadLocalInt8    (index:panda.core.Int32, initializer:panda.core.$NativePointer):panda.core.Int8

@class
method getThreadLocalInt16    (index:panda.core.Int32, initializer:panda.core.$NativePointer):panda.core.Int16

@class
method getThreadLocalInt32    (index:panda.core.Int32, initializer:panda.core.$NativePointer):panda.core.Int32

@class
method getThreadLocalInt64    (index:panda.core.Int32, initializer:panda.core.$NativePointer):panda.core.Int64

@class
method getThreadLocalChar    (index:panda.core.Int32, initializer:panda.core.$NativePointer):panda.core.Char

@class
method getThreadLocalReal32    (index:panda.core.Int32, initializer:panda.core.$NativePointer):panda.core.Real32

@class
method getThreadLocalReal64    (index:panda.core.Int32, initializer:panda.core.$NativePointer):panda.core.Real64

@class
method getThreadLocalObject    (index:panda.core.Int32, initializer:panda.core.$NativePointer):panda.core.Object?

@class
method setThreadLocalBit    (index:panda.core.Int32, value:panda.core.Bit)

@class
method setThreadLocalInt8    (index:panda.core.Int32, value:panda.core.Int8)

@class
method setThreadLocalInt16    (index:panda.core.Int32, value:panda.core.Int16)

@class
method setThreadLocalInt32    (index:panda.core.Int32, value:panda.core.Int32)

@class
method setThreadLocalInt64    (index:panda.core.Int32, value:panda.core.Int64)

@class
method setThreadLocalChar    (index:panda.core.Int32, value:panda.core.Char)

@class
method setThreadLocalReal32    (index:panda.core.Int32, value:panda.core.Real32)

@class
method setThreadLocalReal64    (index:panda.core.Int32, value:panda.core.Real64)

@class
method setThreadLocalObject    (index:panda.core.Int32, value:panda.core.Object?)

@class
method failAssert    (message:panda.core.String?)

@class @external
method debugAllocations    ()

@class @external
method allocThreadLocal    ():panda.core.Int32

@class @external
method getThreadLocals    (t:panda.threads.Thread):panda.collections.HashMap<panda.core.Int32,panda.core.Object?>

@class @external
function instanceOf    (o:panda.core.Object?, c:panda.core.Class, nullable:panda.core.Bit):panda.core.Bit

@class @external
method real32Bits    (r:panda.core.Real32):panda.core.Int32

@class @external
method real64Bits    (r:panda.core.Real64):panda.core.Int64

@class @external
method callBitFunction    (f:panda.core.$NativePointer):panda.core.Bit

@class @external
method callInt8Function    (f:panda.core.$NativePointer):panda.core.Int8

@class @external
method callInt16Function    (f:panda.core.$NativePointer):panda.core.Int16

@class @external
method callInt32Function    (f:panda.core.$NativePointer):panda.core.Int32

@class @external
method callInt64Function    (f:panda.core.$NativePointer):panda.core.Int64

@class @external
method callCharFunction    (f:panda.core.$NativePointer):panda.core.Char

@class @external
method callReal32Function    (f:panda.core.$NativePointer):panda.core.Real32

@class @external
method callReal64Function    (f:panda.core.$NativePointer):panda.core.Real64

@class @external
method callObjectFunction    (f:panda.core.$NativePointer):panda.core.Object?


init    ()
}
package panda.core
-- System.panda:(offset 228)
@private
class Environment:panda.core.Immutable {

function []    (key:panda.core.String):panda.core.String?

@private @class @external
function pandaGetEnv    (key:panda.core.String):panda.core.String?


init    ()
}
package panda.core
-- System.panda:(offset 1963)

class OperatingSystemInfo:panda.core.Value {

var type:panda.core.OperatingSystemType

@private
init    (type:panda.core.OperatingSystemType)
}
package panda.collections
-- HashMap.panda:(offset 10812)

class HashMap<K, V>:panda.core.Object (panda.collections.Map<panda.collections.HashMap.K,panda.collections.HashMap.V>) {
@private @class
var DEFAULT_LENGTH:panda.core.Int32 := 16

@private @class
var LOAD_FACTOR:panda.core.Real64 := 0.75

@private
var contents:panda.collections.PrimitiveArray<panda.collections.MutableMapEntry<panda.collections.HashMap.K,panda.collections.HashMap.V>?>

@private
var threshold:panda.core.Int32

@private
var changeCount:panda.core.Int32 := 0

@class
var $classInited:panda.core.Bit

@readonly
var _length:panda.core.Int32


init    ()
    {
clear()
    }

@private
init    (keys:panda.collections.PrimitiveArray<panda.collections.HashMap.K>, values:panda.collections.PrimitiveArray<panda.collections.HashMap.V>)
    {
init()
for i in 0 .. keys.length
self[keys[i]] := values[i]
    }


init    (keys:panda.collections.ListView<panda.collections.HashMap.K>, values:panda.collections.ListView<panda.collections.HashMap.V>)
    {
init()
for         (i, key) in keys.enumeration()
self[key] := values[i]
    }


init    (map:panda.collections.MapView<panda.collections.HashMap.K,panda.collections.HashMap.V>)
    {
init()
for         (key, value) in map
self[key] := value
    }

@private @math(overflow)
function indexFor    (key:panda.collections.HashMap.K):panda.core.Int32
    {
var h:Int32
if (key = null)
h := 0
else
h := key.hash
h ||= ((((h >> 20) ~~ (h >> 12)) ~~ (h >> 7)) ~~ (h >> 4))
h &&= (contents.length - 1)
return h
    }

@override
function []    (key:panda.collections.HashMap.K):panda.collections.HashMap.V?
    {
def index := indexFor(key)
var e := contents[index]
while ((e != null) & (e.key != key))
e := e.next
if (e != null)
return e.value
else
return null
    }

@override
function contains    (key:panda.collections.HashMap.K):panda.core.Bit
    {
var index := indexFor(key)
var e := contents[index]
while ((e != null) & (e.key != key))
e := e.next
return (e != null)
    }

@override @self
method []:=    (key:panda.collections.HashMap.K, value:panda.collections.HashMap.V)
    {
changeCount += 1
var index := indexFor(key)
var e := contents[index]
while ((e != null) & (e.key != key))
e := e.next
if (e = null)         {
var old := contents[index]
e := MutableMapEntry<K, V>(key, value)
e.next := old
contents[index] := e
assert (contents[index] == e)
incrementLength()
        }
else
e.value := value
    }

@override @self
method remove    (key:panda.collections.HashMap.K)
    {
changeCount += 1
def index := indexFor(key)
var e := contents[index]
if (e = null)
return
if (e.key = key)         {
contents[index] := e.next
_length -= 1
return
        }
loop         {
def next := e.next
if (next = null)             {
return
            }
if (next.key = key)             {
break
            }
e := next
        }
def next := e.next
assert (next != null)
e.next := next.next
_length -= 1
    }

@override @self
method addAll    (map:panda.collections.MapView<panda.collections.HashMap.K,panda.collections.HashMap.V>)
    {
for         (key, value) in map
self[key] := value
    }

@override @self
method clear    ()
    {
changeCount += 1
_length := 0
contents := PrimitiveArray<MutableMapEntry<K, V>?>(DEFAULT_LENGTH)
threshold := ((contents.length * 3) // 4)
    }

@override @safeReturn
function iterator    ():panda.collections.Iterator<(panda.collections.HashMap.K,panda.collections.HashMap.V)>
    {
return HashMapEntryIterator<K, V>(self)
    }

@private
method incrementLength    ()
    {
_length += 1
if (length >= threshold)         {
_length := 0
var oldContents := contents
contents := PrimitiveArray<MutableMapEntry<K, V>?>((contents.length * 2))
threshold *= 2
for i in (oldContents.length - 1) ... 0 by -1             {
var e := oldContents[i]
while (e != null)                 {
self[e.key] := e.value
e := e.next
                }
            }
        }
    }

@override
function =    (o:panda.core.Object):panda.core.Bit
    {
if (o)-!>(Map<K, V>)
return false
var m := (o)->(Map<K, V>)
if (length != m.length)
return false
for         (key, value) in self {
if (value != m[key])
return false
        }
return true
    }

@override
function convert    ():panda.core.String
    {
def result := MutableString()
result.append("{")
var first := true
for         (key, value) in self {
if !first
result.append(", ")
else
first := false
if (key != null)
result.append(key)
else
result.append("null")
result.append(": ")
if (value != null)
result.append(value)
else
result.append("null")
        }
result.append("}")
return (result)->>(String)
    }

@class
method $classInit    ()


function length    ():panda.core.Int32
    {
return _length
    }
}
package panda.core
-- SignedInteger.panda:(offset 313)
@abstract
class SignedInteger:panda.core.Integer {

init    ()
}
package panda.core
-- UInt64Wrapper.panda:(offset 25399)
@final
class UInt64Wrapper:panda.core.UnsignedInteger {
@class
var MIN:panda.core.UInt64

@class
var MAX:panda.core.UInt64

@class
var BITS:panda.core.Int32


var value:panda.core.UInt64

@class
var $classInited:panda.core.Bit

@class
function [..]    (left:panda.core.UInt64):panda.collections.ListView<panda.core.UInt64>

@class
function [..]    (left:panda.core.UInt64, right:panda.core.UInt64):panda.collections.ListView<panda.core.UInt64>

@class @math(overflow)
function [..]    (left:panda.core.UInt64, right:panda.core.UInt64, step:panda.core.Int64):panda.collections.ListView<panda.core.UInt64>

@class @math(overflow)
function [..]    (left:panda.core.UInt64, right:panda.core.UInt64, step:panda.core.UInt64):panda.collections.ListView<panda.core.UInt64>


function [..]    (var left:panda.core.Int32Wrapper?, var right:panda.core.Int32Wrapper?, step:panda.core.Int32):panda.core.UInt64

@class
function [...]    (left:panda.core.UInt64):panda.collections.ListView<panda.core.UInt64>

@class
function [...]    (left:panda.core.UInt64, right:panda.core.UInt64):panda.collections.ListView<panda.core.UInt64>

@class @math(overflow)
function [...]    (left:panda.core.UInt64, right:panda.core.UInt64, step:panda.core.Int64):panda.collections.ListView<panda.core.UInt64>

@class @math(overflow)
function [...]    (left:panda.core.UInt64, right:panda.core.UInt64, step:panda.core.UInt64):panda.collections.ListView<panda.core.UInt64>


init    (value:panda.core.UInt64)

@$wrapperMethod
function +    (x:panda.core.UInt64):panda.core.UInt64

@$wrapperMethod
function -    (x:panda.core.UInt64):panda.core.UInt64

@$wrapperMethod
function *    (x:panda.core.UInt64):panda.core.UInt64

@$wrapperMethod
function /    (x:panda.core.UInt64):panda.core.Real64

@$wrapperMethod
function //    (x:panda.core.UInt64):panda.core.UInt64

@$wrapperMethod
function ^    (x:panda.core.UInt64):panda.core.UInt64

@$wrapperMethod
function ^    (x:panda.core.Real64):panda.core.Real64

@$wrapperMethod
function ||    (x:panda.core.UInt64):panda.core.UInt64

@$wrapperMethod
function &&    (x:panda.core.UInt64):panda.core.UInt64

@$wrapperMethod
function ~~    (x:panda.core.UInt64):panda.core.UInt64

@$wrapperMethod
function !!    ():panda.core.UInt64

@$wrapperMethod
function >    (x:panda.core.UInt64):panda.core.Bit

@$wrapperMethod
function >=    (x:panda.core.UInt64):panda.core.Bit

@$wrapperMethod
function <    (x:panda.core.UInt64):panda.core.Bit

@$wrapperMethod
function <=    (x:panda.core.UInt64):panda.core.Bit

@$wrapperMethod
function max    (other:panda.core.UInt64):panda.core.UInt64

@$wrapperMethod
function max    (other:panda.core.Real64):panda.core.Real64

@$wrapperMethod
function min    (other:panda.core.UInt64):panda.core.UInt64

@$wrapperMethod
function min    (other:panda.core.Real64):panda.core.Real64

@$wrapperMethod
function sqrt    ():panda.core.Real64

@$wrapperMethod
function sin    ():panda.core.Real64

@$wrapperMethod
function cos    ():panda.core.Real64

@$wrapperMethod
function tan    ():panda.core.Real64


function []    (index:panda.core.Int32):panda.core.Bit

@external
function length    ():panda.core.Int32

@protected @override
function convertToString    (thousandsSeparator:panda.core.CharWrapper?, minWholeDigits:panda.core.Int32Wrapper?, minFractionDigits:panda.core.Int32Wrapper?, maxFractionDigits:panda.core.Int32Wrapper?, base:panda.core.Int32, baseChars:panda.core.String):panda.core.String

@override
function =    (o:panda.core.Object):panda.core.Bit

@override
function convert    ():panda.core.Int8

@override
function convert    ():panda.core.Int16

@override
function convert    ():panda.core.Int32

@override
function convert    ():panda.core.Int64

@override
function convert    ():panda.core.UInt8

@override
function convert    ():panda.core.UInt16

@override
function convert    ():panda.core.UInt32

@override
function convert    ():panda.core.UInt64

@override
function convert    ():panda.core.Real32

@override
function convert    ():panda.core.Real64

@override
function convert    ():panda.core.String

@class
method $classInit    ()
}
package panda.core
-- UInt32Wrapper.panda:(offset 25625)
@final
class UInt32Wrapper:panda.core.UnsignedInteger {
@class
var MIN:panda.core.UInt32

@class
var MAX:panda.core.UInt32

@class
var BITS:panda.core.Int32


var value:panda.core.UInt32

@class
var $classInited:panda.core.Bit

@class
function [..]    (left:panda.core.UInt32):panda.collections.ListView<panda.core.UInt32>

@class
function [..]    (left:panda.core.UInt32, right:panda.core.UInt32):panda.collections.ListView<panda.core.UInt32>

@class
function [..]    (left:panda.core.UInt32, right:panda.core.UInt32, step:panda.core.Int32):panda.collections.ListView<panda.core.UInt32>


function [..]    (var left:panda.core.Int32Wrapper?, var right:panda.core.Int32Wrapper?, step:panda.core.Int32):panda.core.UInt32

@class
function [...]    (left:panda.core.UInt32):panda.collections.ListView<panda.core.UInt32>

@class
function [...]    (left:panda.core.UInt32, right:panda.core.UInt32):panda.collections.ListView<panda.core.UInt32>

@class
function [...]    (left:panda.core.UInt32, right:panda.core.UInt32, step:panda.core.Int32):panda.collections.ListView<panda.core.UInt32>


init    (value:panda.core.UInt32)

@$wrapperMethod
function +    (x:panda.core.UInt32):panda.core.UInt32

@$wrapperMethod
function -    (x:panda.core.UInt32):panda.core.UInt32

@$wrapperMethod
function *    (x:panda.core.UInt32):panda.core.UInt32

@$wrapperMethod
function /    (x:panda.core.UInt32):panda.core.Real32

@$wrapperMethod
function //    (x:panda.core.UInt32):panda.core.UInt32

@$wrapperMethod
function ^    (x:panda.core.UInt32):panda.core.UInt32

@$wrapperMethod
function ^    (x:panda.core.Real32):panda.core.Real32

@$wrapperMethod
function ||    (x:panda.core.UInt32):panda.core.UInt32

@$wrapperMethod
function &&    (x:panda.core.UInt32):panda.core.UInt32

@$wrapperMethod
function ~~    (x:panda.core.UInt32):panda.core.UInt32

@$wrapperMethod
function !!    ():panda.core.UInt32

@$wrapperMethod
function >    (x:panda.core.UInt32):panda.core.Bit

@$wrapperMethod
function >=    (x:panda.core.UInt32):panda.core.Bit

@$wrapperMethod
function <    (x:panda.core.UInt32):panda.core.Bit

@$wrapperMethod
function <=    (x:panda.core.UInt32):panda.core.Bit

@$wrapperMethod
function max    (other:panda.core.Int64):panda.core.Int64

@$wrapperMethod
function max    (other:panda.core.UInt32):panda.core.UInt32

@$wrapperMethod
function max    (other:panda.core.UInt64):panda.core.UInt64

@$wrapperMethod
function max    (other:panda.core.Real32):panda.core.Real32

@$wrapperMethod
function max    (other:panda.core.Real64):panda.core.Real64

@$wrapperMethod
function min    (other:panda.core.Int64):panda.core.Int64

@$wrapperMethod
function min    (other:panda.core.UInt32):panda.core.UInt32

@$wrapperMethod
function min    (other:panda.core.UInt64):panda.core.UInt64

@$wrapperMethod
function min    (other:panda.core.Real32):panda.core.Real32

@$wrapperMethod
function min    (other:panda.core.Real64):panda.core.Real64

@$wrapperMethod
function sqrt    ():panda.core.Real32

@$wrapperMethod
function sin    ():panda.core.Real32

@$wrapperMethod
function cos    ():panda.core.Real32

@$wrapperMethod
function tan    ():panda.core.Real32


function []    (index:panda.core.Int32):panda.core.Bit

@external
function length    ():panda.core.Int32

@protected @override
function convertToString    (thousandsSeparator:panda.core.CharWrapper?, minWholeDigits:panda.core.Int32Wrapper?, minFractionDigits:panda.core.Int32Wrapper?, maxFractionDigits:panda.core.Int32Wrapper?, base:panda.core.Int32, baseChars:panda.core.String):panda.core.String

@override
function =    (o:panda.core.Object):panda.core.Bit

@override
function convert    ():panda.core.Int8

@override
function convert    ():panda.core.Int16

@override
function convert    ():panda.core.Int32

@override
function convert    ():panda.core.Int64

@override
function convert    ():panda.core.UInt8

@override
function convert    ():panda.core.UInt16

@override
function convert    ():panda.core.UInt32

@override
function convert    ():panda.core.UInt64

@override
function convert    ():panda.core.Real32

@override
function convert    ():panda.core.Real64

@override
function convert    ():panda.core.String

@class
method $classInit    ()
}
package panda.core
-- MutableString.panda:(offset 16295)
@final
class MutableString:panda.collections.Array<panda.core.Char> {

init    ()


init    (s:panda.core.String)

@self
method [..]:=    (start:panda.core.Int32, end:panda.core.Int32, step:panda.core.Int32, s:panda.core.String)

@self
method [..]:=    (start:panda.core.Int32Wrapper?, end:panda.core.Int32Wrapper?, step:panda.core.Int32, s:panda.core.String)

@self
method [...]:=    (start:panda.core.Int32, end:panda.core.Int32, step:panda.core.Int32, s:panda.core.String)

@self
method [...]:=    (start:panda.core.Int32Wrapper?, end:panda.core.Int32Wrapper?, step:panda.core.Int32, s:panda.core.String)

@self
method insert    (index:panda.core.Int32, s:panda.core.String)

@self
method remove    (start:panda.core.Int32, end:panda.core.Int32)

@self
method replaceInPlace    (search:panda.core.String, replacement:panda.core.String)

@self
method replaceInPlace    (regex:panda.core.RegularExpression, replacement:panda.core.String)

@self
method replaceInPlace    (regex:panda.core.RegularExpression, replacement:panda.core.String, allowGroupReferences:panda.core.Bit)

@self
method replaceInPlace    (search:panda.core.RegularExpression, replacement:(panda.core.String)=>(panda.core.Object)?)

@self
method replaceInPlace    (search:panda.core.RegularExpression, replacement:(panda.collections.ListView<panda.core.String>)=>(panda.core.Object)?)

@self
method delete    (search:panda.core.String)

@self
method delete    (regex:panda.core.RegularExpression)

@self
method append    (c:panda.core.Char)

@self
method append    (s:panda.core.String)

@self
method append    (o:panda.core.Object)


function startsWith    (s:panda.core.String):panda.core.Bit


function endsWith    (s:panda.core.String):panda.core.Bit


function contains    (s:panda.core.String):panda.core.Bit


function indexOf    (s:panda.core.String):panda.core.Int32Wrapper?


function indexOf    (s:panda.core.String, start:panda.core.Int32):panda.core.Int32Wrapper?


function [..]    (start:panda.core.Int32, end:panda.core.Int32):panda.core.String

@override
function [..]    (start:panda.core.Int32, end:panda.core.Int32, step:panda.core.Int32):panda.core.String

@override
function [..]    (start:panda.core.Int32Wrapper?, end:panda.core.Int32Wrapper?, step:panda.core.Int32):panda.core.String


function [...]    (start:panda.core.Int32, end:panda.core.Int32):panda.core.String

@override
function [...]    (start:panda.core.Int32, end:panda.core.Int32, step:panda.core.Int32):panda.core.String

@override
function [...]    (start:panda.core.Int32Wrapper?, end:panda.core.Int32Wrapper?, step:panda.core.Int32):panda.core.String

@override @math(overflow)
function hash    ():panda.core.Int32

@override
function =    (o:panda.core.Object):panda.core.Bit

@override
function convert    ():panda.core.String

@override
function format    (fmt:panda.core.String):panda.core.String
}
package panda.io
-- InputStream.panda:(offset 10026)
@abstract
class InputStream:panda.core.Object {
@private @class
var BUFFER_SIZE:panda.core.Int32

@readonly
var closed:panda.core.Bit

@class
var $classInited:panda.core.Bit


method readInt8    ():panda.core.Int8Wrapper?


method readUInt8    ():panda.core.UInt8Wrapper?


method read    (bytes:panda.collections.ListWriter<panda.core.Int8>, max:panda.core.Int32):panda.core.Int32Wrapper?


method read    (bytes:panda.collections.ListWriter<panda.core.UInt8>, max:panda.core.Int32):panda.core.Int32Wrapper?


method read    (chars:panda.collections.ListWriter<panda.core.Char>, max:panda.core.Int32):panda.core.Int32Wrapper?


method readChar    ():panda.core.CharWrapper?


method readLine    ():panda.core.String?


method lines    ():panda.collections.Iterator<panda.core.String>


method close    ()

@final
method sendTo    (o:panda.io.OutputStream)


method readAsString    ():panda.core.String


method readAsInt8Array    ():panda.collections.Array<panda.core.Int8>


method readAsUInt8Array    ():panda.collections.Array<panda.core.UInt8>


init    ()

@class
method $classInit    ()
}
package panda.core
-- Exception.panda:(offset 1178)

class Exception:panda.core.Error {

init    ()


init    (message:panda.core.String)
}
package panda.core
-- Enumeration.panda:(offset 300)
@abstract
class Enumeration:panda.core.Value {

init    ()
}
package panda.core
-- String.panda:(offset 64573)
@final
class String:panda.core.Value (panda.collections.ListView<panda.core.Char>, panda.core.Formattable) {
@private
var chars:panda.collections.ImmutablePrimitiveArray<panda.core.Char>


init    (chars:panda.collections.ImmutablePrimitiveArray<panda.core.Char>)


init    (chars:panda.collections.PrimitiveArray<panda.core.Char>)


init    (chars:panda.collections.ListView<panda.core.Char>)

@override
function length    ():panda.core.Int32

@override
function []    (i:panda.core.Int32):panda.core.Char


function substringBefore    (needle:panda.core.String):panda.core.String?


function substringBeforeLast    (needle:panda.core.String):panda.core.String?


function substringAfter    (needle:panda.core.String):panda.core.String?

@safeReturn
function split    (delimiter:panda.core.String, maxResults:panda.core.Int32):panda.collections.ListView<panda.core.String>

@safeReturn
function split    (delimiter:panda.core.String):panda.collections.ListView<panda.core.String>

@safeReturn
function split    (delimiter:panda.core.RegularExpression, maxResults:panda.core.Int32):panda.collections.ListView<panda.core.String>

@safeReturn
function split    (delimiter:panda.core.RegularExpression):panda.collections.ListView<panda.core.String>


function matches    (regex:panda.core.RegularExpression):panda.core.Bit


function contains    (needle:panda.core.RegularExpression):panda.core.Bit


function contains    (needle:panda.core.String):panda.core.Bit

@override
function contains    (needle:panda.core.Char):panda.core.Bit

@safeReturn
function parse    (regex:panda.core.RegularExpression):panda.collections.ListView<panda.core.String>?


function replace    (search:panda.core.String, replacement:panda.core.String):panda.core.String


function replace    (search:panda.core.RegularExpression, replacement:panda.core.String):panda.core.String


function replace    (search:panda.core.RegularExpression, replacement:panda.core.String, allowGroupReferences:panda.core.Bit):panda.core.String


function replace    (search:panda.core.RegularExpression, replacement:(panda.core.String)=>(panda.core.Object)?):panda.core.String


function replace    (search:panda.core.RegularExpression, replacement:(panda.collections.ListView<panda.core.String>)=>(panda.core.Object)?):panda.core.String


function trim    ():panda.core.String


function startsWith    (s:panda.core.String):panda.core.Bit


function startsWith    (c:panda.core.Char):panda.core.Bit


function endsWith    (s:panda.core.String):panda.core.Bit


function endsWith    (c:panda.core.Char):panda.core.Bit


function indexOf    (s:panda.core.String):panda.core.Int32Wrapper?


function indexOf    (s:panda.core.String, start:panda.core.Int32):panda.core.Int32Wrapper?


function lastIndexOf    (s:panda.core.String):panda.core.Int32Wrapper?


function lastIndexOf    (s:panda.core.String, start:panda.core.Int32):panda.core.Int32Wrapper?


function [..]    (start:panda.core.Int32):panda.core.String


function [..]    (start:panda.core.Int32, end:panda.core.Int32):panda.core.String


function [..]    (start:panda.core.Int32Wrapper?, end:panda.core.Int32Wrapper?):panda.core.String

@override
function [..]    (start:panda.core.Int32, end:panda.core.Int32, step:panda.core.Int32):panda.core.String

@override
function [..]    (var start:panda.core.Int32Wrapper?, var end:panda.core.Int32Wrapper?, step:panda.core.Int32):panda.core.String


function [...]    (start:panda.core.Int32):panda.core.String


function [...]    (start:panda.core.Int32, end:panda.core.Int32):panda.core.String


function [...]    (start:panda.core.Int32Wrapper?, end:panda.core.Int32Wrapper?):panda.core.String

@override
function [...]    (start:panda.core.Int32, end:panda.core.Int32, step:panda.core.Int32):panda.core.String

@override
function [...]    (var start:panda.core.Int32Wrapper?, var end:panda.core.Int32Wrapper?, step:panda.core.Int32):panda.core.String

@override @safeReturn
function iterator    ():panda.collections.Iterator<panda.core.Char>

@override
function filter    (f:(panda.core.Char)=>(panda.core.Bit)?):panda.core.String


function left    (width:panda.core.Int32):panda.core.String


function left    (width:panda.core.Int32, fill:panda.core.Char):panda.core.String


function right    (width:panda.core.Int32):panda.core.String


function right    (width:panda.core.Int32, fill:panda.core.Char):panda.core.String


function center    (width:panda.core.Int32):panda.core.String


function center    (width:panda.core.Int32, fill:panda.core.Char):panda.core.String

@override @math(overflow)
function hash    ():panda.core.Int32

@override
function =    (o:panda.core.Object):panda.core.Bit


function >    (s:panda.core.String):panda.core.Bit


function >=    (s:panda.core.String):panda.core.Bit


function <    (s:panda.core.String):panda.core.Bit


function <=    (s:panda.core.String):panda.core.Bit

@class
function +    (s1:panda.core.String, s2:panda.core.String):panda.core.String

@class
function +    (s1:panda.core.Object, s2:panda.core.String):panda.core.String

@class
function +    (s1:panda.core.String, s2:panda.core.Object):panda.core.String


function *    (count:panda.core.Int32):panda.core.String

@class
function *    (count:panda.core.Int32, s:panda.core.String):panda.core.String

@override
function convert    ():panda.core.String

@override
function convert    ():panda.collections.Array<panda.core.Char>


function convert    ():panda.collections.Array<panda.core.Int8>


function convert    ():panda.core.Char

@class
function convert    (value:panda.core.Bit):panda.core.String


function convert    ():panda.core.Bit

@class
function convert    (var value:panda.core.Int64):panda.core.String

@class
function convert    (var value:panda.core.UInt64):panda.core.String

@class
function convert    (c:panda.core.Char):panda.core.String


function convert    ():panda.core.Int64Wrapper?


function convert    ():panda.core.Int64


function convert    ():panda.core.Int32Wrapper?


function convert    ():panda.core.Int32


function convert    ():panda.core.Int16Wrapper?


function convert    ():panda.core.Int16


function convert    ():panda.core.Int8Wrapper?


function convert    ():panda.core.Int8


function convert    ():panda.core.UInt64Wrapper?


function convert    ():panda.core.UInt64


function convert    ():panda.core.UInt32Wrapper?


function convert    ():panda.core.UInt32


function convert    ():panda.core.UInt16Wrapper?


function convert    ():panda.core.UInt16


function convert    ():panda.core.UInt8Wrapper?


function convert    ():panda.core.UInt8

@class
function convert    (r:panda.core.Real32):panda.core.String

@class
function convert    (r:panda.core.Real64):panda.core.String


function convert    ():panda.core.Real32Wrapper?


function convert    ():panda.core.Real32


function convert    ():panda.core.Real64Wrapper?


function convert    ():panda.core.Real64

@override
function format    (fmt:panda.core.String):panda.core.String

@class
function format    (s:panda.core.String, params:panda.core.Object...):panda.core.String

@private @class @external
function pandaReal32ToString    (r:panda.core.Real32):panda.core.String

@private @class @external
function pandaReal64ToString    (r:panda.core.Real64):panda.core.String

@private @class @external
function pandaStringToReal32    (s:panda.core.String):panda.core.Real32

@private @class @external
function pandaStringToReal64    (s:panda.core.String):panda.core.Real64
}
package panda.core
-- SafetyError.panda:(offset 1491)

class SafetyError:panda.core.Error {

init    ()


init    (message:panda.core.String)
}
package panda.core
-- Formattable.panda:(offset 1051)

interface Formattable {
@abstract
function format    (fmt:panda.core.String):panda.core.String
}
package panda.collections
-- HashMap.panda:(offset 2688)
@private
class HashMapValueIterator<K, V>:panda.collections.HashMapIterator<panda.collections.HashMapValueIterator.K,panda.collections.HashMapValueIterator.V,panda.collections.HashMapValueIterator.V> {

init    (map:panda.collections.HashMap<panda.collections.HashMapValueIterator.K,panda.collections.HashMapValueIterator.V>)
    {
super.init(map)
    }

@override
function result    (e:panda.collections.MutableMapEntry<panda.collections.HashMapValueIterator.K,panda.collections.HashMapValueIterator.V>):panda.collections.HashMapValueIterator.V
    {
return e.value
    }
}
package panda.core
-- UnsignedInteger.panda:(offset 320)
@abstract
class UnsignedInteger:panda.core.Integer {

init    ()
}
package panda.core
-- Value.panda:(offset 574)
@abstract
class Value:panda.core.Immutable {

init    ()
}
package panda.io
-- File.panda:(offset 13075)
@final
class File:panda.core.Immutable {
@class
var SEPARATOR:panda.core.Char

@class
var TEMP:panda.io.File


var path:panda.core.String

@class
var $classInited:panda.core.Bit


init    (path:panda.core.String)

@class
method currentDirectory    ():panda.io.File


function name    ():panda.core.String


function simpleName    ():panda.core.String


function extension    ():panda.core.String


method absolute    ():panda.io.File


method parent    ():panda.io.File?


function resolve    (path:panda.core.String):panda.io.File

@external
method exists    ():panda.core.Bit

@external
method isDirectory    ():panda.core.Bit

@external
method createDirectory    ()


method createDirectories    ()

@external
method list    ():panda.collections.ListView<panda.io.File>


method list    (pattern:panda.core.String):panda.collections.ListView<panda.io.File>


method list    (pattern:panda.core.RegularExpression):panda.collections.ListView<panda.io.File>

@override
function convert    ():panda.core.String

@external
method delete    ()


method openInputStream    ():panda.io.InputStream


method openOutputStream    ():panda.io.OutputStream


method write    (s:panda.core.String)


method write    (bytes:panda.collections.ListView<panda.core.Int8>)


method readAsString    ():panda.core.String


method readAsInt8Array    ():panda.collections.Array<panda.core.Int8>


method readAsUInt8Array    ():panda.collections.Array<panda.core.UInt8>


method lines    ():panda.collections.Iterator<panda.core.String>

@override
function =    (o:panda.core.Object):panda.core.Bit

@override
function hash    ():panda.core.Int32

@private @external
method absolutePath    ():panda.core.String

@class
method $classInit    ()
}
package panda.io
-- BufferedOutputStream.panda:(offset 3751)

class BufferedOutputStream:panda.io.FilterOutputStream {
@private @class
var DEFAULT_BUFFER_SIZE:panda.core.Int32

@private
var bufferOffset:panda.core.Int32

@private
var buffer:panda.collections.Array<panda.core.Int8>

@private
var bufferSize:panda.core.Int32

@class
var $classInited:panda.core.Bit


init    (out:panda.io.OutputStream)


init    (out:panda.io.OutputStream, bufferSize:panda.core.Int32)

@override
method write    (i:panda.core.Int8)

@override
method write    (i:panda.core.UInt8)

@override
method write    (c:panda.core.Char)

@override
method write    (b:panda.collections.ListView<panda.core.Int8>, var offset:panda.core.Int32, var length:panda.core.Int32)

@override
method write    (b:panda.collections.ListView<panda.core.UInt8>, var offset:panda.core.Int32, var length:panda.core.Int32)

@override
method write    (c:panda.collections.ListView<panda.core.Char>, var offset:panda.core.Int32, var length:panda.core.Int32)

@override
method flush    ()

@override
method close    ()

@class
method $classInit    ()
}
package panda.collections
-- ImmutableArray.panda:(offset 1716)

class ImmutableArray<T:Immutable>:panda.core.Immutable (panda.collections.ListView<panda.collections.ImmutableArray.T>) {
@private
var contents:panda.collections.PrimitiveArray<panda.collections.ImmutableArray.T>


init    ()
    {
init(PrimitiveArray<T>(0))
    }


init    (contents:panda.collections.PrimitiveArray<panda.collections.ImmutableArray.T>)
    {
self.contents := contents[..]
    }


init    (contents:panda.collections.ImmutablePrimitiveArray<panda.collections.ImmutableArray.T>)
    {
self.contents := PrimitiveArray<T>(contents.length)
for i in 0 .. contents.length
self.contents[i] := contents[i]
    }


init    (contents:panda.collections.CollectionView<panda.collections.ImmutableArray.T>)
    {
self.contents := PrimitiveArray<T>(contents.length)
for         (i, v) in contents.enumeration()
self.contents[i] := v
    }

@override
function []    (index:panda.core.Int32):panda.collections.ImmutableArray.T
    {
return contents[index]
    }

@override
function length    ():panda.core.Int32
    {
return contents.length
    }

@override
function =    (o:panda.core.Object):panda.core.Bit
    {
if (o)-!>(ListView<T>)
return false
def list := (o)->(ListView<T>)
if (length != list.length)
return false
for         (i, v) in enumeration() {
if (v != list[i])
return false
        }
return true
    }

@override @math(overflow)
function hash    ():panda.core.Int32
    {
var result := 0
constant MULTIPLIER := 53
for v in self
result := ((result * MULTIPLIER) + v.hash)
return result
    }

@override
function convert    ():panda.core.String
    {
def result := MutableString("[")
for         (i, v) in enumeration() {
if (i > 0)
result.append(", ")
result.append(v)
        }
result.append("]")
return (result)->>(String)
    }
}
package panda.threads
-- Thread.panda:(offset 7834)
@final
class Thread:panda.core.Immutable {
@private
var nativeThread:panda.core.$NativePointer


var queue:panda.threads.MessageQueue<panda.core.Immutable?>


var preventsExit:panda.core.Bit

@private
var threadLocals:panda.core.$NativePointer

@thread
var context:panda.collections.Map<panda.core.Immutable,panda.core.Object>


@private
var threadEntry:()=&>*()

@class
var $classInited:panda.core.Bit


function createQueue    ():panda.threads.MessageQueue<panda.core.Immutable?>

@private
init    ()

@private
init    (threadEntry:()=&>*(), preventsExit:panda.core.Bit)

@private
method run    ()

@private @final
method start    ()

@private @final
method start    (newContext:panda.collections.MapView<panda.core.Immutable,panda.core.Immutable>)

@class
method start    (run:()=&>*()):panda.threads.Thread

@class
method start    (run:()=&>*(), context:panda.collections.MapView<panda.core.Immutable,panda.core.Immutable>):panda.threads.Thread

@class
method start    (run:()=&>*(), context:panda.collections.MapView<panda.core.Immutable,panda.core.Immutable>, preventsExit:panda.core.Bit):panda.threads.Thread

@class
method start    (run:()=&>*(), preventsExit:panda.core.Bit):panda.threads.Thread

@class @external
function currentThread    ():panda.threads.Thread

@class
function preferredThreadCount    ():panda.core.Int32

@class @external
method sleep    (millis:panda.core.Int32)

@private @external
method startThread    (context:panda.collections.HashMap<panda.core.Immutable,panda.core.Object>)

@private @class @external
method threadExit    ()

@class
method $classInit    ()

@class
method $initcontext    ():panda.collections.Map<panda.core.Immutable,panda.core.Object>
}
package panda.core
-- ParseException.panda:(offset 857)

class ParseException:panda.core.Exception {

init    ()


init    (message:panda.core.String)
}
package panda.core
-- RealNumber.panda:(offset 311)
@abstract
class RealNumber:panda.core.Number {

init    ()
}
package panda.threads
-- Pipe.panda:(offset 2347)
@private
class PipeInputStream:panda.io.InputStream {

var queue:panda.threads.MessageQueue<panda.collections.ImmutableArray<panda.core.Int8>?>


var bufferIndex:panda.core.Int32


var buffer:panda.collections.ImmutableArray<panda.core.Int8>


init    (queue:panda.threads.MessageQueue<panda.collections.ImmutableArray<panda.core.Int8>?>)

@override
method readInt8    ():panda.core.Int8Wrapper?
}
package panda.collections
-- HashMap.panda:(offset 2461)
@private
class HashMapKeyIterator<K, V>:panda.collections.HashMapIterator<panda.collections.HashMapKeyIterator.K,panda.collections.HashMapKeyIterator.V,panda.collections.HashMapKeyIterator.K> {

init    (map:panda.collections.HashMap<panda.collections.HashMapKeyIterator.K,panda.collections.HashMapKeyIterator.V>)
    {
super.init(map)
    }

@override
function result    (e:panda.collections.MutableMapEntry<panda.collections.HashMapKeyIterator.K,panda.collections.HashMapKeyIterator.V>):panda.collections.HashMapKeyIterator.K
    {
return e.key
    }
}
package panda.core
-- CharWrapper.panda:(offset 6900)
@final
class CharWrapper:panda.core.Primitive {
@class
var MIN:panda.core.Char

@class
var MAX:panda.core.Char


var value:panda.core.Char

@class
var $classInited:panda.core.Bit

@class
function [..]    (left:panda.core.Char):panda.collections.ListView<panda.core.Char>

@class
function [..]    (left:panda.core.Char, right:panda.core.Char):panda.collections.ListView<panda.core.Char>

@class
function [..]    (left:panda.core.Char, right:panda.core.Char, step:panda.core.Int16):panda.collections.ListView<panda.core.Char>

@class
function [...]    (left:panda.core.Char):panda.collections.ListView<panda.core.Char>

@class
function [...]    (left:panda.core.Char, right:panda.core.Char):panda.collections.ListView<panda.core.Char>

@class
function [...]    (left:panda.core.Char, right:panda.core.Char, step:panda.core.Int16):panda.collections.ListView<panda.core.Char>


init    (value:panda.core.Char)


function isWhitespace    ():panda.core.Bit

@$wrapperMethod
function *    (n:panda.core.Int32):panda.core.String

@class
function *    (n:panda.core.Int32, c:panda.core.Char):panda.core.String

@override
function =    (o:panda.core.Object):panda.core.Bit

@override
function hash    ():panda.core.Int32

@override
function convert    ():panda.core.String


function convert    ():panda.core.Char

@override
function format    (fmt:panda.core.String):panda.core.String

@class
method $classInit    ()
}
package panda.io
-- FilterInputStream.panda:(offset 2127)

class FilterInputStream:panda.io.InputStream {
@protected
var raw:panda.io.InputStream


var closeUnderlyingStream:panda.core.Bit


init    (raw:panda.io.InputStream)

@override
method readInt8    ():panda.core.Int8Wrapper?

@override
method readUInt8    ():panda.core.UInt8Wrapper?

@override
method readChar    ():panda.core.CharWrapper?

@override
method read    (bytes:panda.collections.ListWriter<panda.core.Int8>, max:panda.core.Int32):panda.core.Int32Wrapper?

@override
method read    (bytes:panda.collections.ListWriter<panda.core.UInt8>, max:panda.core.Int32):panda.core.Int32Wrapper?

@override
method read    (chars:panda.collections.ListWriter<panda.core.Char>, max:panda.core.Int32):panda.core.Int32Wrapper?

@override
method close    ()
}
package panda.math
-- Random.panda:(offset 7258)

interface Random {
@class
method createRandom    ():panda.math.Random


method bit    ():panda.core.Bit

@class
method bit    ():panda.core.Bit

@math(overflow)
method int    (n:panda.core.Int32):panda.core.Int32

@class
method int    (n:panda.core.Int32):panda.core.Int32


method int32    ():panda.core.Int32

@class
method int32    ():panda.core.Int32

@abstract
method int64    ():panda.core.Int64

@class
method int64    ():panda.core.Int64


method real32    ():panda.core.Real32

@class
method real32    ():panda.core.Real32


method real64    ():panda.core.Real64

@class
method real64    ():panda.core.Real64
}
package panda.core
-- Real32Wrapper.panda:(offset 15929)
@final
class Real32Wrapper:panda.core.RealNumber {

var value:panda.core.Real32

@class
function [..]    (left:panda.core.Real32, right:panda.core.Real32):panda.collections.ListView<panda.core.Real32>

@class
function [..]    (left:panda.core.Real32, right:panda.core.Real32, step:panda.core.Real32):panda.collections.ListView<panda.core.Real32>

@class
function [...]    (left:panda.core.Real32, right:panda.core.Real32):panda.collections.ListView<panda.core.Real32>

@class
function [...]    (left:panda.core.Real32, right:panda.core.Real32, step:panda.core.Real32):panda.collections.ListView<panda.core.Real32>


init    (value:panda.core.Real32)

@$wrapperMethod
function +    (x:panda.core.Real32):panda.core.Real32

@$wrapperMethod
function -    (x:panda.core.Real32):panda.core.Real32

@$wrapperMethod
function *    (x:panda.core.Real32):panda.core.Real32

@$wrapperMethod
function /    (x:panda.core.Real32):panda.core.Real32

@$wrapperMethod
function ^    (x:panda.core.Real32):panda.core.Real32

@$wrapperMethod
function >    (x:panda.core.Real32):panda.core.Bit

@$wrapperMethod
function >=    (x:panda.core.Real32):panda.core.Bit

@$wrapperMethod
function <    (x:panda.core.Real32):panda.core.Bit

@$wrapperMethod
function <=    (x:panda.core.Real32):panda.core.Bit

@$wrapperMethod
function max    (other:panda.core.Real32):panda.core.Real32

@$wrapperMethod
function max    (other:panda.core.Real64):panda.core.Real64

@$wrapperMethod
function min    (other:panda.core.Real32):panda.core.Real32

@$wrapperMethod
function min    (other:panda.core.Real64):panda.core.Real64

@$wrapperMethod
function sign    ():panda.core.Int32

@$wrapperMethod
function abs    ():panda.core.Real32

@external @$wrapperMethod
function isInfinite    ():panda.core.Bit

@external @$wrapperMethod
function isNaN    ():panda.core.Bit

@external @$wrapperMethod
function sqrt    ():panda.core.Real32

@external @$wrapperMethod
function sin    ():panda.core.Real32

@external @$wrapperMethod
function cos    ():panda.core.Real32


function tan    ():panda.core.Real32

@protected @override
function convertToString    (thousandsSeparator:panda.core.CharWrapper?, minWholeDigits:panda.core.Int32Wrapper?, minFractionDigits:panda.core.Int32Wrapper?, maxFractionDigits:panda.core.Int32Wrapper?, base:panda.core.Int32, baseChars:panda.core.String):panda.core.String

@override
function =    (o:panda.core.Object):panda.core.Bit

@override
function hash    ():panda.core.Int32

@override
function convert    ():panda.core.Int8

@override
function convert    ():panda.core.Int16

@override
function convert    ():panda.core.Int32

@override
function convert    ():panda.core.Int64

@override
function convert    ():panda.core.UInt8

@override
function convert    ():panda.core.UInt16

@override
function convert    ():panda.core.UInt32

@override
function convert    ():panda.core.UInt64

@override
function convert    ():panda.core.Real32

@override
function convert    ():panda.core.Real64
}
package panda.core
-- OverflowError.panda:(offset 809)

class OverflowError:panda.core.SafetyError {

init    ()


init    (message:panda.core.String)
}
package panda.core
-- Int8Wrapper.panda:(offset 25078)
@final
class Int8Wrapper:panda.core.SignedInteger {
@class
var MIN:panda.core.Int8

@class
var MAX:panda.core.Int8

@class
var BITS:panda.core.Int32


var value:panda.core.Int8

@class
var $classInited:panda.core.Bit

@class
function [..]    (left:panda.core.Int8):panda.collections.ListView<panda.core.Int8>

@class
function [..]    (left:panda.core.Int8, right:panda.core.Int8):panda.collections.ListView<panda.core.Int8>

@class
function [..]    (left:panda.core.Int8, right:panda.core.Int8, step:panda.core.Int8):panda.collections.ListView<panda.core.Int8>

@$wrapperMethod
function [..]    (var left:panda.core.Int32Wrapper?, var right:panda.core.Int32Wrapper?, step:panda.core.Int32):panda.core.Int8

@class
function [...]    (left:panda.core.Int8):panda.collections.ListView<panda.core.Int8>

@class
function [...]    (left:panda.core.Int8, right:panda.core.Int8):panda.collections.ListView<panda.core.Int8>

@class
function [...]    (left:panda.core.Int8, right:panda.core.Int8, step:panda.core.Int8):panda.collections.ListView<panda.core.Int8>


init    (value:panda.core.Int8)

@$wrapperMethod
function +    (x:panda.core.Int8):panda.core.Int8

@$wrapperMethod
function -    (x:panda.core.Int8):panda.core.Int8

@$wrapperMethod
function *    (x:panda.core.Int8):panda.core.Int8

@$wrapperMethod
function /    (x:panda.core.Int8):panda.core.Real32

@$wrapperMethod
function //    (x:panda.core.Int8):panda.core.Int8

@$wrapperMethod
function ^    (x:panda.core.UInt8):panda.core.Int8

@$wrapperMethod
function ^    (x:panda.core.Real32):panda.core.Real32

@$wrapperMethod
function ||    (x:panda.core.Int8):panda.core.Int8

@$wrapperMethod
function &&    (x:panda.core.Int8):panda.core.Int8

@$wrapperMethod
function ~~    (x:panda.core.Int8):panda.core.Int8

@$wrapperMethod
function !!    ():panda.core.Int8

@$wrapperMethod
function >    (x:panda.core.Int8):panda.core.Bit

@$wrapperMethod
function >=    (x:panda.core.Int8):panda.core.Bit

@$wrapperMethod
function <    (x:panda.core.Int8):panda.core.Bit

@$wrapperMethod
function <=    (x:panda.core.Int8):panda.core.Bit

@$wrapperMethod
function max    (other:panda.core.Int32):panda.core.Int32

@$wrapperMethod
function max    (other:panda.core.Int64):panda.core.Int64

@$wrapperMethod
function max    (other:panda.core.UInt32):panda.core.UInt32

@$wrapperMethod
function max    (other:panda.core.UInt64):panda.core.UInt64

@$wrapperMethod
function max    (other:panda.core.Real32):panda.core.Real32

@$wrapperMethod
function max    (other:panda.core.Real64):panda.core.Real64

@$wrapperMethod
function min    (other:panda.core.Int32):panda.core.Int32

@$wrapperMethod
function min    (other:panda.core.Int64):panda.core.Int64

@$wrapperMethod
function min    (other:panda.core.UInt32):panda.core.Int8

@$wrapperMethod
function min    (other:panda.core.UInt64):panda.core.Int8

@$wrapperMethod
function min    (other:panda.core.Real32):panda.core.Real32

@$wrapperMethod
function min    (other:panda.core.Real64):panda.core.Real64

@$wrapperMethod
function sign    ():panda.core.Int32

@$wrapperMethod
function abs    ():panda.core.Int8

@$wrapperMethod
function sqrt    ():panda.core.Real32

@$wrapperMethod
function sin    ():panda.core.Real32

@$wrapperMethod
function cos    ():panda.core.Real32

@$wrapperMethod
function tan    ():panda.core.Real32

@$wrapperMethod
function []    (index:panda.core.Int32):panda.core.Bit

@external @$wrapperMethod
function length    ():panda.core.Int32

@protected @override
function convertToString    (thousandsSeparator:panda.core.CharWrapper?, minWholeDigits:panda.core.Int32Wrapper?, minFractionDigits:panda.core.Int32Wrapper?, maxFractionDigits:panda.core.Int32Wrapper?, base:panda.core.Int32, baseChars:panda.core.String):panda.core.String

@override
function =    (o:panda.core.Object):panda.core.Bit

@override
function convert    ():panda.core.Int8

@override
function convert    ():panda.core.Int16

@override
function convert    ():panda.core.Int32

@override
function convert    ():panda.core.Int64

@override
function convert    ():panda.core.UInt8

@override
function convert    ():panda.core.UInt16

@override
function convert    ():panda.core.UInt32

@override
function convert    ():panda.core.UInt64


function convert    ():panda.core.Char

@override
function convert    ():panda.core.Real32

@override
function convert    ():panda.core.Real64

@override
function convert    ():panda.core.String

@class
method $classInit    ()
}
package panda.io
-- FileInputStream.panda:(offset 1223)
@private
class FileInputStream:panda.io.InputStream {

var nativeFile:panda.core.$NativePointer


init    (nativeFile:panda.core.$NativePointer)


init    (file:panda.io.File)

@override
method readInt8    ():panda.core.Int8Wrapper?

@private @class @external
method readInt8    (nativeFile:panda.core.$NativePointer):panda.core.Int16

@external @override
method read    (bytes:panda.collections.ListWriter<panda.core.Int8>, max:panda.core.Int32):panda.core.Int32Wrapper?

@external @override
method read    (bytes:panda.collections.ListWriter<panda.core.UInt8>, max:panda.core.Int32):panda.core.Int32Wrapper?

@external @override
method read    (chars:panda.collections.ListWriter<panda.core.Char>, max:panda.core.Int32):panda.core.Int32Wrapper?

@override
method close    ()

@private @class @external
method close    (nativeFile:panda.core.$NativePointer):panda.core.Int32

@override
method finalize    ()

@private @class @external
method open    (path:panda.core.String, read:panda.core.Bit, write:panda.core.Bit):panda.core.$NativePointer
}
package panda.collections
-- MapWriter.panda:(offset 1885)

interface MapWriter<K, V> {
@abstract @self
method []:=    (key:panda.collections.MapWriter.K, value:panda.collections.MapWriter.V)

@abstract @self
method remove    (key:panda.collections.MapWriter.K)

@abstract @self
method clear    ()

@self
method addAll    (map:panda.collections.MapView<panda.collections.MapWriter.K,panda.collections.MapWriter.V>)
    {
for         (key, value) in map
self[key] := value
    }
}
package panda.collections
-- MapView.panda:(offset 2785)

interface MapView<K, V> : panda.collections.Iterable<(panda.collections.MapView.K,panda.collections.MapView.V)> {
@abstract
function []    (key:panda.collections.MapView.K):panda.collections.MapView.V?

@abstract
function contains    (key:panda.collections.MapView.K):panda.core.Bit


function keys    ():panda.collections.CollectionView<panda.collections.MapView.K>
    {
def result := Array<K>()
for         (key, _) in self
result.add(key)
return result
    }


function values    ():panda.collections.CollectionView<panda.collections.MapView.V>
    {
def result := Array<V>()
for         (_, value) in self
result.add(value)
return result
    }

@abstract
function length    ():panda.core.Int32
}
package panda.collections
-- CollectionWriter.panda:(offset 287)

interface CollectionWriter<T> {
@abstract
function length    ():panda.core.Int32

@abstract @self
method add    (object:panda.collections.CollectionWriter.T)

@self
method addAll    (c:panda.collections.CollectionView<panda.collections.CollectionWriter.T>)
    {
for v in c
add(v)
    }

@abstract @self
method remove    (object:panda.collections.CollectionWriter.T)

@abstract @self
method clear    ()
}
package panda.core
-- Object.panda:(offset 4100)
@abstract
class Object {
@private
var cl:panda.core.Class


init    ()

@final
function $class    ():panda.core.Class

@external
function hash    ():panda.core.Int32


function =    (o:panda.core.Object):panda.core.Bit


function convert    ():panda.core.String


method finalize    ()
}
package panda.threads
-- Lock.panda:(offset 1924)

class Lock:panda.core.Immutable {
@private
var nativeLock:panda.core.$NativePointer


init    ()

@external
method lock    ()

@external
method unlock    ()

@external @override
method finalize    ()

@private @external
method initialize    ()
}
package panda.io
-- PushbackInputStream.panda:(offset 5938)

class PushbackInputStream:panda.io.FilterInputStream {
@private
var pushbackBuffer:panda.collections.Array<panda.core.Int8>


init    (raw:panda.io.InputStream)

@override
method readInt8    ():panda.core.Int8Wrapper?

@override
method readUInt8    ():panda.core.UInt8Wrapper?

@override
method readChar    ():panda.core.CharWrapper?

@override
method read    (bytes:panda.collections.ListWriter<panda.core.Int8>, max:panda.core.Int32):panda.core.Int32Wrapper?

@override
method read    (bytes:panda.collections.ListWriter<panda.core.UInt8>, max:panda.core.Int32):panda.core.Int32Wrapper?

@override
method read    (bytes:panda.collections.ListWriter<panda.core.Char>, max:panda.core.Int32):panda.core.Int32Wrapper?


method pushback    (v:panda.core.Int8)


method pushback    (v:panda.core.UInt8)


method pushback    (v:panda.collections.ListView<panda.core.Int8>)


method pushback    (v:panda.collections.ListView<panda.core.UInt8>)


method pushback    (c:panda.core.Char)


method pushback    (c:panda.collections.ListView<panda.core.Char>)


method pushback    (s:panda.core.String)
}
package panda.core
-- Primitive.panda:(offset 415)
@abstract
class Primitive:panda.core.Value {

init    ()
}
package panda.core
-- MathError.panda:(offset 813)

class MathError:panda.core.SafetyError {

init    ()


init    (message:panda.core.String)
}
package panda.core
-- Method.panda:(offset 471)

class Method:panda.core.Immutable {

init    ()
}
package panda.core
-- MutableMethod.panda:(offset 1054)

class MutableMethod:panda.core.Object {

var pointer:panda.core.$NativePointer


init    ()


method dummy    ()
}
package panda.collections
-- ImmutablePrimitiveArray.panda:(offset 426)

class ImmutablePrimitiveArray:panda.core.Immutable {

init    ()
}
package panda.collections
-- IndexOutOfBoundsError.panda:(offset 827)

class IndexOutOfBoundsError:panda.core.SafetyError {

init    (message:panda.core.String)
}
package panda.collections
-- Stack.panda:(offset 3678)

class Stack<T>:panda.core.Object {
@private
var contents:panda.collections.List<panda.collections.Stack.T> := Array<T>()


init    ()
    {
    }


method push    (value:panda.collections.Stack.T)
    {
contents.add(value)
    }


method pop    ():panda.collections.Stack.T
    {
def result := contents[(contents.length - 1)]
contents.removeIndex((contents.length - 1))
return result
    }


method clear    ()
    {
contents.clear()
    }


function peek    ():panda.collections.Stack.T
    {
return peek(0)
    }


function peek    (depth:panda.core.Int32):panda.collections.Stack.T
    {
return contents[((length - depth) - 1)]
    }


function length    ():panda.core.Int32
    {
return contents.length
    }

@override
function convert    ():panda.core.String
    {
return (contents)->>(String)
    }


function convert    ():panda.collections.ListView<panda.collections.Stack.T>
    {
return contents[..]
    }
}
@$instance panda.collections.Enumerator<panda.core.Real64>
@$instance panda.collections.CollectionWriter<panda.core.Int8>
@$instance panda.collections.MapView<panda.core.Immutable,panda.core.Object>
@$instance panda.collections.Array<panda.collections.MutableMapEntry<panda.core.Int32,panda.core.Object?>?>
@$instance panda.collections.Array<panda.core.UInt16>
@$instance (panda.core.Int32,panda.core.StackTraceEntry)
@$instance panda.collections.ImmutablePrimitiveArray<panda.core.Object>
@$instance panda.collections.CollectionView<panda.core.String>
@$instance panda.collections.Iterator<panda.core.Int64>
@$instance (panda.core.Int32,panda.collections.MutableMapEntry<panda.core.Immutable,panda.core.Object>?)
@$instance panda.collections.Iterator<panda.core.Object?>
@$instance panda.collections.Map<panda.core.Int32,panda.core.Object?>
@$instance panda.collections.ImmutablePrimitiveArray<panda.core.Int64>
@$instance (panda.core.Int32,panda.core.Int16)
@$instance panda.collections.List<panda.core.UInt64>
@$instance panda.collections.Enumerator<panda.core.UInt64>
@$instance panda.collections.Iterator<(panda.core.Int32,panda.core.Int16)>
@$instance panda.collections.ListWriter<panda.core.String>
@$instance panda.collections.List<panda.core.UInt8>
@$instance panda.collections.PrimitiveArray<panda.core.UInt8>
@$instance panda.collections.CollectionView<panda.core.UInt32>
@$instance panda.collections.Enumerator<panda.core.StackTraceEntry>
@$instance panda.collections.CollectionView<panda.io.File>
@$instance (panda.core.Int32,panda.core.Object?)
@$instance panda.collections.Iterable<(panda.core.Immutable,panda.core.Immutable)>
@$instance panda.collections.Iterator<(panda.core.Int32,panda.core.Immutable)>
@$instance panda.collections.ListView<panda.core.Char>
@$instance panda.collections.CollectionWriter<panda.collections.MutableMapEntry<panda.core.Immutable,panda.core.Object>?>
@$instance panda.collections.ListWriter<panda.core.Int64>
@$instance panda.collections.CollectionWriter<panda.io.File>
@$instance panda.collections.Iterable<panda.core.Int8>
@$instance panda.collections.Iterator<(panda.core.Int32,panda.core.UInt32)>
@$instance panda.collections.Array<panda.core.Object?>
@$instance panda.collections.ListView<panda.collections.MutableMapEntry<panda.core.Immutable,panda.core.Object>?>
@$instance panda.collections.MutableMapEntry<panda.core.Int32,panda.core.Object?>
@$instance panda.collections.Iterator<(panda.core.Immutable,panda.core.Immutable)>
@$instance panda.collections.Iterable<panda.collections.MutableMapEntry<panda.core.Immutable,panda.core.Object>?>
@$instance panda.collections.Iterator<(panda.core.Int32,panda.core.Object)>
@$instance (panda.core.Immutable,panda.core.Immutable)
@$instance panda.collections.Enumerator<panda.core.UInt32>
@$instance panda.collections.CollectionWriter<panda.core.Object>
@$instance panda.collections.CollectionView<panda.core.Char>
@$instance panda.collections.Iterable<panda.core.UInt16>
@$instance panda.collections.MapWriter<panda.core.Immutable,panda.core.Object>
@$instance panda.collections.Iterator<(panda.core.Int32,panda.core.Char)>
@$instance panda.collections.Enumerator<panda.core.UInt8>
@$instance panda.collections.MapView<panda.core.Int32,panda.core.Object?>
@$instance panda.collections.ListView<panda.core.Int64>
@$instance panda.collections.ImmutablePrimitiveArray<panda.core.String>
@$instance panda.collections.CollectionWriter<panda.core.Int16>
@$instance panda.collections.ImmutablePrimitiveArray<panda.core.Real64>
@$instance panda.collections.Iterable<panda.core.StackTraceEntry>
@$instance panda.collections.ListIterator<panda.core.Int64>
@$instance panda.collections.Iterator<(panda.core.Int32,panda.core.Real32)>
@$instance panda.collections.Array<panda.io.File>
@$instance panda.collections.ListView<panda.core.Int16>
@$instance panda.collections.Iterator<(panda.core.Int32,panda.core.UInt64)>
@$instance panda.collections.ListIterator<panda.core.Int32>
@$instance panda.collections.Iterable<panda.collections.MutableMapEntry<panda.core.Int32,panda.core.Object?>?>
@$instance (panda.core.Int32,panda.core.Int8)
@$instance panda.collections.PrimitiveArray<panda.collections.MutableMapEntry<panda.core.Int32,panda.core.Object?>?>
@$instance panda.collections.CollectionWriter<panda.core.Int64>
@$instance panda.collections.ListWriter<panda.core.UInt32>
@$instance panda.collections.List<panda.core.Immutable>
@$instance panda.collections.Enumerator<panda.collections.MutableMapEntry<panda.core.Immutable,panda.core.Object>?>
@$instance panda.collections.ListIterator<panda.core.UInt64>
@$instance panda.collections.Enumerator<panda.core.Int16>
@$instance panda.collections.ImmutablePrimitiveArray<panda.core.Real32>
@$instance panda.collections.ListWriter<panda.core.Real32>
@$instance panda.collections.Iterable<panda.core.Real32>
@$instance panda.collections.CollectionWriter<panda.core.UInt8>
@$instance panda.collections.ListIterator<panda.core.StackTraceEntry>
@$instance (panda.core.Int32,panda.core.Immutable)
@$instance panda.collections.CollectionView<panda.core.Int64>
@$instance panda.collections.Iterator<panda.collections.MutableMapEntry<panda.core.Int32,panda.core.Object?>?>
@$instance panda.collections.ImmutablePrimitiveArray<panda.core.Int32>
@$instance panda.collections.ListIterator<panda.io.File>
@$instance panda.collections.ListWriter<panda.io.File>
@$instance panda.collections.ListView<panda.core.String>
@$instance panda.collections.List<panda.collections.MutableMapEntry<panda.core.Int32,panda.core.Object?>?>
@$instance panda.collections.CollectionView<panda.core.Object>
@$instance panda.collections.CollectionView<panda.core.StackTraceEntry>
@$instance panda.collections.List<panda.core.StackTraceEntry>
@$instance panda.collections.ListIterator<panda.core.UInt8>
@$instance panda.collections.Array<panda.core.UInt32>
@$instance panda.collections.Iterator<panda.core.Object>
@$instance panda.collections.ImmutablePrimitiveArray<panda.core.StackTraceEntry>
@$instance panda.collections.Iterator<panda.core.Char>
@$instance panda.collections.Iterator<panda.io.File>
@$instance panda.collections.Array<panda.core.Int8>
@$instance panda.collections.CollectionView<panda.collections.MutableMapEntry<panda.core.Immutable,panda.core.Object>?>
@$instance panda.collections.Iterator<(panda.core.Int32,panda.collections.MutableMapEntry<panda.core.Int32,panda.core.Object?>?)>
@$instance panda.collections.Iterator<panda.core.Immutable>
@$instance panda.collections.ListWriter<panda.core.Int32>
@$instance panda.collections.Iterable<panda.core.Int64>
@$instance panda.collections.ListView<panda.core.Int8>
@$instance panda.collections.Array<panda.core.Object>
@$instance panda.collections.ListWriter<panda.core.Real64>
@$instance panda.collections.ImmutableArray<panda.core.Int8>
@$instance panda.collections.Array<panda.core.Real64>
@$instance panda.collections.Iterable<panda.core.UInt32>
@$instance panda.collections.PrimitiveArray<panda.core.Object>
@$instance panda.collections.ListView<panda.core.UInt32>
@$instance panda.collections.Iterable<panda.core.String>
@$instance panda.collections.ImmutablePrimitiveArray<panda.collections.MutableMapEntry<panda.core.Immutable,panda.core.Object>?>
@$instance panda.collections.List<panda.core.Int32>
@$instance panda.collections.Iterator<panda.core.StackTraceEntry>
@$instance panda.collections.PrimitiveArray<panda.core.UInt32>
@$instance panda.collections.Enumerator<panda.core.String>
@$instance panda.collections.Iterator<(panda.core.Int32,panda.core.String)>
@$instance panda.collections.ListView<panda.core.UInt64>
@$instance panda.collections.PrimitiveArray<panda.core.Real64>
@$instance panda.collections.Enumerator<panda.core.UInt16>
@$instance panda.collections.ListView<panda.core.Object>
@$instance panda.collections.Map<panda.core.Immutable,panda.core.Object>
@$instance panda.collections.List<panda.core.Int8>
@$instance panda.collections.ListWriter<panda.core.Char>
@$instance panda.collections.Iterable<panda.core.Object>
@$instance panda.collections.Iterator<(panda.core.Int32,panda.io.File)>
@$instance panda.collections.ListWriter<panda.collections.MutableMapEntry<panda.core.Immutable,panda.core.Object>?>
@$instance panda.collections.CollectionWriter<panda.core.StackTraceEntry>
@$instance panda.collections.ListWriter<panda.collections.MutableMapEntry<panda.core.Int32,panda.core.Object?>?>
@$instance panda.collections.CollectionWriter<panda.core.Real32>
@$instance panda.collections.Array<panda.core.Char>
@$instance panda.collections.Iterable<panda.core.UInt8>
@$instance panda.collections.Iterator<panda.collections.MutableMapEntry<panda.core.Immutable,panda.core.Object>?>
@$instance (panda.core.Int32,panda.core.Char)
@$instance panda.collections.Iterator<(panda.core.Int32,panda.core.Int64)>
@$instance panda.collections.PrimitiveArray<panda.core.Int16>
@$instance panda.collections.ImmutablePrimitiveArray<panda.core.Char>
@$instance (panda.core.Int32,panda.core.Int32)
@$instance (panda.core.Int32,panda.collections.MutableMapEntry<panda.core.Int32,panda.core.Object?>?)
@$instance panda.collections.Enumerator<panda.collections.MutableMapEntry<panda.core.Int32,panda.core.Object?>?>
@$instance panda.collections.CollectionWriter<panda.collections.MutableMapEntry<panda.core.Int32,panda.core.Object?>?>
@$instance panda.collections.ListWriter<panda.core.Immutable>
@$instance (panda.core.Int32,panda.core.Real64)
@$instance panda.collections.Iterable<panda.core.Int16>
@$instance panda.collections.HashMapEntryIterator<panda.core.Immutable,panda.core.Object>
@$instance panda.collections.MapView<panda.core.Immutable,panda.core.Immutable>
@$instance panda.collections.List<panda.core.Int64>
@$instance panda.collections.Enumerator<panda.core.Immutable>
@$instance panda.collections.Iterable<panda.core.Int32>
@$instance (panda.core.Int32,panda.io.File)
@$instance panda.collections.List<panda.core.Real32>
@$instance panda.collections.Iterator<(panda.core.Int32,panda.core.StackTraceEntry)>
@$instance panda.collections.Iterator<(panda.core.Int32,panda.core.Object?)>
@$instance panda.collections.Iterator<panda.core.Real64>
@$instance panda.collections.ListView<panda.core.StackTraceEntry>
@$instance panda.collections.Enumerator<panda.core.Int8>
@$instance panda.collections.ListIterator<panda.core.UInt32>
@$instance panda.collections.ListIterator<panda.core.Int8>
@$instance panda.collections.ListWriter<panda.core.UInt8>
@$instance panda.collections.ImmutablePrimitiveArray<panda.core.UInt64>
@$instance panda.collections.ListIterator<panda.core.Real32>
@$instance panda.collections.CollectionView<panda.core.Real32>
@$instance panda.collections.PrimitiveArray<panda.core.UInt64>
@$instance panda.collections.ListWriter<panda.core.UInt64>
@$instance panda.collections.Array<panda.core.String>
@$instance panda.collections.ListIterator<panda.core.Object>
@$instance panda.collections.MapWriter<panda.core.Int32,panda.core.Object?>
@$instance panda.collections.CollectionWriter<panda.core.Immutable>
@$instance panda.collections.PrimitiveArray<panda.core.Immutable>
@$instance panda.collections.CollectionView<panda.core.UInt16>
@$instance panda.collections.ListIterator<panda.core.String>
@$instance (panda.core.Int32,panda.core.UInt8)
@$instance panda.collections.ImmutablePrimitiveArray<panda.core.Immutable>
@$instance panda.collections.Iterator<(panda.core.Int32,panda.core.UInt16)>
@$instance panda.collections.PrimitiveArray<panda.core.StackTraceEntry>
@$instance panda.collections.Iterable<(panda.core.Immutable,panda.core.Object)>
@$instance panda.collections.ListIterator<panda.collections.MutableMapEntry<panda.core.Immutable,panda.core.Object>?>
@$instance (panda.core.Int32,panda.core.UInt32)
@$instance panda.collections.ListView<panda.io.File>
@$instance panda.collections.Array<panda.core.Immutable>
@$instance panda.collections.List<panda.collections.MutableMapEntry<panda.core.Immutable,panda.core.Object>?>
@$instance panda.collections.MutableMapEntry<panda.core.Immutable,panda.core.Object>
@$instance panda.collections.Iterator<panda.core.Real32>
@$instance panda.collections.CollectionWriter<panda.core.Object?>
@$instance panda.collections.HashMapIterator<panda.core.Immutable,panda.core.Object,(panda.core.Immutable,panda.core.Object)>
@$instance panda.collections.Iterable<panda.core.Object?>
@$instance panda.threads.MessageQueue<panda.core.Immutable?>
@$instance panda.collections.CollectionWriter<panda.core.Real64>
@$instance panda.collections.ImmutablePrimitiveArray<panda.core.Object?>
@$instance panda.collections.ListWriter<panda.core.Object>
@$instance panda.collections.Enumerator<panda.core.Int32>
@$instance panda.collections.HashMap<panda.core.Immutable,panda.core.Object>
@$instance panda.collections.ImmutablePrimitiveArray<panda.io.File>
@$instance panda.collections.Iterator<panda.core.UInt64>
@$instance panda.collections.Iterator<(panda.core.Int32,panda.collections.MutableMapEntry<panda.core.Immutable,panda.core.Object>?)>
@$instance panda.collections.ListView<panda.core.Int32>
@$instance panda.collections.CollectionView<panda.core.Int16>
@$instance panda.collections.List<panda.core.UInt16>
@$instance panda.collections.Array<panda.core.StackTraceEntry>
@$instance (panda.core.Int32,panda.core.Object)
@$instance panda.collections.Iterator<(panda.core.Int32,panda.core.Int32)>
@$instance (panda.core.Int32,panda.core.String)
@$instance panda.collections.Iterator<panda.core.Int8>
@$instance panda.collections.List<panda.core.String>
@$instance panda.collections.Array<panda.core.Int16>
@$instance panda.collections.PrimitiveArray<panda.core.UInt16>
@$instance panda.collections.List<panda.core.Int16>
@$instance panda.collections.ListIterator<panda.core.Int16>
@$instance panda.collections.HashMapEntryIterator<panda.core.Int32,panda.core.Object?>
@$instance panda.collections.Iterator<panda.core.UInt16>
@$instance panda.collections.ListView<panda.core.Immutable>
@$instance panda.collections.Iterable<panda.core.Real64>
@$instance panda.collections.ListView<panda.core.UInt16>
@$instance panda.collections.ListWriter<panda.core.StackTraceEntry>
@$instance (panda.core.Immutable,panda.core.Object)
@$instance panda.collections.Array<panda.core.UInt64>
@$instance panda.collections.PrimitiveArray<panda.core.Char>
@$instance panda.collections.Enumerator<panda.core.Object?>
@$instance panda.collections.Iterator<panda.core.Int16>
@$instance panda.collections.Array<panda.core.Int64>
@$instance panda.collections.Enumerator<panda.io.File>
@$instance panda.collections.PrimitiveArray<panda.collections.MutableMapEntry<panda.core.Immutable,panda.core.Object>?>
@$instance panda.collections.HashMap<panda.core.Int32,panda.core.Object?>
@$instance panda.collections.Array<panda.core.UInt8>
@$instance panda.collections.Iterable<panda.io.File>
@$instance panda.collections.Array<panda.core.Real32>
@$instance panda.collections.List<panda.core.UInt32>
@$instance panda.collections.ListIterator<panda.core.Char>
@$instance panda.collections.CollectionView<panda.core.Object?>
@$instance panda.collections.PrimitiveArray<panda.core.Int64>
@$instance panda.collections.ImmutablePrimitiveArray<panda.core.Int16>
@$instance panda.collections.ImmutablePrimitiveArray<panda.core.UInt16>
@$instance (panda.core.Int32,panda.core.Int64)
@$instance panda.collections.ListView<panda.core.Real32>
@$instance (panda.core.Int32,panda.core.UInt16)
@$instance panda.collections.ListWriter<panda.core.UInt16>
@$instance panda.collections.List<panda.core.Object?>
@$instance panda.collections.Enumerator<panda.core.Real32>
@$instance panda.collections.Iterator<panda.core.UInt32>
@$instance panda.collections.Iterable<panda.core.Char>
@$instance panda.collections.Iterator<(panda.core.Int32,panda.core.Real64)>
@$instance panda.collections.CollectionWriter<panda.core.UInt64>
@$instance panda.collections.ListIterator<panda.core.Real64>
@$instance panda.collections.HashMapIterator<panda.core.Int32,panda.core.Object?,(panda.core.Int32,panda.core.Object?)>
@$instance panda.collections.List<panda.core.Char>
@$instance panda.collections.Array<panda.core.Int32>
@$instance panda.collections.CollectionView<panda.core.Real64>
@$instance panda.collections.CollectionWriter<panda.core.UInt32>
@$instance panda.collections.ListView<panda.collections.MutableMapEntry<panda.core.Int32,panda.core.Object?>?>
@$instance panda.collections.Iterable<panda.core.Immutable>
@$instance panda.collections.ListIterator<panda.collections.MutableMapEntry<panda.core.Int32,panda.core.Object?>?>
@$instance panda.collections.Iterator<(panda.core.Int32,panda.core.Int8)>
@$instance panda.collections.Iterator<panda.core.UInt8>
@$instance panda.collections.CollectionWriter<panda.core.Char>
@$instance panda.collections.CollectionWriter<panda.core.UInt16>
@$instance (panda.core.Int32,panda.core.Real32)
@$instance panda.collections.PrimitiveArray<panda.core.Int32>
@$instance panda.collections.PrimitiveArray<panda.core.String>
@$instance panda.collections.Iterator<panda.core.Int32>
@$instance panda.collections.ListIterator<panda.core.UInt16>
@$instance panda.collections.PrimitiveArray<panda.core.Object?>
@$instance panda.collections.List<panda.io.File>
@$instance panda.collections.PrimitiveArray<panda.core.Int8>
@$instance panda.collections.Enumerator<panda.core.Object>
@$instance panda.collections.Enumerator<panda.core.Int64>
@$instance panda.collections.CollectionView<panda.collections.MutableMapEntry<panda.core.Int32,panda.core.Object?>?>
@$instance panda.collections.Iterator<(panda.core.Int32,panda.core.UInt8)>
@$instance panda.collections.ImmutablePrimitiveArray<panda.collections.MutableMapEntry<panda.core.Int32,panda.core.Object?>?>
@$instance panda.collections.ImmutablePrimitiveArray<panda.core.UInt8>
@$instance panda.collections.ListWriter<panda.core.Int8>
@$instance panda.collections.Iterator<panda.core.String>
@$instance panda.collections.ImmutablePrimitiveArray<panda.core.Int8>
@$instance panda.collections.List<panda.core.Real64>
@$instance panda.collections.PrimitiveArray<panda.io.File>
@$instance (panda.core.Int32,panda.core.UInt64)
@$instance panda.collections.CollectionView<panda.core.UInt8>
@$instance panda.collections.CollectionView<panda.core.Immutable>
@$instance panda.collections.ListIterator<panda.core.Immutable>
@$instance panda.collections.Iterable<panda.core.UInt64>
@$instance panda.collections.CollectionWriter<panda.core.String>
@$instance panda.collections.Iterable<(panda.core.Int32,panda.core.Object?)>
@$instance panda.collections.Enumerator<panda.core.Char>
@$instance panda.collections.ListIterator<panda.core.Object?>
@$instance panda.collections.ImmutablePrimitiveArray<panda.core.UInt32>
@$instance panda.collections.CollectionWriter<panda.core.Int32>
@$instance panda.collections.PrimitiveArray<panda.core.Real32>
@$instance panda.collections.ListWriter<panda.core.Int16>
@$instance panda.collections.ListWriter<panda.core.Object?>
@$instance panda.collections.Array<panda.collections.MutableMapEntry<panda.core.Immutable,panda.core.Object>?>
@$instance panda.collections.List<panda.core.Object>
@$instance panda.collections.CollectionView<panda.core.UInt64>
@$instance panda.collections.ListView<panda.core.Object?>
@$instance panda.collections.ListView<panda.core.Real64>
@$instance panda.collections.ListView<panda.core.UInt8>
@$instance panda.threads.MessageQueue<panda.collections.ImmutableArray<panda.core.Int8>?>
@$instance panda.collections.CollectionView<panda.core.Int8>
@$instance panda.collections.Iterator<(panda.core.Immutable,panda.core.Object)>
@$instance panda.collections.CollectionView<panda.core.Int32>
